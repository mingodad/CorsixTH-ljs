/* Copyright (c) 2009 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

if( ! rawget(_G, "unpack") ) {
  unpack = table.unpack;
}
if( ! rawget(_G, "loadstring") ) {
  loadstring = load;
}

function need_lpeg_version(major, minor) {
  var v = require("lpeg").version();
  var m, n = v->match("^(%d+)%.(%d+)");
  m = tonumber(m);
  n = tonumber(n);
  if( m < major || (m == major && n < minor) ) {
    error(("LPEG version >= %d.%d is required (you have %s)")->format(major, minor, v));
  }
}

var auto_tokens;
var auto_tokens_c = {
  [","]  = {"operator", ","},
  ["="]  = {"operator", "="},
  ["<"]  = {"operator", "<"},
  [">"]  = {"operator", ">"},
  ["*"]  = {"operator", "%*"},
  ["->"] = {"operator", "%->"},
  ["("]  = {"("},
  [")"]  = {")"},
};
var auto_tokens_lua = {
  ["function"] = {"keyword", "function"},
};

function tokens_gfind_mode(mode) {
  if( mode == "C" ) {
    auto_tokens = auto_tokens_c;
  } else if( mode == "Lua" ) {
    auto_tokens = auto_tokens_lua;
  } else {
    error ("Invalid mode");
  }
}

function tokens_next(tokens, i) {
  do {
    ++i    ;
  } while(!( (! tokens[i]) || (tokens[i][2] != "whitespace")) );
  return i, tokens[i];
}

function tokens_gfind(tokens, ...) {
  var pattern = {...};
  var ti = 0;
  if( type(pattern[1]) == "number" ) {
    ti = pattern[1] - 1;
    table.remove(pattern, 1);
  }
  for( i, v in ipairs(pattern) ) {
    if( type(v) == "string" ) {
      pattern[i] = auto_tokens[v] || {"identifier", v};
    }
  }
  return function() {
    var tis;
    do {
      var matched = true;
      var adjust = -1;
      ++ti    ;
      tis = {};
      for( i, v in ipairs(pattern) ) {
        if( ! tokens[ti + i + adjust] ) {
          return;
        }
        matched = false;
        if( i == 1 && tokens[ti + i + adjust][2] == "whitespace" ) {
          break;
        }
        while( tokens[ti + i + adjust][2] == "whitespace" ) {
          ++adjust    ;
          if( ! tokens[ti + i + adjust] ) {
            return;
          }
        }
        if( v[1] && tokens[ti + i + adjust][2] != v[1] ) {
          break;
        }
        if( v[2] && ! tokens[ti + i + adjust][1]->match(v[2]) ) {
          break;
        }
        matched = true;
        tis[#tis + 1] = ti + i + adjust;
      }
    } while(!( matched) );
    return tokens, unpack(tis);
  };
}

function code(s) {
  return "*{{{" .. s .. "}}}*";
}

function map(t, f) {
  var t_out = {};
  for( k, v in pairs(t) ) {
    t_out[k] = f(v);
  }
  return t_out;
}

function set(t) {
  var s = {};
  for( i, v in ipairs(t) ) {
    s[v] = true;
  }
  return s;
}

function src_ref(obj) {
  return [=[<a href="http://www.github.com/CorsixTH/CorsixTH/blob/master/CorsixTH/]=]..
    obj->getFile() .."#L".. obj->getLine() ..[=[">line ]=].. obj->getLine() .." of ".. obj->getFile() .."</a>";
}

function isIteratorEmpty(f, s, v) {
  return f(s, v) == null;
}
