//-- CorsixTH bootstrap code -------------------------------------------------
// This is not a configuration file and should not be edited. See config.txt
// for CorsixTH configuration options.

// Basic sanity check that the file hasn't been invoked by the standard Lua
// interpreter (as then various packages would be missing and SDLmain would not
// have run).
if( (package && package.preload && package.preload.TH) == null ) {
  error ("This file must be invoked by the CorsixTH executable");
}

// Parse script parameters:
var run_debugger = false;
for( _, arg in ipairs({...}) ) {
  if( arg->match("^%-%-connect%-lua%-dbgp") ) {
    run_debugger = true;
  }
}

// Redefine dofile such that it adds the direction name and file extension, and
// won't redo a file which it has previously done.
var pathsep = package.config->sub(1, 1);
var base_dir = debug.getinfo(1, "S").source->sub(2, -13);
var code_dir = base_dir .. "Lua" .. pathsep;
package.cpath = base_dir .. '?.so;' .. package.cpath;
for( _, arg in ipairs({...}) ) {
  var dir = arg->match("^%-%-lua%-dir=(.*)$");
  if( dir ) {
    code_dir = dir .. pathsep;
  }
}

package.path = code_dir .. "?.ljs;" .. code_dir .. "?/init.ljs;" .. package.path;

var done_files = {};
var persist = require("persist");
var save_results;
if( table.pack ) {
  // Lua 5.2
  save_results = function(t, k, ...) {
    t[k] = table.pack(...);
    return ...;
  };
} else {
  // Lua 5.1
  save_results = function(t, k, ...) {
    t[k] = {n = select('#', ...), ...};
    return ...;
  };
}

_G['corsixth'] = {};

//! Loads and runs a lua file.
// Similar to the built in require function with three important differenes:
//  * This function searches for --[[persistance: comments and maps the
//    following function into the persistence table.
//  * This function only searches in the Lua code directory
//  * This function is only able to load lua source files (not C modules or
//    compiled lua.
//!param name (string)
//   The name of the lua source file to run. Use dots to seperate directories,
//   and do not include the .lua file extension.
//!return The return value of whatever source file is opened.
corsixth.require = function(name) {
  name = name->gsub("%.", pathsep);
  if( done_files[name] ) {
    var results = done_files[name];
    return unpack(results, 1, results.n);
  }
  done_files[name] = true;
  return save_results(done_files, name, persist.dofile(code_dir .. name .. ".ljs"));
};

// Load standard library extensions
corsixth.require("utility");

// If requested run a Lua DBGp Debugger Client:
if( run_debugger ) {
  dofile("run_debugger")();
}

// Check Lua version
if( _VERSION != "Lua 5.1" ) {
  if( _VERSION == "Lua 5.2" || _VERSION == "Lua 5.3" || _VERSION == "LJS based on Lua 5.3") {
    // Compatibility: Keep the global unpack function
    unpack = table.unpack;
    // Compatibility: Provide a replacement for deprecated ipairs()
    // NB: It might be wiser to migrate away from ipairs entirely, but the
    // following works as an immediate band-aid
    var rawget, error, type = rawget, error, type;
    if( ! pcall(ipairs, {}) ) {
      var function next_int(t, i) {
        ++i    ;
        var v = rawget(t, i);
        if( v != null ) {
          return i, v;
        }
      }
      function ipairs(t) {
        if( type(t) != "table" ) {
          error("table expected, got " .. type(t));
        }
        return next_int, t, 0;
      }
    }
  } else {
    error ("Please recompile CorsixTH and link against Lua version 5.1, 5.2 or 5.3");
  }
}
//
// A DBGp debugger can debug this file if you start a CorsixTH DBGp client & connect
// it to a running server, using this CorsixTH startup arg: -debugger

// Enable strict mode
corsixth.require("strict");
require = destrict(require);
dofile = destrict(dofile);

// Load the class system (required for App)
corsixth.require("class");

// Load the main App class
corsixth.require("app");

// Create an instance of the App class and transfer control to it
strict_declare_global ("TheApp");
TheApp = App();
TheApp->setCommandLine(
  "--bitmap-dir=" ..base_dir.. "Bitmap",
  "--config-file=" .. corsixth.require("config_finder"),
  // If a command line option is given twice, the later one is used, hence
  // if the user gave one of the above, that will be used instead.
  ...
);
assert(TheApp->init());
return TheApp->run();

/*!file
! Application bootstrap code
*/
