/* Copyright (c) 2009 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

class ("WalkAction") (HumanoidAction);

//-@type WalkAction
var WalkAction = _G["WalkAction"];

//! Action to walk to a given position.
//!param x (int) X coordinate of the destination tile.
//!param y (int) Y coordinate of the destination tile.
function WalkAction::WalkAction(x, y) {
  assert(type(x) == "number", "Invalid value for parameter 'x'");
  assert(type(y) == "number", "Invalid value for parameter 'y'");

  this->HumanoidAction("walk");
  this.x = x;
  this.y = y;
  this.truncate_only_on_high_priority = false;
  this.walking_to_vaccinate = false; // Nurse walking with the intention to vaccinate
  this.is_entering = false; // Whether the walk enters a room.
}

function WalkAction::truncateOnHighPriority() {
  this.truncate_only_on_high_priority = true;
  return this;
}

//! Nurse is walking with the intention to vaccinate.
//!return (action) self, for daisy-chaining.
function WalkAction::enableWalkingToVaccinate() {
  this.walking_to_vaccinate = true;
  return this;
}

//! Set a flag whether the walk enters a room.
//!param entering (bool) If set or nil, set the flag of entering the room.
//!return (action) self, for daisy-chaining.
function WalkAction::setIsEntering(entering) {
  assert(type(entering) == "boolean", "Invalid value for parameter 'entering'");

  this.is_entering = entering;
  return this;
}

var action_walk_interrupt;
action_walk_interrupt = permanent("action_walk_interrupt")( function(action, humanoid, high_priority) {
  if( action.truncate_only_on_high_priority && ! high_priority ) {
    action.on_interrupt = action_walk_interrupt;
    return;
  }

  // Truncate the remainder of the path
  for( j = #action.path_x, action.path_index + 1, -1 ) {
    action.path_x[j] = null;
    action.path_y[j] = null;
  }
  // Unreserve any door which we had reserved unless specifically told not to.
  if( ! action.keep_reserved ) {
    var door = action.reserve_on_resume;
    if( door && (door.reserved_for == humanoid || class.is(humanoid, Vip)) ) { //  "or class.is(humanoid, Vip)" is added as a temporary fix
  // TODO: find the cause of the "VIP bug", why does the door not get unreserved sometimes when the VIP has looked into a room? See issue 1025
      door.reserved_for = null;
      if( door.queue->size() > 0 ) {
        door.queue->pop();
        door->updateDynamicInfo();
      }
    }
  } else {
    // This flag can be used only once at a time.
    action.keep_reserved = null;
  }
  // Unexpect the patient from a possible destination room.
  if( humanoid.next_room_to_visit ) {
    var door = humanoid.next_room_to_visit.door;
    if( door.queue ) {
      door.queue->unexpect(humanoid);
      door->updateDynamicInfo();
    }
  }
  // Terminate immediately if high-priority
  if( high_priority ) {
    var timer_function = humanoid.timer_function;
    humanoid->setTimer(null);
    timer_function(humanoid);
  }

  if( action.walking_to_vaccinate ) {
    var hospital = humanoid.hospital || humanoid.last_hospital;
    var epidemic = hospital.epidemic;
    if( epidemic ) {
      epidemic->interruptVaccinationActions(humanoid);
    }
  }
});

var flag_list_bottom = 2048;
var flag_flip_h = 1;

var navigateDoor;

var function action_walk_raw(humanoid, x1, y1, x2, y2, map, timer_fn) {
  var factor = 1;
  var quantity = 8;
  if( humanoid.speed && humanoid.speed == "fast" ) {
    factor = 2;
    quantity = 4;
  }

  var anims = humanoid.walk_anims;
  var world = humanoid.world;
  var notify_object = world->getObjectToNotifyOfOccupants(x2, y2);
  if( notify_object ) {
    notify_object->onOccupantChange(1);
  }
  notify_object = world->getObjectToNotifyOfOccupants(x1, y1);
  if( notify_object ) {
    notify_object->onOccupantChange(-1);
  }
  if( x1 != x2 ) {
    if( x1 < x2 ) {
      if( map && map->getCellFlags(x2, y2).doorWest ) {
        return navigateDoor(humanoid, x1, y1, "east");
      } else {
        humanoid.last_move_direction = "east";
        humanoid->setAnimation(anims.walk_east);
        humanoid->setTilePositionSpeed(x2, y2, -32, -16, 4*factor, 2*factor);
      }
    } else {
      if( map && map->getCellFlags(x1, y1).doorWest ) {
        return navigateDoor(humanoid, x1, y1, "west");
      } else {
        humanoid.last_move_direction = "west";
        humanoid->setAnimation(anims.walk_north, flag_flip_h);
        humanoid->setTilePositionSpeed(x1, y1, 0, 0, -4*factor, -2*factor);
      }
    }
  } else {
    if( y1 < y2 ) {
      if( map && map->getCellFlags(x2, y2).doorNorth ) {
        return navigateDoor(humanoid, x1, y1, "south");
      } else {
        humanoid.last_move_direction = "south";
        humanoid->setAnimation(anims.walk_east, flag_flip_h);
        humanoid->setTilePositionSpeed(x2, y2, 32, -16, -4*factor, 2*factor);
      }
    } else {
      if( map && map->getCellFlags(x1, y1).doorNorth ) {
        return navigateDoor(humanoid, x1, y1, "north");
      } else {
        humanoid.last_move_direction = "north";
        humanoid->setAnimation(anims.walk_north);
        humanoid->setTilePositionSpeed(x1, y1, 0, 0, 4*factor, -2*factor);
      }
    }
  }
  humanoid->setTimer(quantity, timer_fn);
}

var flags_here, flags_there = {}, {};
var action_walk_tick; action_walk_tick = permanent("action_walk_tick")( function(humanoid) {
  var action = humanoid->getCurrentAction();
  var path_x = action.path_x;
  var path_y = action.path_y;
  var path_index = action.path_index;
  var check_doors = ! ! humanoid.door_anims;
  var x1, y1 = path_x[path_index  ], path_y[path_index  ];
  var x2, y2 = path_x[path_index+1], path_y[path_index+1];

  if( ! x2 ) {
    // Arrival at final tile
    humanoid->setTilePositionSpeed(x1, y1);
    if( action.on_next_tile_set ) {
      action.on_next_tile_set();
    }
    humanoid->finishAction(action);
    return;
  }

  // Make sure that the next tile hasn't somehow become impassable since our
  // route was determined
  var map = humanoid.world.map.th;
  map->getCellFlags(x1, y1, flags_here);
  map->getCellFlags(x2, y2, flags_there);
  var recalc_route = ! flags_there.passable && flags_here.passable;
  // Also make sure that a room hasn't unexpectedly been built on top of the
  // path since the route was calculated.
  if( ! recalc_route && flags_here.roomId != flags_there.roomId ) {
    var door = TheApp.objects.door.thob;
    var door2 = TheApp.objects.swing_door_right.thob;
    if( flags_here.thob != door && flags_here.thob != door2 &&
        flags_there.thob != door && flags_there.thob != door2 &&
        (! flags_there.room ||
          map->getCellFlags(path_x[#path_x], path_y[#path_y]).roomId != flags_there.roomId) ) {
      recalc_route = true;
    }
  }
  if( recalc_route ) {
    if( map->getCellFlags(x1, y1).passable ) {
      humanoid->setTilePositionSpeed(x1, y1);
      if( action.on_next_tile_set ) {
        action.on_next_tile_set();
      }
      return action->on_restart(humanoid);
    }
  }

  // on_next_tile_set can be set in the call to action_walk_raw, but it is
  // then to be called AFTER the next raw walk or tile set, which is why we
  // remember the previous value and call that, rather than call the new value.
  var on_next_tile_set = action.on_next_tile_set;
  action_walk_raw(humanoid, x1, y1, x2, y2, check_doors && map, action_walk_tick);
  action.path_index = path_index + 1;
  if( on_next_tile_set ) {
    on_next_tile_set();
  }
});

// This is a slight hack, but is the easiest way to make walk functionality
// available to other actions which want to do low-level walk operations.
strict_declare_global ("HumanoidRawWalk");
HumanoidRawWalk = action_walk_raw;

var action_walk_tick_door = permanent("action_walk_tick_door")( function(humanoid) {
  var door = humanoid.user_of;
  if( ! class.is(door, SwingDoor) ) {
    // The doors will need to finish swinging before another humanoid can walk through.
    door->removeUser(humanoid);
  }
  humanoid.user_of = null;
  return action_walk_tick(humanoid);
});

navigateDoor = function(humanoid, x1, y1, dir) {
  var action = humanoid->getCurrentAction();
  var duration = 12;
  var dx = x1;
  var dy = y1;
  if( dir == "east" ) {
    ++dx    ;
    duration = 10;
  } else if( dir == "south" ) {
    ++dy    ;
    duration = 10;
  }
  var swinging = false;
  var door = humanoid.world->getObject(dx, dy, "door");
  if( ! door ) {
    swinging = true;
    door = humanoid.world->getObject(dx, dy, "swing_door_right");
  }
  door.queue->unexpect(humanoid);
  door->updateDynamicInfo();
  var room = door->getRoom();
  var is_entering_room = room && humanoid->getRoom() != room;

  if( class.is(humanoid, Staff) && is_entering_room &&
      humanoid.humanoid_class != "Handyman" ) {
    // A member of staff is entering, but is maybe no longer needed
    // in this room?
    if( ! room.is_active || ! room->staffFitsInRoom(humanoid) ) {
      humanoid->queueAction(IdleAction(), 0);
      humanoid->setTilePositionSpeed(x1, y1);
      humanoid->setNextAction(IdleAction()->setCount(10), 0);
      humanoid->queueAction(MeanderAction());
      return;
    }
  }
  if( door.user || (door.reserved_for && door.reserved_for != humanoid) ||
      (is_entering_room && ! room->canHumanoidEnter(humanoid)) ) {
    //queueing patients are no longer enroute
    room.humanoids_enroute[humanoid] = null;
    var queue = door.queue;
    if( door.reserved_for == humanoid ) {
      door.reserved_for = null;
      if( queue->size() > 0 && room.is_active ) {
        queue->pop();
        door->updateDynamicInfo();
      }
    }
    humanoid->setTilePositionSpeed(x1, y1);
    var action_index = 0;
    if( is_entering_room && queue->size() == 0 && ! room->getPatient() &&
        ! door.user && ! door.reserved_for && humanoid.should_knock_on_doors &&
        room.room_info.required_staff && ! swinging ) {
      humanoid->queueAction(KnockDoorAction(door, dir), action_index);
      ++action_index    ;
    }
    humanoid->queueAction(QueueAction(x1, y1, queue)->setIsLeaving(humanoid->isLeaving())
        ->setReserveWhenDone(door), action_index);
    action.must_happen = action.saved_must_happen;
    action.reserve_on_resume = door;
    return;
  }
  if( action.reserve_on_resume ) {
    assert(action.reserve_on_resume == door);
    action.reserve_on_resume = null;
  } else if( is_entering_room && ! action.done_knock && humanoid.should_knock_on_doors &&
      room.room_info.required_staff && ! swinging ) {
    humanoid->setTilePositionSpeed(x1, y1);
    humanoid->queueAction(KnockDoorAction(door, dir), 0);
    action.reserve_on_resume = door;
    action.done_knock = true;
    return;
  }

  var to_x, to_y;
  var anims = humanoid.door_anims;
  if( ! anims.leaving || ! anims.entering ) {
    var from_rm, to_rm = room.room_info.id, "corridor";
    if( is_entering_room ) {
      from_rm, to_rm = to_rm, from_rm;
    }
    error(("Humanoid (%s) without door animations trying to walk through "..
      "door (from %s to %s)")->format(humanoid.humanoid_class, from_rm, to_rm));
  }
  humanoid->setTilePositionSpeed(dx, dy);
  humanoid.user_of = door;
  door->setUser(humanoid);
  var entering, leaving;
  if( swinging ) {
    entering = anims.entering_swing;
    leaving = anims.leaving_swing;
    duration = humanoid.world->getAnimLength(entering);
  } else {
    entering = anims.entering;
    leaving = anims.leaving;
  }
  var direction = "in";
  if( dir == "north" ) {
    humanoid->setAnimation(leaving, flag_list_bottom);
    to_x, to_y = dx, dy - 1;
    duration = humanoid.world->getAnimLength(leaving);
  } else if( dir == "west" ) {
    humanoid->setAnimation(leaving, flag_list_bottom + flag_flip_h);
    to_x, to_y = dx - 1, dy;
    duration = humanoid.world->getAnimLength(leaving);
  } else if( dir == "east" ) {
    humanoid->setAnimation(entering, flag_list_bottom);
    to_x, to_y = dx, dy;
    direction = "out";
  } else if( dir == "south" ) {
    humanoid->setAnimation(entering, flag_list_bottom + flag_flip_h);
    to_x, to_y = dx, dy;
    direction = "out";
  }
  humanoid.last_move_direction = dir;
  if( swinging ) {
    door->swingDoors(direction, duration);
  }

  // We want to notify the rooms on either side of the door that the humanoid
  // has entered / left, but we want to do this AFTER the humanoid has gone
  // through the door (so that their tile position reflects the room which they
  // are now in).
  var /*persistable:action_walk_on_next_tile_set*/ function on_next_tile_set() {
    if( action.on_next_tile_set == on_next_tile_set ) {
      action.on_next_tile_set = null;
    }
    var rm = humanoid.world->getRoom(x1, y1);
    if( rm ) {
      rm->onHumanoidLeave(humanoid);
    }
    rm = humanoid.world->getRoom(to_x, to_y);
    if( rm ) {
      rm->onHumanoidEnter(humanoid);
    }
  }
  action.on_next_tile_set = on_next_tile_set;

  if( is_entering_room ) {
    humanoid.in_room = room;
  }

  action.path_index = action.path_index + 1;
  humanoid->setTimer(duration, action_walk_tick_door);
};

var function action_walk_start(action, humanoid) {
  // Possible future optimisation: when walking from somewhere inside the hospital
  // to somewhere outside the hospital (or from one building to another?), do
  // pathfinding in two steps, with the building door as a middle node
  var path_x, path_y = humanoid.world->getPath(humanoid.tile_x, humanoid.tile_y, action.x, action.y);
  if( ! path_x || #path_x == 1 ) {
    // Finishing an action from within the start handler is a very bad idea, as
    // it is normal when ordering several actions to setNextAction the first
    // one, then queueAction the rest. If the first starts straight away, and
    // then finishes straight away, then the humanoid is left with an empty
    // action queue. Hence we wait one tick before finishing. We still need to
    // set the humanoid animation / position though, which is delegated to the
    // idle action (if this wasn't done, then the previous animation would be
    // used, which might involve an object).
    TheApp.humanoid_actions.idle(action, humanoid);
    humanoid->setTimer(1, humanoid.finishAction);
    return;
  }
  action.path_x = path_x;
  action.path_y = path_y;
  action.path_index = 1;
  if( ! action.no_truncate ) {
    action.on_interrupt = action_walk_interrupt;
  }
  action.on_restart = action_walk_start;
  action.saved_must_happen = action.must_happen;
  action.must_happen = true;
  if( action.reserve_on_resume && ! action.todo_interrupt ) {
    action.reserve_on_resume.reserved_for = humanoid;
  }

  return action_walk_tick(humanoid);
}

return action_walk_start;
