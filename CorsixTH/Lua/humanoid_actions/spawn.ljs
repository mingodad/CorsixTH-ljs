/* Copyright (c) 2009 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

class ("SpawnAction") (HumanoidAction);

//-@type SpawnAction
var SpawnAction = _G["SpawnAction"];

//! Spawn an entity.
//!param mode (str) Mode of spawning: "spawn" or "despawn"
//!param point (table x, y, optional direction) Position and optional face direction of spawning or despawning.
function SpawnAction::SpawnAction(mode, point) {
  assert(mode == "spawn" || mode == "despawn", "Invalid value for parameter 'mode'");
  assert(type(point) == "table" &&
    type(point.x) == "number" && type(point.y) == "number",
    "Invalid value for parameter 'point'");

  this->HumanoidAction("spawn");
  this.mode = mode; // mode of spawning: "spawn" or "despawn"
  this.point = point;
  this.offset = null; // Offset in position??
}

//! Set the offset of spawning.
//!
//! These two values specifies how many tiles away the humanoid should start
//! walking before actually spawning in the destination tile. Default is x and
//! y values are 2, and should not be set less than or equal to 0. Only one of
//! x or y offsets are used depending on the initial walk direction of the
//! newly spawned humanoid.
//!param offset (table x, y) Position offset.
//!return (action) Return self for daisy chaining.
function SpawnAction::setOffset(offset) {
  assert(type(offset) == "table" &&
      (offset.x == null || (type(offset.x) == "number" && offset.x > 0)) &&
      (offset.y == null || (type(offset.y) == "number" && offset.y > 0)),
      "Invalid value for parameter 'offset'");

  this.offset = offset;
  return this;
}

var orient_opposite = {
  north = "south",
  west = "east",
  east = "west",
  south = "north",
};

var action_spawn_despawn = permanent("action_spawn_despawn")( function(humanoid) {
  if( humanoid.hospital ) {
    humanoid->despawn();
  }
  humanoid.world->destroyEntity(humanoid);
});

var function action_spawn_start(action, humanoid) {
  assert(action.mode == "spawn" || action.mode == "despawn", "spawn action given invalid mode: " .. action.mode);
  var x, y = action.point.x, action.point.y;
  if( action.mode == "despawn" && (humanoid.tile_x != x || humanoid.tile_y != y) ) {
    humanoid->queueAction(WalkAction(action.point.x, action.point.y)->setMustHappen(action.must_happen), 0);
    return;
  }
  action.must_happen = true;

  var anims = humanoid.walk_anims;
  var walk_dir = action.point.direction;
  if( action.mode == "spawn" ) {
    walk_dir = orient_opposite[walk_dir];
  }
  var offset_x = 2;
  var offset_y = 2;
  if( action.offset ) {
    offset_x = action.offset.x && action.offset.x || 2;
    offset_y = action.offset.y && action.offset.y || 2;
  }
  assert(offset_x > 0 && offset_y > 0, "Spawning needs to be done from an adjacent tile.");
  var anim, flag, speed_x, speed_y, duration;
  if( walk_dir == "east" ) {
    anim, flag, speed_x, speed_y, duration = anims.walk_east , 0,  4,  2, 10*offset_x;
  } else if( walk_dir == "west" ) {
    anim, flag, speed_x, speed_y, duration = anims.walk_north, 1, -4, -2, 10*offset_x;
  } else if( walk_dir == "south" ) {
    anim, flag, speed_x, speed_y, duration = anims.walk_east , 1, -4,  2, 10*offset_y;
  } else {//if walk_dir == "north" then
    anim, flag, speed_x, speed_y, duration = anims.walk_north, 0,  4, -2, 10*offset_y;
  }
  humanoid.last_move_direction = walk_dir;
  humanoid->setAnimation(anim, flag);
  var pos_x, pos_y = 0, 0;
  if( action.mode == "spawn" ) {
    pos_x = -speed_x * duration;
    pos_y = -speed_y * duration;
    humanoid->setTimer(duration, humanoid.finishAction);
  } else {
    humanoid->setTimer(duration, action_spawn_despawn);
  }
  humanoid->setTilePositionSpeed(x, y, pos_x, pos_y, speed_x, speed_y);
}

return action_spawn_start;
