/* Copyright (c) 2009 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

class ("StaffReceptionAction") (HumanoidAction);

//-@type StaffReceptionAction
var StaffReceptionAction = _G["StaffReceptionAction"];

// Action class for the "staff reception desk" action.
//!param desk (object) Desk to staff.
function StaffReceptionAction::StaffReceptionAction(desk) {
  assert(class.is(desk, ReceptionDesk), "Invalid value for parameter 'desk'");

  this->HumanoidAction("staff_reception");
  this.object = desk; // Reception desk object.
  this->setMustHappen(true);
}

var action_staff_reception_interrupt = permanent("action_staff_reception_interrupt")( function(action, humanoid, high_priority) {
  var object = action.object;
  object.receptionist = null;
  if( ! object.being_destroyed ) { // don't look for replacement if desk was picked up
    object->checkForNearbyStaff();
  }
  humanoid.associated_desk = null;
  var dx, dy = object->getSecondaryUsageTile();
  if( high_priority ) {
    humanoid->setTilePositionSpeed(dx, dy);
    humanoid->finishAction();
  } else {
    HumanoidRawWalk(humanoid, humanoid.tile_x, humanoid.tile_y, dx, dy, null, function() {
      humanoid->setTilePositionSpeed(dx, dy);
      humanoid->finishAction();
    });
  }
});

var action_staff_reception_idle_phase = permanent("action_staff_reception_idle_phase")( function(humanoid) {
  var action = humanoid->getCurrentAction();
  var direction = humanoid.last_move_direction;
  var anims = humanoid.walk_anims;
  var object = action.object;
  if( direction == "north" ) {
    humanoid->setAnimation(anims.idle_north, 0);
  } else if( direction == "east" ) {
    humanoid->setAnimation(anims.idle_east, 0);
  } else if( direction == "south" ) {
    humanoid->setAnimation(anims.idle_east, 1);
  } else if( direction == "west" ) {
    humanoid->setAnimation(anims.idle_north, 1);
  }
  humanoid->setTilePositionSpeed(object.tile_x, object.tile_y);
  object.receptionist = humanoid;
  object.reserved_for = null;
  object.th->makeVisible();
  if( direction == "north" || direction == "west" ) {
    // Place desk behind receptionist in render order (they are on the same tile)
    object.th->setTile(object.th->getTile());
  }
  if( action.on_interrupt ) {
    action.on_interrupt = action_staff_reception_interrupt;
  } else {
    action_staff_reception_interrupt(action, humanoid);
  }
});

var action_staff_reception_interrupt_early = permanent("action_staff_reception_interrupt_early")( function(action, humanoid, high_priority) {
  if( high_priority ) {
    action.object.reserved_for = null;
    humanoid.associated_desk->checkForNearbyStaff();
    humanoid.associated_desk = null;
    humanoid->setTimer(null);
    humanoid->setTilePositionSpeed(action.object->getSecondaryUsageTile());
    humanoid->finishAction();
  }
});

var function action_staff_reception_start(action, humanoid) {
  if( action.todo_interrupt ) {
    humanoid.associated_desk.reserved_for = null;
    humanoid.associated_desk->checkForNearbyStaff();
    humanoid.associated_desk = null;
    humanoid->finishAction(action);
    return;
  }
  var object = action.object;
  HumanoidRawWalk(humanoid, humanoid.tile_x, humanoid.tile_y,
    object.tile_x, object.tile_y, null, action_staff_reception_idle_phase);
  action.must_happen = true;
  action.on_interrupt = action_staff_reception_interrupt_early;
}

return action_staff_reception_start;
