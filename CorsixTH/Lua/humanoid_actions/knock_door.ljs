/* Copyright (c) 2009 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

class ("KnockDoorAction") (HumanoidAction);

//-@type KnockDoorAction
var KnockDoorAction = _G["KnockDoorAction"];

//! Constructor for knocking on the door action.
//!param door (Object) Door to knock on.
//!param direction (string) Direction of facing.
function KnockDoorAction::KnockDoorAction(door, direction) {
  assert(class.is(door, Door), "Invalid value for parameter 'door'");
  assert(direction == "north" || direction == "south" ||
      direction == "east" || direction == "west",
      "Invalid value for parameter 'direction'");

  this->HumanoidAction("knock_door");
  this.door = door; // Door to knock on.
  this.direction = direction; // Direction of facing.
}

var action_knock_door_tick = permanent("action_knock_door_tick")( function(humanoid) {
  var door = humanoid.user_of;
  door->removeUser(humanoid);
  humanoid.user_of = null;
  door->getRoom()->tryAdvanceQueue();
  humanoid->finishAction();
});

var function action_knock_door_start(action, humanoid) {
  var direction = action.direction;
  var anims = humanoid.door_anims;
  var door = action.door;
  action.must_happen = true;
  var anim = anims.knock_north;
  var flag_mirror = (direction == "west" || direction == "south") && 1 || 0;
  if( direction == "east" || direction == "south" ) {
    anim = anims.knock_east;
  }
  humanoid->setAnimation(anim, flag_mirror);
  humanoid->setTilePositionSpeed(humanoid.tile_x, humanoid.tile_y);
  humanoid->setTimer(humanoid.world->getAnimLength(anim), action_knock_door_tick);
  humanoid.user_of = door;
  door->setUser(humanoid);
  door.th->makeVisible();
}

return action_knock_door_start;
