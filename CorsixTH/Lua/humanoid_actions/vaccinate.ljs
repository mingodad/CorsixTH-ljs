/* Copyright (c) 2013 William "sadger" Gatens

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

class ("VaccinateAction") (HumanoidAction);

//-@type VaccinateAction
var VaccinateAction = _G["VaccinateAction"];

// Vaccinate action constructor for a nurse.
//!param patient (Patient) Patient to vaccinate.
//!param fee Amount of money to pay.
function VaccinateAction::VaccinateAction(patient, fee) {
  assert(class.is(patient, Patient), "Invalid value for parameter 'patient'");
  assert(type(fee) == "number", "Invalid value for parameter 'fee'");

  this->HumanoidAction("vaccinate");
  this.patient = patient; // Patient to vaccinate.
  this.vaccination_fee = fee; // Money to get from the patient.
  this->setMustHappen(true);
}

var is_in_adjacent_square = permanent("vacc_adjacent_square")(
function (patient,nurse) {
  var x1, y1 = patient.tile_x, patient.tile_y;
  var x2, y2 = nurse.tile_x, nurse.tile_y;

  if( ! x1 || ! x2 || ! y1 || ! y2 ) {
    return false;
  }

  // Determine if they are in an adjacent square
  var x_diff = math.abs(x1-x2);
  var y_diff = math.abs(y1-y2);
  if( (x_diff + y_diff == 1) ) {
  // And neither of them are in a room so must be outside
   return (! patient->getRoom() && ! nurse->getRoom());
  }
});

var find_face_direction = permanent("vacc_find_face_direction")(
function(nurse, patient) {
  var nx, ny = nurse.tile_x, nurse.tile_y;
  var px, py = patient.tile_x, patient.tile_y;

  var x_diff = px - nx;
  var y_diff = py - ny;

  if( x_diff == 1 ) {
    return "east";
  } else if( x_diff == -1 ) {
    return "west";
  } else if( y_diff == -1 ) {
    return "north";
  } else if( y_diff == 1 ) {
    return "south";
  }
});


var interrupt_vaccination = permanent("action_interrupt_vaccination")(
function(action, humanoid) {
  var epidemic = humanoid.hospital.epidemic;
  epidemic->interruptVaccinationActions(humanoid);
  humanoid->setTimer(1, humanoid.finishAction);
});


var function vaccinate(action, nurse) {
  assert(nurse.humanoid_class == "Nurse");

  var patient = action.patient;

  var perform_vaccination = /*persistable:action_perform_vaccination*/ function(humanoid) {
    // Check if they STILL are in an adjacent square
    if( is_in_adjacent_square(nurse, patient) ) {
      CallsDispatcher.queueCallCheckpointAction(nurse);
      nurse->queueAction(AnswerCallAction());
      // Disable either vaccination icon that may be present (edge case)
      patient->setMood("epidemy2", "deactivate");
      patient->setMood("epidemy3", "deactivate");
      patient->setMood("epidemy1", "activate");
      patient.vaccinated = true;
      patient.hospital->spendMoney(action.vaccination_fee, _S.transactions.vaccination);
      patient->updateDynamicInfo();
    } else {
      patient->setMood("epidemy3", "deactivate");
      patient->setMood("epidemy2", "activate");
      // Drop it they may not even be the vacc candidate anymore
      CallsDispatcher.queueCallCheckpointAction(nurse);
      nurse->queueAction(AnswerCallAction());
      patient.reserved_for = null;
    }
  };

  if( is_in_adjacent_square(nurse,patient) ) {
    var face_direction = find_face_direction(nurse,patient);
    nurse->queueAction(IdleAction()->setDirection(face_direction)->setCount(5)
        ->setAfterUse(perform_vaccination)->setOnInterrupt(interrupt_vaccination)->setMustHappen(true));

  } else {
    patient->removeVaccinationCandidateStatus();
    nurse->setCallCompleted();
    patient.reserved_for = null;
    nurse->queueAction(MeanderAction());
  }
  nurse->finishAction();
}

return vaccinate;

