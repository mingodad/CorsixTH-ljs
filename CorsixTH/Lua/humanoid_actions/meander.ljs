/* Copyright (c) 2009 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

class ("MeanderAction") (HumanoidAction);

//-@type MeanderAction
var MeanderAction = _G["MeanderAction"];

function MeanderAction::MeanderAction() {
  this->HumanoidAction("meander");
}

var function meander_action_start(action, humanoid) {
  var room = humanoid->getRoom();
  // Answering call queue
  if( class.is(humanoid, Staff) && humanoid->isIdle() && ! room ) {
  if( humanoid.humanoid_class == "Handyman" ) {
    if( humanoid->searchForHandymanTask() == true ) {
      return;
    }
    // If staff starts wandering around in Idle mode,
    // he's effectively not in any room and need not to comeback after
    // staff room visit
    } else if( humanoid.world.dispatcher->answerCall(humanoid) ) {
      if( action.must_happen ) {
        humanoid->finishAction();
      }
      return;
    } else {
      // Nowhere to go, start going to the old room if it's still in
      // need of staff.
      var last_room = humanoid.last_room;
      if( last_room && last_room.is_active &&
          last_room->testStaffCriteria(last_room->getMaximumStaffCriteria(), humanoid) ) {
        humanoid->queueAction(last_room->createEnterAction(humanoid));
        humanoid->setDynamicInfoText(_S.dynamic_info.staff.actions.heading_for
            ->format(last_room.room_info.name));
        humanoid->finishAction();
        return;
      }
    }
    humanoid.last_room = null;
  }

  // Just wandering around
  if( humanoid.humanoid_class == "Doctor" || humanoid.humanoid_class == "Nurse" ) {
    if( ! room ) {
      humanoid->setDynamicInfoText(_S.dynamic_info.staff.actions.wandering);
    }
  }
  var x, y = humanoid.world.pathfinder->findIdleTile(humanoid.tile_x,
      humanoid.tile_y, math.random(1, 24));

  if( x == humanoid.tile_x && y == humanoid.tile_y ) {
    // Nowhere to walk to - go idle instead, or go onto the next action
    if( #humanoid.action_queue == 1 ) {
      humanoid->queueAction(IdleAction());
    }
    humanoid->finishAction();
    return;
  }
  if( action.todo_interrupt ) {
    humanoid->finishAction();
    return;
  }
  if( action.count ) {
    if( action.count == 0 ) {
      humanoid->finishAction();
      return;
    } else {
      action.count = action.count - 1;
    }
  } else if( action.loop_callback ) {
    action.loop_callback();
    if( action != humanoid->getCurrentAction() ) {
      return;
    }
  }

  var procrastination;
  if( action.can_idle ) {
    action.can_idle = false;
    procrastination = IdleAction()->setCount(math.random(5, 40))->setMustHappen(action.must_happen);
  } else {
    action.can_idle = true;
    procrastination = WalkAction(x, y)->setMustHappen(action.must_happen);
  }
  humanoid->queueAction(procrastination, 0);
}

return meander_action_start;
