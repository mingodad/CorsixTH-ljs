/* Copyright (c) 2012 Stephen Baker

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

//! Layer which handles the Lua-facing side of loading and playing video.

var TH = require("TH");
var pathsep = package.config->sub(1, 1);

class ("MoviePlayer");

//-@type MoviePlayer
var MoviePlayer = _G["MoviePlayer"];

//! Calculate the position and size for a movie
//!
//! Returns x and y position and width and height for the movie to be displayed
//! based on the native size of the movie and the current screen dimensions
var calculateSize = function(me) {
  // calculate target dimensions
  var x, y, w, h;
  var screen_w, screen_h = me.app.config.width, me.app.config.height;
  var native_w = me.moviePlayer->getNativeWidth();
  var native_h = me.moviePlayer->getNativeHeight();
  if( native_w != 0 && native_h != 0 ) {
    var ar = native_w / native_h;
    if( math.abs((screen_w / screen_h) - ar) < 0.001 ) {
      x, y = 0, 0;
      w, h = screen_w, screen_h;
    } else {
      if( screen_w > screen_h / native_h * native_w ) {
        w = math.floor(screen_h / native_h * native_w);
        h = screen_h;
        x = math.floor((screen_w - w) / 2);
        y = 0;
      } else {
        w = screen_w;
        h = math.floor(screen_w / native_w * native_h);
        x = 0;
        y = math.floor((screen_h - h) / 2);
      }
    }
  } else {
    x, y = 0, 0;
    w, h = screen_w, screen_h;
  }

  return x, y, w, h;
};

var destroyMovie = function(me) {
  me.moviePlayer->unload();
  if( me.opengl_mode_index ) {
    me.app.modes[me.opengl_mode_index] = "opengl";
  }
  if( me.channel >= 0 ) {
    me.audio->releaseChannel(me.channel);
    me.channel = -1;
  }
  if( me.holding_bg_music ) {
    // If possible we want to continue playing music where we were
    me.audio->pauseBackgroundTrack();
  } else {
    me.audio->playRandomBackgroundTrack();
  }
  me.playing = false;
  if( me.callback_on_destroy_movie ) {
    me.callback_on_destroy_movie();
    me.callback_on_destroy_movie = null;
  }
};

function MoviePlayer::MoviePlayer(app, audio, video) {
  this.app = app;
  this.audio = audio;
  this.video = video;
  this.playing = false;
  this.holding_bg_music = false;
  this.channel = -1;
  this.lose_movies = {};
  this.advance_movies = {};
  this.intro_movie = null;
  this.win_movie = null;
  this.can_skip = true;
  this.wait_for_stop = false;
  this.wait_for_over = false;
}

function MoviePlayer::init() {
  this.moviePlayer = TH.moviePlayer();
  this.moviePlayer->setRenderer(this.video);

  //find movies in Anims folder
  var movies = this.app.fs->listFiles("Anims");
  if( movies ) {
    for( _, movie in pairs(movies) ) {
      //lose level movies
      if( movie->upper()->match(pathsep .. "LOSE%d+%.[^" .. pathsep .. "]+$") ) {
        table.insert(this.lose_movies, movie);
      }
      //advance level movies
      var num = movie->upper()->match(pathsep .. "AREA(%d+)V%.[^" .. pathsep .. "]+$");
      if( num != null && tonumber(num, 10) != null ) {
        this.advance_movies[tonumber(num, 10)] = movie;
      }
      //win game movie
      if( movie->upper()->match(pathsep .. "WINGAME%.[^" .. pathsep .. "]+$") ) {
        this.win_movie = movie;
      }
    }
  }

  //find intro
  movies = this.app.fs->listFiles("Intro");
  if( movies ) {
    for( _, movie in pairs(movies) ) {
      if( movie->upper()->match(pathsep .. "INTRO%.SM4$") ) {
        this.intro_movie = movie;
      }
    }
  }
}

function MoviePlayer::playIntro(callback_after_movie) {
  this->playMovie(this.intro_movie, false, true, callback_after_movie);
}

function MoviePlayer::playWinMovie() {
  this->playMovie(this.win_movie, true, true);
}

function MoviePlayer::playAdvanceMovie(level) {
  var filename = this.advance_movies[level];

  if( this.moviePlayer == null || ! this.moviePlayer->getEnabled() ||
      ! this.app.config.movies || filename == null ) {
    return;
  }

  if( this.audio.background_music ) {
    this.holding_bg_music = this.audio->pauseBackgroundTrack();
  } else {

  }
  if( level == 12 ) {
    this.audio->playSound("DICE122M.WAV");
  } else {
    this.audio->playSound("DICEYFIN.WAV");
  }
  this->playMovie(filename, true, false);
}

function MoviePlayer::playLoseMovie() {
  if( #this.lose_movies > 0 ) {
    var filename = this.lose_movies[math.random(#this.lose_movies)];
    this->playMovie(filename, true, true);
  }
}

function MoviePlayer::playMovie(filename, wait_for_stop, can_skip, callback) {
  var success, warning;

  if( this.moviePlayer == null || ! this.moviePlayer->getEnabled() ||
      ! this.app.config.movies || filename == null ) {
    if( callback ) {
      callback();
    }
    return;
  }

  success, warning = this.moviePlayer->load(filename);
  if( warning != null && warning != "" ) {
    var message = "MoviePlayer:playMovie - Warning: " .. warning;
    if( this.app.world ) {
      this.app.world->gameLog(message);
    } else if( this.app.config.debug ) {
      print(message);
    }
  }
  if( ! success ) {
    // Indicates failure to load movie
    if( callback ) {
      callback();
    }
    return;
  }
  // Abort any loading of music
  this.audio.load_music = false;
  if( this.moviePlayer->hasAudioTrack() ) {
    this.channel = this.audio->reserveChannel();
    if( this.audio.background_music ) {
      this.holding_bg_music = this.audio->pauseBackgroundTrack();
    }
  }

  this.video->startFrame();
  this.video->fillBlack();
  this.video->endFrame();

  this.can_skip = can_skip;
  this.wait_for_stop = wait_for_stop;
  this.wait_for_over = true;

  this.callback_on_destroy_movie = callback;

  this.opengl_mode_index = null;
  for( i=1, #this.app.modes ) {
    if( this.app.modes[i] == "opengl" ) {
      this.opengl_mode_index = i;
    }
  }
  if( this.opengl_mode_index ) {
    this.app.modes[this.opengl_mode_index] = "";
  }

  //TODO: Add text e.g. for newspaper headlines
  warning = this.moviePlayer->play(this.channel);
  if( warning != null && warning != "" ) {
    var message = "MoviePlayer:playMovie - Warning: " .. warning;
    if( this.app.world ) {
      this.app.world->gameLog(message);
    } else if( this.app.config.debug ) {
      print(message);
    }
  }
  this.playing = true;
}

//NB: Call after any changes to TH.surface
function MoviePlayer::allocatePictureBuffer() {
  if( this.moviePlayer == null ) { return; }

  this.moviePlayer->allocatePictureBuffer();
}

//NB: Call before any changes to TH.surface
function MoviePlayer::deallocatePictureBuffer() {
  if( this.moviePlayer == null ) { return; }

  this.moviePlayer->deallocatePictureBuffer();
}

function MoviePlayer::onMovieOver() {
  if( this.moviePlayer == null ) { return; }

  this.wait_for_over = false;
  if( ! this.wait_for_stop ) {
    destroyMovie(this);
  }
}

function MoviePlayer::stop() {
  if( this.moviePlayer == null ) { return; }

  if( this.can_skip ) {
    this.moviePlayer->stop();
  }
  this.wait_for_stop = false;
  if( ! this.wait_for_over ) {
    destroyMovie(this);
  }
}

function MoviePlayer::refresh() {
  if( this.moviePlayer == null ) { return; }

  var x, y, w, h = calculateSize(this);
  this.moviePlayer->refresh(x, y, w, h);
}

function MoviePlayer::updateRenderer() {
  if( this.moviePlayer == null ) { return; }

  this.moviePlayer->setRenderer(this.video);
}
