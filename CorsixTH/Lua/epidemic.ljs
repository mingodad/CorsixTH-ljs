/* Copyright (c) 2013 William "sadger" Gatens

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

class ("Epidemic");

//-@type Epidemic
var Epidemic = _G["Epidemic"];

/*Manages the epidemics that occur in hospitals. Generally, any epidemic
logic that happens outside this class will call functions contained here.*/
function Epidemic::Epidemic(hospital, contagious_patient) {
  this.hospital = hospital;
  this.world = this.hospital.world;

  this.infected_patients = {};

  // The contagious disease the epidemic is based around
  this.disease = contagious_patient.disease;

  // Can the epidemic be revealed to the player
  this.ready_to_reveal = false;

  // Is the epidemic revealed to the player?
  this.revealed = false;

  // Various values for the different outcomes - used when result fax is sent
  this.declare_fine = 0;
  this.reputation_hit = 0;
  this.coverup_fine = 0;
  this.compensation = 0;

  // Is the epidemic bad enough to deserve the whole hospital to be evacuated
  this.will_be_evacuated = false;

  // Fax sent when the result of the cover up is revealed to the player
  this.cover_up_result_fax = {};

  // Set if the user choses the cover up option instead of declaring
  this.coverup_in_progress = false;

  //Cover up timer and amount of intervals the timer has
  this.timer = null;
  this.countdown_intervals = 0;

  // Set when we know if the player has passed/failed the epidemic
  // generally used to test if infected patients can still infect others
  this.result_determined = false;

  // Vaccination mode is activated when the icon on the timer
  // is clicked - used to determine what the cursor should look like
  this.vaccination_mode_active = false;

  // For Cheat - Show the contagious icon even before the epidemic is revealed?
  this.cheat_always_show_mood = false;

  // Number of times an infect patient has successfully infected another
  this.total_infections = 0;
  // Number of times any infected patient has tried to infected another - successful or not
  this.attempted_infections = 0;

  var level_config = this.world.map.level_config;
  // How often is the epidemic disease passed on? Represents a percentage
  // spread_factor% of the time a disease is passed on to a suitable target
  this.spread_factor = level_config.gbv.ContagiousSpreadFactor || 25;
  // How many people still infected and not cure causes the player to take a reputation hit as well as a fine
  // has no effect if more than evacuation_minimum - hospital is evacuated anyway
  this.reputation_loss_minimum = level_config.gbv.EpidemicRepLossMinimum || 5;
  // How many people need to still be infected and not cure to cause the
  // inspector to evacuate the hospital
  this.evacuation_minimum = level_config.gbv.EpidemicEvacMinimum || 10;

  // The health inspector who reveals the result of the epidemic
  this.inspector = null;

  this->addContagiousPatient(contagious_patient);
  // Mark all the patients currently in the hospital as passed reception - for compatibility
  this->markPatientsAsPassedReception();
}

/* The epidemic tick - currently the same rate as the hospital's tick but
not necessary dependent on it - could potentially be reduced for performance.*/
function Epidemic::tick() {
  if( ! this.ready_to_reveal ) {
    this->checkIfReadyToReveal();
  }
  if( ! this.result_determined ) {
    this->infectOtherPatients();
  }
  if( this.coverup_in_progress ) {
    if( ! this.result_determined ) {
      this->checkNoInfectedPlayerHasLeft();
      this->markedPatientsCallForVaccination();
      this->showAppropriateAdviceMessages();
    }
    this->tryAnnounceInspector();
  }
  this->checkPatientsForRemoval();
}


/* Adds a new patient to the epidemic who is actively contagious: infected but
  not vaccinated or cured*/
function Epidemic::addContagiousPatient(patient) {
  patient.infected = true;
  patient->updateDynamicInfo();
  this.infected_patients[#this.infected_patients + 1] = patient;
  if( this.coverup_in_progress || this.cheat_always_show_mood ) {
    patient->setMood("epidemy4","activate");
  }
}

/* Goes through all infected patients checking if there are any other patients
 in adjacent squares that can be infected, and if so infects them turning
 them into an infected patient too. */
function Epidemic::infectOtherPatients() {
  /* Can an infected patient infect another patient - taking into account
  spread factor as defined in the configuration. Patients must be both in the
  corridors or in the same room - don't infect through walls.
  @param patient (Patient) already infected patient
  @param other (Patient) target to possibly infect
  @return true if patient can infect other, false otherwise (boolean) */
  var function canInfectOther(patient, other) {
    // Patient is not infectious.
    if( patient.cured || patient.vaccinated ) { return false; }

    // 'other' is already infected or is going home.
    if( other.infected || other.cured || other.vaccinated ) { return false; }
    if( other.is_emergency ) { return false; } // Don't interact with emergencies.

    // If the other patient has a different disease OR the other patient's
    // disease cannot be changed.
    if( patient.disease != other.disease &&
        (! other.disease.contagious || other.diagnosed) ) { return false; }

    if( other.attempted_to_infect ) { return false; }

    // Only infect if both are in the same room.
    return patient->getRoom() == other->getRoom();
  }

  var function infect_other(infected_patient, patient) {
    if( infected_patient.disease == patient.disease ) {
      this->addContagiousPatient(patient);
      this.total_infections = this.total_infections + 1;
    } else {
      patient->changeDisease(infected_patient.disease);
      this->addContagiousPatient(patient);
      this.total_infections = this.total_infections + 1;
    }
  }

  // Scale the chance of spreading the disease infecting spread_factor%
  // of patients results in too large an epidemic typically so infect
  // spread_factor/spread_scale_factor patients.
  // This scale factor is purely for balance purposes, the larger the
  // value the less spreading the epidemics will be, all relative to spread_factor.
  // Must be > 0.
  var spread_scale_factor = 200;

  // Go through all infected patients making the check if they can infect
  // and making any patient they can infect contagious too.
  var entity_map = this.world.entity_map;
  if( entity_map ) {
    for( _, infected_patient in ipairs(this.infected_patients) ) {
      var adjacent_patients =
      entity_map->getPatientsInAdjacentSquares(infected_patient.tile_x, infected_patient.tile_y);
      for( _, patient in ipairs(adjacent_patients) ) {
        if( canInfectOther(infected_patient, patient) ) {
          patient.attempted_to_infect = true;
          this.attempted_infections = this.attempted_infections + 1;
          if( (this.total_infections / this.attempted_infections) <
              (this.spread_factor / spread_scale_factor) ) {
            infect_other(infected_patient, patient);
          }
        }
      }
    }
  }

}

/* The epidemic is ready to be revealed to the player if any infected patient
 is fully diagnosed. N.B. because multiple epidemics are queued to become
 the "active" one, being ready to reveal does NOT guarantee an epidemic
 WILL be revealed to the player and may even terminate before they are even
 aware it existed. */
function Epidemic::checkIfReadyToReveal() {
  for( _, infected_patient in ipairs(this.infected_patients) ) {
    if( infected_patient.diagnosed ) {
      this.ready_to_reveal = true;
      break;
    }
  }
}

/* Show the player the have an epidemic - send a fax
 This happens when the epidemic is chosen to the be
 the "active" epidemic out of all the queued ones.*/
function Epidemic::revealEpidemic() {
  assert(this.ready_to_reveal);
  this.revealed = true;
  this->sendInitialFax();
  this->announceStartOfEpidemic();
}

/* Plays the announcement for the start of the epidemic */
function Epidemic::announceStartOfEpidemic() {
  var announcements = {"EPID001.wav", "EPID002.wav", "EPID003.wav", "EPID004.wav"};
  if( this.hospital->isPlayerHospital() ) {
    this.world.ui->playAnnouncement(announcements[math.random(1, #announcements)]);
  }
}


/* Plays the announcement for the end of the epidemic */
function Epidemic::announceEndOfEpidemic() {
  var announcements = {"EPID005.wav", "EPID006.wav", "EPID007.wav", "EPID008.wav"};
  if( this.hospital->isPlayerHospital() ) {
    this.world.ui->playAnnouncement(announcements[math.random(1, #announcements)]);
  }
}

/* Checks for conditions that could end the epidemic earlier than
 the length of the timer. If an infected patient leaves the
 hospital it's discovered instantly and will result in a fail.*/
function Epidemic::checkNoInfectedPlayerHasLeft() {
  if( this.result_determined ) { return; }

  // Check whether a patient has left.
  for( _, infected_patient in ipairs(this.infected_patients) ) {
    var px, py = infected_patient.tile_x, infected_patient.tile_y;
    // If leaving and no longer in the hospital.
    if( infected_patient.going_home && ! infected_patient.cured &&
        px && py && ! this.hospital->isInHospital(px,py) ) {
      // Patient escaped from the hospital, discovery is inevitable.
      this.result_determined = true;
      if( ! this.inspector ) {
        this->spawnInspector();
      }
      this->finishCoverUp();
      return;
    }
  }
}

/*Remove any patients which were already on their way out or died before the
epidemic was started to be fair on the players so they don't instantly fail.
Additionally if any patients die during an epidemic we also remove them,
otherwise a player may never win the epidemic in such a case.*/
function Epidemic::checkPatientsForRemoval() {
  for( i, infected_patient in ipairs(this.infected_patients) ) {
    if( (! this.coverup_in_progress && infected_patient.going_home) ||
        infected_patient.dead ) {
      table.remove(this.infected_patients,i);
    }
  }
}

/* Toggle the vaccination mode changes how the cursor interacts with
 the hospital. Toggled by pressing the button on the watch
(@see UIWatch:UIWatch) */
function Epidemic::toggleVaccinationMode() {
  this.vaccination_mode_active = ! this.vaccination_mode_active;
  var cursor = this.vaccination_mode_active && "epidemic_hover" || "default";
  this.world.ui->setCursor(this.world.ui.app.gfx->loadMainCursor(cursor));
}

/* Show a patient is able to be vaccinated, this is shown to the player by
 changing the icon, once a player has been marked for vaccination they may
 possibly become a vaccination candidate. Marking is done by clicking
 the player and can only happen during a cover up. */
function Epidemic::markForVaccination(patient) {
  if( patient.infected && ! patient.vaccinated &&
      ! patient.marked_for_vaccination ) {
    patient.marked_for_vaccination = true;
    patient->setMood("epidemy4","deactivate");
    patient->setMood("epidemy2","activate");
  }
}



/* Counts the number of patients that have been infected that are still
-- infected
-- @return infected_count (Integer) the number of patients still infected.*/
function Epidemic::countInfectedPatients() {
  var infected_count = 0;
  for( _, patient in pairs(this.infected_patients) ) {
    if( patient.infected && ! patient.cured ) {
      ++infected_count    ;
    }
  }
  return infected_count;
}

/* Sends the initial fax to the player when the epidemic is revealed.*/
function Epidemic::sendInitialFax() {
  var num_infected = this->countInfectedPatients();
  //Save it in a global variable so we can apply the fine in the declare function
  this.declare_fine = this->calculateInfectedFine(num_infected);

  var message = {
    {text = _S.fax.epidemic.disease_name->format(this.disease.name)},
    {text = _S.fax.epidemic.declare_explanation_fine->format(this.declare_fine)},
    {text = _S.fax.epidemic.cover_up_explanation_1},
    {text = _S.fax.epidemic.cover_up_explanation_2},
    choices = {
      {text = _S.fax.epidemic.choices.declare, choice = "declare_epidemic"},
      {text = _S.fax.epidemic.choices.cover_up, choice = "cover_up_epidemic"},
    },
  };
  this.world.ui.bottom_panel->queueMessage("epidemy", message, null, 24*20,2);
}

/* Calculate the fine for having a given number of infected patients
--Used to determine the initial declaration fine as the cover up fine.
--@param infected_count (Integer) number of patients still infected
--@return fine (Integer) the fine amount */
function Epidemic::calculateInfectedFine(infected_count) {
  var level_config = this.world.map.level_config;
  var fine_per_infected = level_config.gbv.EpidemicFine || 2000;
  return math.max(2000, infected_count * fine_per_infected);
}

/* Gets the amount of reputation to add/remove from the player
 based on a given fine. Reputation gain/loss isn't specified
 in the configs so we use a percentage of the fine as a base
 value with extra being gained/lost for specific circumstances.
 @param fine_amount (Integer) amount the player will be fined
 @return reputation hit (Integer) reputation to be deducted relative to fine*/
var function getBaseReputationFromFine(fine_amount) {
  return math.round(fine_amount / 100);
}

/* When the player chooses to declare the epidemic instead of trying
 to cover up it from the initial faxes - ends the epidemic immediately
 after applying fine.*/
function Epidemic::resolveDeclaration() {
  this.result_determined = true;
  this->clearAllInfectedPatients();

  //No fax for declaration just apply fines and rep hit
  this.hospital->spendMoney(this.declare_fine, _S.transactions.epidemy_fine);
  var reputation_hit = getBaseReputationFromFine(this.declare_fine);
  this.hospital.reputation = this.hospital.reputation - reputation_hit;
  this.hospital.epidemic = null;
}

/* Remove all infected patients by vaccinating from the hospital and clear
 any epidemic-specific icons from their heads.*/
function Epidemic::clearAllInfectedPatients() {
  for( _, infected_patient in ipairs(this.infected_patients) ) {
    // Remove any vaccination calls still open
    infected_patient->removeVaccinationCandidateStatus();
    this.world.dispatcher->dropFromQueue(infected_patient);
    infected_patient.vaccinated = true;
    infected_patient->setMood("epidemy1","deactivate");
    infected_patient->setMood("epidemy2","deactivate");
    infected_patient->setMood("epidemy3","deactivate");
    infected_patient->setMood("epidemy4","deactivate");
  }
}


/* When the player chooses to begin the cover up over declaring from the
 initial fax (@see sendInitialFax) */
function Epidemic::startCoverUp() {
  this.timer = UIWatch(this.world.ui, "epidemic");
  this.countdown_intervals = this.timer.open_timer;
  this.world.ui->addWindow(this.timer);
  this.coverup_in_progress = true;
  //Set the mood icon for all infected patients
  for( _, infected_patient in ipairs(this.infected_patients) ) {
    infected_patient->updateDynamicInfo();
    infected_patient->setMood("epidemy4","activate");
  }
}

/* Ends the cover up of the epidemic with the result to be applied
later (@see applyOutcome) */
function Epidemic::finishCoverUp() {
  this.result_determined = true;

  this.timer->close();

  // Turn vaccination mode off
  if( this.vaccination_mode_active ) {
    this->toggleVaccinationMode();
  }

  var still_infected = this->countInfectedPatients();
  this->determineFaxAndFines(still_infected);
  this->clearAllInfectedPatients();
}

/* Calculates the contents of the fax and the appropriate fines based on the
result of a cover up, results are stored globally to the class to be applied later.
 @param still_infected (Integer) the number of patients still infected*/
function Epidemic::determineFaxAndFines(still_infected) {

  // Losing text
  var fail_text_1 = _S.fax.epidemic_result.failed.part_1_name->format(this.disease.name);
  var fail_text_2 = _S.fax.epidemic_result.failed.part_2;
  var close_option = {text = _S.fax.epidemic_result.close_text, choice = "close"};

  // Losing fine (if epidemic is "lost")
  this.coverup_fine = this->calculateInfectedFine(still_infected);

  if( still_infected == 0 ) {
    // Compensation fine (if epidemic is "won")
    var level_config = this.world.map.level_config;
    var compensation_low_value = level_config.gbv.EpidemicCompLo || 1000;
    var compensation_high_value = level_config.gbv.EpidemicCompHi || 5000;
    this.compensation = math.random(compensation_low_value,compensation_high_value);

    this.cover_up_result_fax = {
      {text = _S.fax.epidemic_result.succeeded.part_1_name->format(this.disease.name)},
      {text = _S.fax.epidemic_result.succeeded.part_2},
      {text = _S.fax.epidemic_result.compensation_amount->format(this.compensation)},
      choices = {close_option}
    };
  } else if( still_infected < this.reputation_loss_minimum && still_infected < this.evacuation_minimum ) {
    this.cover_up_result_fax = {
      {text = fail_text_1},
      {text = fail_text_2},
      {text = _S.fax.epidemic_result.fine_amount->format(this.coverup_fine)},
      choices = {close_option}
    };
  } else if( still_infected >= this.reputation_loss_minimum && still_infected < this.evacuation_minimum ) {
    this.cover_up_result_fax = {
      {text = fail_text_1},
      {text = fail_text_2},
      {text = _S.fax.epidemic_result.rep_loss_fine_amount->format(this.coverup_fine)},
      choices = {close_option}
    };
  } else {
    this.will_be_evacuated = true;
    this.cover_up_result_fax = {
      {text = fail_text_1},
      {text = fail_text_2},
      {text = _S.fax.epidemic_result.hospital_evacuated},
      choices = {close_option}
    };
  }
}

/* Apply the compensation or fines where appropriate to the player as
determined when the cover up was completed (@see finishCoverUp) */
function Epidemic::applyOutcome() {
  // If there is no compensation to apply the epidemic has been failed
  if( this.compensation == 0 ) {
    if( this.will_be_evacuated ) {
      this.reputation_hit = math.round(this.hospital.reputation * (1/3));
      this->evacuateHospital();
    } else {
      this.reputation_hit = getBaseReputationFromFine(this.coverup_fine);
    }
    // Apply fine and reputation hit
    this.hospital->spendMoney(this.coverup_fine,_S.transactions.epidemy_coverup_fine);
    this.hospital.reputation =  this.hospital.reputation - this.reputation_hit;
  } else {
    this.hospital->receiveMoney(this.compensation, _S.transactions.compensation);
  }
  // Finally send the fax confirming the outcome
  this->sendResultFax();
  //Remove epidemic from hospital so another epidemic may be assigned
  this.hospital.epidemic = null;
}

/* For compatibility. Mark all the current patients who are in the hospital
--but not in the reception queues as being "passed reception" used to decide
--who is evacuated @see evacuateHospital. For new patients they are marked
--as they leave the reception desks.*/
function Epidemic::markPatientsAsPassedReception() {
  var queuing_patients = {};
  for( _, desk in ipairs(this.hospital->findReceptionDesks()) ) {
    for( _, patient in ipairs(desk.queue) ) {
      // Use patient as map key to speed up lookup
      queuing_patients[patient] = true;
    }
  }

  for( _, patient in ipairs(this.hospital.patients) ) {
    // Patient is not queuing for reception
    var px, py = patient.tile_x, patient.tile_y;
    if( px && py && this.hospital->isInHospital(px,py) && queuing_patients[patient] == null ) {
      patient.has_passed_reception = true;
    }
  }
}

/* Forces evacuation of the hospital - it makes ALL patients leave and storm out. */
function Epidemic::evacuateHospital() {
  for( _, patient in ipairs(this.hospital.patients) ) {
    var patient_room = patient->getRoom();
    if( patient_room ) {
      patient_room->makeHumanoidDressIfNecessaryAndThenLeave(patient);
    }
    if( patient.has_passed_reception ) {
      patient->clearDynamicInfo();
      patient->setDynamicInfo('text', {_S.dynamic_info.patient.actions.epidemic_sent_home});
      patient->setMood("exit","activate");
      var spawn_point = this.world.spawn_points[math.random(1, #this.world.spawn_points)];
      patient->setNextAction(SpawnAction("despawn", spawn_point)->setMustHappen(true));
    }
  }
}

/* Send the results of the cover up to the player - will be a
success/compensation or fail/fines + reputation hit*/
function Epidemic::sendResultFax() {
  this.world.ui.bottom_panel->queueMessage("report", this.cover_up_result_fax, null, 24*20, 1);
  this->announceEndOfEpidemic();
}

/* Spawns the inspector who will walk to the reception desk. */
function Epidemic::spawnInspector() {
  this.world.ui.adviser->say(_A.information.epidemic_health_inspector);
  var inspector = this.world->newEntity("Inspector", 2);
  this.inspector = inspector;
  inspector->setType("Inspector");

  var spawn_point = this.world.spawn_points[math.random(1, #this.world.spawn_points)];
  inspector->setNextAction(SpawnAction("spawn", spawn_point));
  inspector->setHospital(this.hospital);
  inspector->queueAction(SeekReceptionAction());
}

/* Is the patient "still" either idle queuing or sitting on a bench
  Typically this is used to determine if a patient can be vaccinated
  @param patient (Patient) the patient we wish to determine if they are static.*/
var function is_static(patient) {
  var action = patient->getCurrentAction();
  return action.name == "queue" || action.name == "idle" ||
      (action.name == "use_object" && action.object.object_type.id == "bench");
}

/* During a cover up every patient marked for vaccination (clicked)
 creates a call to be vaccinated by a nurse - patients must also be static
 (seated or standing queuing) */
function Epidemic::markedPatientsCallForVaccination() {
  for( _, infected_patient in ipairs(this.infected_patients) ) {
    if( infected_patient.marked_for_vaccination &&
        ! infected_patient.reserved_for && is_static(infected_patient) ) {
      this.world.dispatcher->callNurseForVaccination(infected_patient);
    }
  }
}

/* In response to a vaccination call by the vaccination candidate
  (@see makeVaccinationCandidateCallForNurse) perform the vaccination
  actions or deal with call if unable to vaccinate.
  @param patient (Patient) the patient who make the original call
  @param nurse (Nurse) the nurse attempting to vaccinate the patient*/
function Epidemic::createVaccinationActions(patient,nurse) {
  patient.reserved_for = nurse;
  // Check square is reachable first
  var x,y = this->getBestVaccinationTile(nurse,patient);
  // If unreachable patient keep the call open for now
  if( ! x || ! y ) {
    nurse->setCallCompleted();
    patient.reserved_for = null;
    nurse->setNextAction(MeanderAction());
    patient->removeVaccinationCandidateStatus();
  } else {
    // Give selected patient the cursor with the arrow once they are next
    // in line for vaccination i.e. call assigned
    patient->giveVaccinationCandidateStatus();
    var level_config = this.world.map.level_config;
    var fee = level_config.gbv.VacCost || 50;
    nurse->setNextAction(WalkAction(x, y)->setMustHappen(true)->enableWalkingToVaccinate());
    nurse->queueAction(VaccinateAction(patient, fee));
  }
}


/*Find the best tile to stand on to vaccinate a patient
 @param nurse (Nurse) the nurse performing the vaccination
 @param patient (Patient) the patient to be vaccinated
 @return best_x,best_y (Integer,nil) the best tiles to vaccinate from.*/
function Epidemic::getBestVaccinationTile(nurse, patient) {
  var px, py = patient.tile_x, patient.tile_y;
  // If the patient is using a bench the best tile to use is
  // directly in front of them
  var action = patient->getCurrentAction();
  if( action.name == "use_object" ) {
    var object_in_use = action.object;
    if( object_in_use.object_type.id == "bench" ) {
      var direction = object_in_use.direction;
      if( direction == "north" ) {
        return px, py - 1;

      } else if( direction == "south" ) {
        return px, py + 1;

      } else if( direction == "east" ) {
        return px + 1, py;

      } else if( direction == "west" ) {
        return px - 1, py;
      }
    }
  }

  // General usage tile finder, used in the other cases
  // when the patient isn't sitting on a bench

  // Location of the nurse
  var nx, ny = nurse.tile_x, nurse.tile_y;

  var best_x, best_y = null;
  var shortest_distance = null;
  var free_tiles = this.world.entity_map->getAdjacentFreeTiles(px, py);

  for( _, coord in ipairs(free_tiles) ) {
    var x = coord['x'];
    var y = coord['y'];

    var distance = this.world->getPathDistance(nx, ny, x, y);
    // If the tile is reachable for the nurse
    if( distance ) {
      // If the tile is closer then it's a better choice
      if( ! shortest_distance || distance < shortest_distance ) {
        shortest_distance = distance;
        best_x, best_y = x, y;
      }
    }
  }
  return best_x, best_y;
}

/*When the nurse is interrupted unreserve the patient and unassign the call.
  @param nurse (Nurse) the nurse whose vaccination actions we are interrupting*/
function Epidemic::interruptVaccinationActions(nurse) {
  assert(nurse.humanoid_class == "Nurse");
  var call = nurse.on_call;
  if( call ) {
    var patient = call.object;
    if( patient && patient.vaccination_candidate && ! patient.vaccinated ) {
      patient->removeVaccinationCandidateStatus();
    }
    call.object.reserved_for = null;
    call.assigned = null;
    nurse.on_call = null;
  }
}

/* Make the advisor show appropriate messages under certain
  conditions of the epidemic.*/
function Epidemic::showAppropriateAdviceMessages() {
  if( this.countdown_intervals ) {
    if( ! this.has_said_hurry_up && this->countInfectedPatients() > 0 &&
        // If only 1/4 of the countdown_intervals remaining on the timer
        this.timer.open_timer == math.floor(this.countdown_intervals * 1 / 4) ) {
      this.world.ui.adviser->say(_A.epidemic.hurry_up);
      this.has_said_hurry_up = true;

    // Wait until at least 1/4 of the countdown_intervals has expired before giving
    // this warning so it doesn't happen straight away
    } else if( this.timer.open_timer <= math.floor(this.countdown_intervals * 3 / 4) &&
        ! this.has_said_serious && this->countInfectedPatients() > 10 ) {
      this.world.ui.adviser->say(_A.epidemic.serious_warning);
      this.has_said_serious = true;
    }
  }
}

/* Are no infected patients, cured or still infected in the hospital?
@returns true if so, false otherwise. (boolean) */
function Epidemic::hasNoInfectedPatients() {
  return #this.infected_patients == 0;
}

function Epidemic::tryAnnounceInspector() {
  var inspector = this.inspector;
  if( inspector && ! inspector.has_been_announced &&
      this.hospital->isInHospital(inspector.tile_x, inspector.tile_y) ) {
    inspector->announce();
    inspector.has_been_announced = true;
  }
}

function Epidemic::afterLoad(old, new) {
  if( old < 106 ) {
    this.level_config = null;
  }
}
