/* Copyright (c) 2009 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

var object = {};
object.id = "entrance_right_door";
object.thob = 59;
object.name = _S.object.entrance_right;
object.tooltip = _S.tooltip.objects.entrance_right;
object.class = "EntranceDoor";
object.ticks = false;
object.idle_animations = {
  north = 308,
  west = 312,
};
object.supports_creation_for_map = true;

class ("EntranceDoor") (Object);

//-@type EntranceDoor
var EntranceDoor = _G["EntranceDoor"];

function EntranceDoor::EntranceDoor(world, object_type, x, y, direction, etc) {
  this.is_master = object_type == object;
  this->Object(world, object_type, x, y, direction, etc);
  this.occupant_count = 0;
  this.is_open = false;
  // We need to link the master to the slave but we don't know in which order they will be initialized
  if( this.is_master ) { // The master will check for an adjacent slave
    var slave_type = "entrance_left_door";
    this.slave = world->getObject(x - 1, y, slave_type) || world->getObject(x, y - 1, slave_type) || null;

    if( this.slave ) {
      this.slave.master = this;
    }
  } else { // The slave will check for an adjacent master
    var master_type = "entrance_right_door";
    this.master = world->getObject(x + 1, y, master_type) || world->getObject(x, y + 1, master_type) || null;

    if( this.master ) {
      this.master.slave = this;
    }
  }
  var anim = this.object_type.idle_animations[this.direction];
  var anims = this.world.anims;
  this.anim_frames = {anims->getFirstFrame(anim)};
  while( true ) {
    var nxt = anims->getNextFrame(this.anim_frames[#this.anim_frames]);
    if( nxt == this.anim_frames[1] ) {
      break;
    }
    this.anim_frames[#this.anim_frames + 1] = nxt;
  }
  this.frame_index = 1;
}

function EntranceDoor::onOccupantChange(count_delta) {
  this.occupant_count = this.occupant_count + count_delta;
  var is_open = this.occupant_count > 0;
  if( is_open != this.is_open ) {
    this->playSound("eledoor2.wav");
    this.is_open = is_open;
    this.ticks = true;
  }
  if( this.slave ) {
    this.slave->onOccupantChange(count_delta);
  }
}

var additional_walkable_tiles = {
  north = {
    {0, -1},
  },
  west = {
    {-1, 0},
  },
};

var additional_walkable_tiles_master = {
  north = {
    {0, -1}, {1, 0}, {1, -1},
  },
  west = {
    {-1, 0}, {0, 1}, {-1, 1},
  },
};

function EntranceDoor::setTile(x, y) {
  var offsets = this.is_master && additional_walkable_tiles_master || additional_walkable_tiles;
  offsets = offsets[this.direction];
  var flag_name = this.direction == "north" && "tallNorth" || "tallWest";

  if( this.tile_x ) {
    if( this.is_master ) {
      // NB: only the tile of the door itself and the one additional tile from additional_walkable_tiles notify the door
      this.world->notifyObjectOfOccupants(this.tile_x, this.tile_y, null);
      for( _, offset in ipairs(additional_walkable_tiles[this.direction]) ) {
        this.world->notifyObjectOfOccupants(this.tile_x + offset[1], this.tile_y + offset[2], null);
      }
    }
    this.world.map->setCellFlags(this.tile_x, this.tile_y, {[flag_name] = false, buildable = true, doNotIdle = false});
    for( _, offset in ipairs(offsets) ) {
      this.world.map->setCellFlags(this.tile_x + offset[1], this.tile_y + offset[2], {buildable = true, doNotIdle = false});
    }
  }
  Object.setTile(this, x, y);
  if( x ) {
    if( this.is_master ) {
      this.world->notifyObjectOfOccupants(x, y, this);
      for( _, offset in ipairs(additional_walkable_tiles[this.direction]) ) {
        this.world->notifyObjectOfOccupants(x + offset[1], y + offset[2], this);
      }
    }
    this.world.map->setCellFlags(x, y, {[flag_name] = true, buildable = false, doNotIdle = true});
    for( _, offset in ipairs(offsets) ) {
      this.world.map->setCellFlags(x + offset[1], y + offset[2], {buildable = false, doNotIdle = true});
    }
  }
  this.world.map.th->updateShadows();
}

function EntranceDoor::getWalkableTiles() {
  var result = {};
  var offsets = this.is_master && additional_walkable_tiles_master || additional_walkable_tiles;
  result[1] = {this.tile_x, this.tile_y};
  for( _, offset in ipairs(offsets[this.direction]) ) {
    result[#result + 1] = {this.tile_x + offset[1], this.tile_y + offset[2]};
  }
  return result;
}

function EntranceDoor::tick() {
  var target_index = this.is_open && #this.anim_frames || 1;
  if( this.frame_index == target_index ) {
    this.ticks = false;
  } else if( this.frame_index < target_index ) {
    this.frame_index = this.frame_index + 1;
  } else if( this.frame_index > target_index ) {
    this.frame_index = this.frame_index - 1;
  }
  this.th->setFrame(this.anim_frames[this.frame_index]);
}

return object;
