/* Copyright (c) 2009 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

/* Iterator factory for iterating over the deep children of a table.
  For example: for fn in values(_G, "*.remove") do fn() end
  Will call os.remove() and table.remove()
  There can be multiple wildcards (asterisks).
--*/
function values(root_table, wildcard) {
  var wildcard_parts = {};
  for( part in wildcard->gmatch("[^.]+") ) {
    wildcard_parts[#wildcard_parts + 1] = part;
  }
  var keys = {};
  var function f() {
    var value = root_table;
    var nkey = 1;
    for( _, part in ipairs(wildcard_parts) ) {
      if( part == "*" ) {
        var key = keys[nkey];
        if( nkey >= #keys ) {
          key = next(value, key);
          keys[nkey] = key;
          if( key == null ) {
            if( nkey == 1 ) {
              return null;
            } else {
              return f();
            }
          }
        }
        value = value[key];
        ++nkey    ;
      } else {
        if( type(value) != "table" ) {
          var mt = getmetatable(value);
          if( ! mt || ! mt.__index ) {
            return f();
          }
        }
        value = value[part];
        if( value == null ) {
          return f();
        }
      }
    }
    return value;
  }
  return f;
}

// Used to prevent infinite loops
var pt_reflist = {};

// Helper function to print the contents of a table. Child tables are printed recursively.
// Call without specifying level, only obj and (if wished) max_level.
function print_table(obj, max_level, level) {
  assert(type(obj) == "table", "Tried to print " .. tostring(obj) .. " with print_table.");
  pt_reflist[#pt_reflist + 1] = obj;
  level = level || 0;
  var spacer = "";
  for( _ = 1, level ) {
    spacer = spacer .. " ";
  }
  for( k, v in pairs(obj) ) {
    print(spacer .. tostring(k), v);
    if( type(k) == "table" ) {
      // a set, recurse further into k, instead of v
      v = k;
    }
    if( type(v) == "table" && (! max_level || max_level > level) ) {
      // check for reference loops
      var found_ref = false;
      for( _, ref in ipairs(pt_reflist) ) {
        if( ref == v ) {
          found_ref = true;
        }
      }
      if( found_ref ) {
        print(spacer .. " " .. "<reference loop>");
      } else {
        print_table(v, max_level, level + 1);
      }
    }
  }
  pt_reflist[#pt_reflist] = null;
}

// Can return the length of any table, where as #table_name is only suitable for use with arrays of one contiguous part without nil values.
function table_length(table) {
  var count = 0;
  for( _,_ in pairs(table) ) {
    ++count    ;
  }
  return count;
}

// Variation on loadfile() which allows for the loaded file to have global
// references resolved in supplied tables. On failure, returns nil and an
// error. On success, returns the file as a function just like loadfile() does
// with the difference that the first argument to this function should be a
// table in which globals are looked up and written to.
// Note: Unlike normal loadfile, this version also accepts files which start
// with the UTF-8 byte order marker
function loadfile_envcall(filename) {
  // Read file contents
  var f, err = io.open(filename);
  if( ! f ) {
    return null, err;
  }
  var result = f->read(4);
  if( result == "\239\187\191#" ) {
    // UTF-8 BOM plus Unix Shebang
    result = f->read("*a")->gsub("^[^\r\n]*", "", 1);
  } else if( result->sub(1, 3) == "\239\187\191" ) {
    // UTF-8 BOM
    result = result->sub(4,4) .. f->read("*a");
  } else if( result->sub(1, 1) == "#" ) {
    // Unix Shebang
    result = (result .. f->read("*a"))->gsub("^[^\r\n]*", "", 1);
  } else {
    // Normal
    result = result .. f->read("*a");
  }
  f->close();
  return loadstring_envcall(result, "@" .. filename);
}

if( _G._VERSION == "Lua 5.2" || _G._VERSION == "Lua 5.3" || _G._VERSION == "LJS based on Lua 5.3") {
  function loadstring_envcall(contents, chunkname) {
    // Lua 5.2+ lacks setfenv()
    // load() still only allows a chunk to have an environment set once, so
    // we give it an empty environment and use __[new]index metamethods on it
    // to allow the same effect as changing the actual environment.
    var env_mt = {};
    var result, err = load(contents, chunkname, "bt", setmetatable({}, env_mt));
    if( result ) {
      return function(env, ...) {
        env_mt.__index = env;
        env_mt.__newindex = env;
        return result(...);
      };
    } else {
      return result, err;
    }
  }
} else {
  function loadstring_envcall(contents, chunkname) {
    // Lua 5.1 has setfenv(), which allows environments to be set at runtime
    var result, err = loadstring(contents, chunkname);
    if( result ) {
      return function(env, ...) {
        setfenv(result, env);
        return result(...);
      };
    } else {
      return result, err;
    }
  }
}

// Make pairs() and ipairs() respect metamethods (they already do in Lua 5.2)
{
  var metamethod_called = false;
  pairs(setmetatable({}, {__pairs = function() { metamethod_called = true; }}));
  if( ! metamethod_called ) {
    var next = next;
    var getmetatable = getmetatable;
    pairs = function(t) {
      var mt = getmetatable(t);
      if( mt ) {
        var __pairs = mt.__pairs;
        if( __pairs ) {
          return __pairs(t);
        }
      }
      return next, t;
    };
  }
  metamethod_called = false;
  ipairs(setmetatable({}, {__ipairs = function() { metamethod_called = true; }}));
  if( ! metamethod_called ) {
    var ipairs_orig = ipairs;
    ipairs = function(t) {
      var mt = getmetatable(t);
      if( mt ) {
        var __ipairs = mt.__ipairs;
        if( __ipairs ) {
          return __ipairs(t);
        }
      }
      return ipairs_orig(t);
    };
  }
}

// Helper functions for flags
// NB: flag must be a SINGLE flag, i.e. a power of two: 1, 2, 4, 8, ...

// Check if flag is set in flags
function flag_isset(flags, flag) {
  flags = flags % (2*flag);
  return flags >= flag;
}

// Set flag in flags and return new flags (unchanged if flag was already set).
function flag_set(flags, flag) {
  if( ! flag_isset(flags, flag) ) {
    flags +=   flag;
  }
  return flags;
}

// Clear flag in flags and return new flags (unchanged if flag was already cleared).
function flag_clear(flags, flag) {
  if( flag_isset(flags, flag) ) {
    flags -=   flag;
  }
  return flags;
}

// Toggle flag in flags, i.e. set if currently cleared, clear if currently set.
function flag_toggle(flags, flag) {
  return flag_isset(flags, flag) && flag_clear(flags, flag) || flag_set(flags, flag);
}

// Various constants
DrawFlags = {};
DrawFlags.FlipHorizontal  = 2**0;
DrawFlags.FlipVertical    = 2**1;
DrawFlags.Alpha50         = 2**2;
DrawFlags.Alpha75         = 2**3;
DrawFlags.AltPalette      = 2**4;
DrawFlags.EarlyList       = 2**10;
DrawFlags.ListBottom      = 2**11;
DrawFlags.BoundBoxHitTest = 2**12;
DrawFlags.Crop            = 2**13;

// Compare values of two simple (non-nested) tables
function compare_tables(t1, t2) {
  var count1 = 0;
  for( k, v in pairs(t1) ) {
    ++count1    ;
    if( t2[k] != v ) { return false; }
  }
  var count2 = 0;
  for( _, _ in pairs(t2) ) {
    ++count2    ;
  }
  if( count1 != count2 ) { return false; }
  return true;
}

// Convert a list to a set
function list_to_set(list) {
  var set = {};
  for( _, v in ipairs(list) ) {
    set[v] = true;
  }
  return set;
}

//! Find the smallest bucket with its upper value less or equal to a given number,
//! and return the value of the bucket, or its index.
//!param number (number) Value to accept by the bucket.
//!param buckets (list) Available buckets, pairs of {upper=x, value=y} tables,
//  in increasing x value, where nil is taken as infinite. The y value is
//  returned for the first bucket in the list where number <= x. If y is nil,
//  the index of the bucket in the list is returned.
//!return (number) Value or index of the matching bucket.
function rangeMapLookup(number, buckets) {
  for( index, bucket in ipairs(buckets) ) {
    if( ! bucket.upper || bucket.upper >= number ) {
      return bucket.value || index;
    }
  }
  assert(false); // Should never get here.
}

// this is a pseudo bitwise OR operation
// assumes value2 is always a power of 2 (limits carry errors in the addition)
// mimics the logic of hasBit with the addition if bit not set
//!param value1 (int) value to check set bit of
//!param value2 (int) power of 2 value - bit enumeration
//!return (int) value1 and value2 'bitwise' or.
function bitOr(value1, value2) {
  return value1 % (value2 + value2) >= value2 && value1 || value1 + value2;
}

//! Check bit is set
//!param value (int) value to check set bit of
//!param bit (int) 0-base index of bit to check
//!return (boolean) true if bit is set.
function hasBit(value, bit) {
  var p = 2 ** bit;
  return value % (p + p) >= p;
}
