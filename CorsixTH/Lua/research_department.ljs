/* Copyright (c) 2011 Edvin "Lego3" Linge

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

/* Notes about research speed.
Original game times at 20 % in all categories with a medium doctor at level 3:
Slicer discovered in about 120 days. (10000 points)
Pump improved in about 60 days. (30000 points * 20 % as first improvement)
Invisibility improved in about 90 days. (10000 points)
Note that the original requires a nurse and a pharmacy before drugs
get improved. On the other hand it appears that the research is
stored for future use anyway.
--*/

//! Manages all things related to research for one hospital.
class ("ResearchDepartment");

//-@type ResearchDepartment
var ResearchDepartment = _G["ResearchDepartment"];

function ResearchDepartment::ResearchDepartment(hospital) {
  this.hospital = hospital;
  this.world = hospital.world;

  // This list contains a lot of information.
  // Progress of object discovery, object improvement, drug improvement
  // dito costs and room build costs.
  this.research_progress = {};
  this->initResearch();
}

// Initialize research for the level.
function ResearchDepartment::initResearch() {
  var hospital = this.hospital;
  var cfg_objects = this.world.map.level_config.objects;
  var cure, diagnosis, improve, drug;
  // Initialize object research
  for( _, object in ipairs(TheApp.objects) ) {
    if( cfg_objects[object.thob] && cfg_objects[object.thob].AvailableForLevel == 1 &&
        object.research_category ) {
      this.research_progress[object] = {
        points = 0,
        start_strength = cfg_objects[object.thob].StartStrength,
        cost = ! this.world.free_build_mode && cfg_objects[object.thob].StartCost || 0,
        discovered = cfg_objects[object.thob].StartAvail == 1,
        strength_imp = 0,
        cost_imp = 0,
      };
      if( cfg_objects[object.thob].StartAvail == 0 ) {
        if( object.research_category == "cure" ) {
          cure = object;
        } else if( object.research_category == "diagnosis" ) {
          diagnosis = object;
        }
      }
      // TODO: Do we want some kind of specific order here, e.g.
      // the same as in the original?
      if( object.default_strength && cfg_objects[object.thob].StartAvail == 1 ) {
        improve = object;
      }
    }
  }
  // Now add drug research
  for( _, disease in pairs(hospital.disease_casebook) ) {
    if( disease.drug ) {
      this.research_progress[disease] = {
        points = 0,
        effect_imp = 1,
        cost_imp = 1,
      };
      if( disease.discovered ) {
        drug = disease;
      }
    }
  }
  // Add a dummy to specialisation. The difference is that while it still says
  // 20 % in that area it doesn't cost anything to the player
  var drain = {dummy = true};
  this.research_progress[drain] = {points = 0};
  this.drain = drain;

  var policy = {
    cure = {frac = cure && 20 || 0, current = cure},
    diagnosis = {frac = diagnosis && 20 || 0, current = diagnosis},
    drugs = {frac = 20, points = 0, current = drug && drug || drain},
    improvements = {frac = improve && 20 || 0, points = 0, current = improve},
    specialisation = {frac = 20, points = 0, current = drain},
  };
  var sum = 0;
  for( _, cat in pairs(policy) ) {
    sum = sum + cat.frac;
  }
  if( sum == 20 ) {
    // No research to be done
    policy.specialisation.frac = 0;
    policy.global = 0;
  } else {
    // If some category is already done, put the free points in another one.
    if( sum < 100 ) {
      for( _, tab in pairs(policy) ) {
        if( tab.frac > 0 ) {
          tab.frac = tab.frac + 100 - sum;
          sum = 100;
          break;
        }
      }
    }
    policy.global = sum;
  }
  this.research_policy = policy;

  if( ! hospital.research_dep_built ) {
    hospital.research_dep_built = false;
  }
}

function ResearchDepartment::checkAutomaticDiscovery(month) {
  for( object, progress in pairs(this.research_progress) ) {
    // Only check objects
    if( object.default_strength ) {
      var avail_at = this.world.map.level_config.objects[object.thob].WhenAvail;
      if( ! progress.discovered && avail_at != 0 && month >= avail_at ) {
        this->discoverObject(object, true);
      }
    }
  }
}

//! Find a disease (if it exists) on which research can be concentrated and concentrate on it.
function ResearchDepartment::setResearchConcentration() {
  var casebook = this.hospital.disease_casebook;
  if( this.research_policy.specialisation.current != this.drain ) {
    return;
  }
  for( _, disease in pairs(casebook) ) {
    if( disease.discovered && this.hospital->canConcentrateResearch(disease.disease.id) ) {
      this->concentrateResearch(disease.disease.id);
      return;
    }
  }
}

//! Function that redistributes research points from a finished category to
//! all the other categories.
function ResearchDepartment::redistributeResearchPoints() {
  var sum, all_finished = 0, true;
  var policy = {"cure", "diagnosis", "drugs", "improvements", "specialisation"};
  for( _, research_category in ipairs(policy) ) {
    sum = sum + this.research_policy[research_category].frac;
    if( this.research_policy[research_category].current && this.research_policy[research_category].current != this.drain ) {
      all_finished = false;
    }
  }
  if( ! all_finished ) {
    if( sum == 0 ) {
      var num_cat = 0;
      for( _, categ  in ipairs(policy) ) {
        if( this.research_policy[categ].current ) {
          ++num_cat    ;
        }
      }
      for( _, categ  in ipairs(policy) ) {
        if( this.research_policy[categ].current ) {
          this.research_policy[categ].frac = math.floor(this.research_policy.global / num_cat);
        }
      }
      sum = math.floor(this.research_policy.global / num_cat) * num_cat;
      for( _, categ  in ipairs(policy) ) {
        if( this.research_policy[categ].current ) {
          if( sum == this.research_policy.global ) {
            break;
          }
          this.research_policy[categ].frac = this.research_policy[categ].frac + 1;
          ++sum    ;
        }
      }
    } else {
      var new_sum, max_value, max_category = 0, 0, "";
      for( _, categ  in ipairs(policy) ) {
        var research_cat = this.research_policy[categ];
        if( research_cat.frac > max_value ) {
          max_value = research_cat.frac;
          max_category = categ;
        }
        research_cat.frac = math.floor(this.research_policy.global * research_cat.frac / sum);
        new_sum = new_sum + research_cat.frac;
      }
      //if there are still some points left redistribute them to the research category with the maximum points
      if( new_sum < this.research_policy.global ) {
        var frac = this.research_policy[max_category].frac + this.research_policy.global - new_sum;
        this.research_policy[max_category].frac = frac;
      }
    }
  } else {
    this.research_policy.global = 0;
    this.research_policy.specialisation.current = null;
  }
}

/*! Finds out what to research next in the given research area.
!param category The research area. One of cure, diagnosis, drugs,
improvements and specialisation
--*/
function ResearchDepartment::nextResearch(category) {
  var current = this.research_policy[category].current;
  // First make sure that the current research target actually has been discovered.
  // Otherwise don't do anything.
  if( ! (current.drug || this.research_progress[current].discovered) ) {
    return;
  }
  var hospital = this.hospital;
  this.research_policy[category].current = null;
  var found_one = false;
  if( category == "drugs" ) {
    var worst_effect = 100;
    for( _, disease in pairs(hospital.disease_casebook) ) {
      if( disease.cure_effectiveness < worst_effect ) {
        found_one = true;
        if( disease.discovered ) {
          this.research_policy[category].current = disease;
          worst_effect = disease.cure_effectiveness;
        }
      }
    }
  } else if( category == "improvements" ) {
    // Find the object which needs improvements the most.
    var max_strength = this.world.map.level_config.gbv.MaxObjectStrength;
    var min_strength = max_strength;
    for( object, progress in pairs(this.research_progress) ) {
      if( object.default_strength ) {
        // Don't improve those that already have the max strength
        if( progress.start_strength < max_strength ) {
          if( progress.discovered && progress.start_strength < min_strength ) {
            this.research_policy[category].current = object;
            min_strength = progress.start_strength;
          } else {
            found_one = true;
          }
        }
      }
    }
  } else {
    for( object, progress in pairs(this.research_progress) ) {
      if( object.research_category == category && ! progress.discovered ) {
        this.research_policy[category].current = object;
      }
    }
  }
  if( found_one && ! this.research_policy[category].current ) {
    // There is a drug or machine which needs improving, but it
    // has not been discovered yet.
    this.research_policy[category].current = this.drain;
    this.research_progress[this.drain] = {points = 0};
  }
  if( ! this.research_policy[category].current ) {
    var cat = this.research_policy[category];
    // Nothing more to research
    cat.current = null;
    cat.frac = 0;
    this->redistributeResearchPoints();

    if( this.hospital == this.world.ui.hospital ) {
      this.world.ui.adviser->say(_A.research.drug_fully_researched
      ->format(_S.research.categories[category]));
    }
    // Notify any research window
    var window = this.world.ui->getWindow(UIResearch);
    if( window ) {
      window->updateCategories();
    }
  }
}

/* Returns how many points are required to discover something
about the given thing.
It may be an object or a drug, being improved or researched.
If this thing cannot be processed nil is returned.
!param thing The thing to check, either a drug or an object.
--*/
function ResearchDepartment::getResearchRequired(thing) {
  var required;
  var level_config = this.world.map.level_config;
  var expert = level_config.expertise;

  if( thing.thob ) {
    // An object
    required = level_config.objects[thing.thob].RschReqd;
    if( ! required ) {
      // It didn't know, so use the fallback instead.
      if( ! thing.research_fallback ) {
        // This object is not researchable!
        print(("Warning: %s has been defined as ")->format(thing.id) ..
              "researchable, but no requirements to fulfil could be found.");
      } else {
        required = expert[thing.research_fallback].RschReqd;
      }
    }
    // Actually want to know how much to improve?
    var research_info = this.research_progress[thing];
    if( research_info.discovered ) {
      var improve_percent = level_config.gbv.RschImproveCostPercent;
      var increment = level_config.gbv.RschImproveIncrementPercent;
      improve_percent = improve_percent + increment * research_info.cost_imp;
      required = required * improve_percent / 100;
    }
  } else if( thing.drug ) {
    // A drug
    required = expert[thing.disease.expertise_id].RschReqd;
  }
  return required;
}

/* Add some more research points to research progress. If
autopsy_room is specified points are not used. Instead research
progresses according to the level config for autopsies.
Otherwise they will be divided according to the research policy
into the different research areas.
!param points (integer) The total amount of points (before applying
any level specific divisors to add to research.
!param autopsy_room (string) If a specific room should get points following
an autopsy, then this is the id of that room.
*/
function ResearchDepartment::addResearchPoints(points, autopsy_room) {

  var level_config = this.world.map.level_config;

  //-------------------- An autopsy has been done ---------------------------
  if( autopsy_room ) {
    // Do something only if the room is among those not yet discovered.
    for( room, _ in pairs(this.hospital.undiscovered_rooms) ) {
      if( room.id == autopsy_room ) {
        // Find an object within this room that needs research points.
        for( object, _ in pairs(room.objects_needed) ) {
          var research = this.research_progress[TheApp.objects[object]];
          if( research && ! research.discovered ) {
            var required = this->getResearchRequired(TheApp.objects[object]);
            var advance = required * level_config.gbv.AutopsyRschPercent / 100;
            research.points = research.points + advance;

            // Maybe we now have enough to discover the object?
            if( research.points > required ) {
              this->discoverObject(TheApp.objects[object]);
            }
            break;
          }
        }
      }
    }
  } else {
    //------------------------- General research ------------------------------
    // Divide the points into the different areas. If global is not at 100 %
    // the total amount is lowered, but then cost is also reduced.

    // Fetch the level research divisor.
    var divisor = level_config.gbv.ResearchPointsDivisor || 5;

    points = math.ceil(points * this.research_policy.global / (100 * divisor));

    // Divide the points into the different categories and check if
    // it is time to discover something
    var areas = this.research_policy;
    for( _, info in pairs(areas) ) {
      // Don't touch the value "global".
      if( type(info) == "table" ) {
        // Some categories may be finished
        if( info.current ) {
          // Add new points to this category's current focus.
          var research_info = this.research_progress[info.current];
          var stored = research_info.points;
          // Add just a little randomness
          research_info.points = stored + math.n_random(1, 0.2) * points * info.frac / 100;
          var required = this->getResearchRequired(info.current);
          if( required && required < research_info.points ) {
            research_info.points = 0;
            // On the specialisation pass any of these categories are eligible.
            //-------------- Discovering objects ----------------------
            if( info.current.thob && ! research_info.discovered ) {
              this->discoverObject(info.current);
            //--------------- Improving drugs -------------------------
            } else if( info.current.drug ) {
              this->improveDrug(info.current);
            //------------- Improving machines ------------------------
            } else if( info.current.thob ) {
              this->improveMachine(info.current);
            }
          }
        }
      }
    }
  }
}

/* Called when it is time to improve a drug's strength or cost.
!param drug The drug to improve, table taken from world.available_diseases
--*/
function ResearchDepartment::improveDrug(drug) {
  var research_info = this.research_progress[drug];
  var disease = this.hospital.disease_casebook[drug.disease.id];

  // Improving effectiveness and cost should alternate
  if( research_info.effect_imp > research_info.cost_imp ) {
    // Time to improve cost
    disease.drug_cost = disease.drug_cost - 10;
    research_info.cost_imp = research_info.cost_imp + 1;
    if( disease.cure_effectiveness == 100 ) {
      // Did the researchers concentrate on this drug?
      if( this.research_policy.specialisation.current == drug ) {
        this.research_policy.specialisation.current = this.drain;
        this->setResearchConcentration();
      }
    }
    if( this.research_policy.drugs.current == drug ) {
      this->nextResearch("drugs");
    }
  } else {
    // Time to improve effectiveness
    var improve_rate = this.world.map.level_config.gbv.DrugImproveRate;
    disease.cure_effectiveness = math.min(100, disease.cure_effectiveness + improve_rate);
    research_info.effect_imp = research_info.effect_imp + 1;
  }
  if( this.hospital == this.world.ui.hospital ) {
    if( drug.disease.id == "the_squits" ) {
      this.world.ui.adviser->say(_A.research.drug_improved_1
      ->format(drug.disease.name));
    } else {
      this.world.ui.adviser->say(_A.research.drug_improved
      ->format(drug.disease.name));
    }
  }
}

/* Called when it is time to improve a machine's strength or cost.
!param machine The machine to improve, table taken from TheApp.objects
--*/
function ResearchDepartment::improveMachine(machine) {
  var research_info = this.research_progress[machine];
  // Improving strength and cost should alternate
  if( research_info.strength_imp > research_info.cost_imp ) {
    // Time to improve cost
    // TODO: This is now 12.5%, based on observations by
    // Mark L. Maybe add a new config option for this?
    var decrease = math.round(research_info.cost*0.125/10)*10;
    research_info.cost = research_info.cost - decrease;
    // Now find rooms where this object is used and lower the build_cost for them.
    for( _, room in ipairs(this.world.available_rooms) ) {
      for( obj, no in pairs(room.objects_needed) ) {
        if( TheApp.objects[obj] == machine ) {
          var progress = this.research_progress[room];
          progress.build_cost = progress.build_cost - decrease * no;
          // Each room only defines the same object once, so break
          // from the inner loop.
          break;
        }
      }
    }
    research_info.cost_imp = research_info.cost_imp + 1;
    var max = this.world.map.level_config.gbv.MaxObjectStrength;
    if( research_info.start_strength >= max ) {
      if( this.research_policy.specialisation.current == machine ) {
        this.research_policy.specialisation.current = this.drain;
        this->setResearchConcentration();
      }
    }
    // No matter what, check if another machine needs improvements more urgently.
    if( this.research_policy.improvements.current == machine ) {
      this->nextResearch("improvements");
    }
  } else {
    // Time to improve strength
    var improve_rate = this.world.map.level_config.gbv.ResearchIncrement;
    research_info.start_strength = research_info.start_strength
      + improve_rate;
    research_info.strength_imp = research_info.strength_imp + 1;
  }
  // Tell the player that something has been improved
  if( this.hospital == this.world.ui.hospital ) {
    this.world.ui.adviser->say(_A.research.machine_improved
    ->format(machine.name));
  }
}

/* Called when it is time to discoer an object. This may currently only
happen from research.
!param object The object to discover, a table from TheApp.objects
!param automatic If true the discovery was not made by
the player's research department.
--*/
function ResearchDepartment::discoverObject(object, automatic) {
  this.research_progress[object].discovered = true;

  // Go through all rooms to see if another one can be made available.
  for( room, _ in pairs(this.hospital.undiscovered_rooms) ) {
    var discovery = true;
    for( needed, _ in pairs(room.objects_needed) ) {
      var obj = this.research_progress[TheApp.objects[needed]];
      if( obj && ! obj.discovered ) {
        discovery = false;
        break;
      }
    }
    if( discovery ) {
      this.hospital.discovered_rooms[room] = true;
      this.hospital.undiscovered_rooms[room] = null;
      if( this.hospital == this.world.ui.hospital ) {
        if( automatic ) {
          this.world.ui.adviser->say(_A.research.new_available->format(object.name));
        } else {
          this.world.ui.adviser->say(_A.research.new_machine_researched->format(object.name));
        }
      }
      // It may now be possible to continue researching machine improvements
      var current_improvement_research = this.research_policy.improvements.current;
      var max_strength = this.world.map.level_config.gbv.MaxObjectStrength;
      var min_strength = max_strength;
      // If we're not researching any improvement right now, and the newest discovery was
      // a machine that requires an improvement, switch the current policy.
      if( (! current_improvement_research || current_improvement_research.dummy) ) {
        for( research_object, progress in pairs(this.research_progress) ) {
          if( research_object.default_strength ) {
            // Don't improve those that already have the max strength
            if( progress.start_strength < max_strength ) {
              if( progress.discovered && progress.start_strength < min_strength ) {
                this.research_policy["improvements"].current = research_object;
                min_strength = progress.start_strength;
              }
            }
          }
        }
      }
    }
  }
  // Now find out what to do next.
  this->nextResearch(object.research_category);
}

/* Called when it is time to discover a disease (i.e. after diagnosis in the GP)
!param disease The disease to discover, a table from world.available_diseases
--*/
function ResearchDepartment::discoverDisease(disease) {
  // Generate a message about the discovery
  var message = {
    {text = _S.fax.disease_discovered.discovered_name->format(disease.name)},
    {text = disease.cause, offset = 12},
    {text = disease.symptoms, offset = 12},
    {text = disease.cure, offset = 12},
    choices = {
      {text = _S.fax.disease_discovered.close_text, choice = "close"},
    },
  };
  this.world.ui.bottom_panel->queueMessage("disease", message, null, 25*24, 1);
  this.hospital.disease_casebook[disease.id].discovered = true;
  var index = #this.hospital.discovered_diseases + 1;
  this.hospital.discovered_diseases[index] = disease.id;
  // If the drug casebook is open, update it.
  var window = this.world.ui->getWindow(UICasebook);
  if( window ) {
    window->updateDiseaseList();
  }

  // It may now be possible to continue researching drug improvements
  var casebook_disease = this.hospital.disease_casebook[disease.id];
  var current_drug_research = this.research_policy.drugs.current;
  // If we're not researching any drug right now, and the newest discovery was
  // a disease that requires a drug, switch the current policy.
  if( (! current_drug_research || current_drug_research.dummy) &&
      casebook_disease.drug ) {
    this.research_policy.drugs.current = casebook_disease;
  }
  this->setResearchConcentration();
}

/*! It also costs to research.
TODO: This is now just $3 per day and doctor (if at 100%),
what should it be?
--*/
function ResearchDepartment::researchCost() {
  var acc_cost = this.hospital.acc_research_cost;
  var fraction = 0;
  for( _, tab in pairs(this.research_policy) ) {
    // Don't pay for categories where nothing is really researched at the moment.
    if( type(tab) == "table" ) {
      if( tab.current && ! tab.current.dummy ) {
        fraction = fraction + tab.frac;
      }
    }
  }
  // Find out how many doctors are currently doing research
  var doctors = 0;
  for( _, room in pairs(this.world.rooms) ) {
    if( room.room_info.id == "research" ) {
      for( _, _ in pairs(room.staff_member_set) ) {
        ++doctors    ;
      }
    }
  }
  acc_cost = acc_cost + math.ceil(3 * doctors * fraction/100);
  this.hospital.acc_research_cost = acc_cost;
}

/* Concentrates research on a given disease.
Concentrating on a machine will improve it if it's been discovered
and help researching it otherwise.
Concentrating on a drug will improve the drug provided the pharmacy
is discovered. Otherwise it will research the cabinet.
TODO: Make it possible to concentrate on psychological diseases
if the psychiatry hasn't been discovered.
!param disease_id The id of the disease to focus on.
--*/
function ResearchDepartment::concentrateResearch(disease_id) {
  var book_entry = this.hospital.disease_casebook[disease_id];
  // First set flags so that the casebook shows the right thing.
  if( book_entry.concentrate_research ) {
    // Already concentrated, we actually just want to cancel that.
    book_entry.concentrate_research = null;
    // Make specialisation a dummy again
    this.research_policy.specialisation.current = this.drain;
  } else {
    for( key, disease in pairs(this.hospital.disease_casebook) ) {
      // Set flag on previously concentrated disease
      if( disease.concentrate_research ) {
        this.hospital.disease_casebook[key].concentrate_research = null;
      }
    }
    // Concentrate on the new one
    book_entry.concentrate_research = true;

    // Now, find the object related to the disease.
    // TODO: This assumes it is the last room in the treatment_rooms list
    // which is the one to concentrate on.
    var room;
    if( book_entry.disease.treatment_rooms ) {
      var index = #book_entry.disease.treatment_rooms;
      room = book_entry.disease.treatment_rooms[index];
    } else {
      // This is a pseudo-disease, it should represent a piece of diagnosis
      // machinery that we can improve via research.
      assert(book_entry.disease.id->sub(1, 5) == "diag_", "Trying to " ..
      "concentrate research on disease without treatment rooms that " ..
      "isn't a diagnosis machine pseudodisease");
      room = book_entry.disease.id->sub(6);
    }
    var object;
    // TODO: Can these loops be improved upon?
    for( obj, _ in pairs(this.world.available_rooms[room].objects_needed) ) {
      for( research, _ in pairs(this.research_progress) ) {
        if( research.id == obj && research.thob ) {
          object = research;
          break;
        }
      }
    }
    assert(object, "An object that was about to be improved or discovered"..
    "could not be found");
    if( book_entry.drug && this.research_progress[object].discovered ) {
      // A drug should be improved
      this.research_policy.specialisation.current = book_entry;
    } else {
      // No matter if it's a drug or some machine -
      // we want to discover (including the cabinet) or improve it.
      this.research_policy.specialisation.current = object;
    }
  }
}

function ResearchDepartment::afterLoad(old, new) {
  if( old < 106 ) {
    this.level_config = null;
  }
}
