/* Copyright (c) 2009 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

//! An `Entity` which occupies a single tile and is capable of moving around the map.
class ("Humanoid") (Entity);

//-@type Humanoid
var Humanoid = _G["Humanoid"];

var walk_animations = permanent("humanoid_walk_animations")({});
var door_animations = permanent("humanoid_door_animations")({});
var die_animations = permanent("humanoid_die_animations")({});
var falling_animations = permanent("humanoid_falling_animations")({});
var on_ground_animations = permanent("humanoid_on_ground_animations")({});
var get_up_animations = permanent("humanoid_get_up_animations")({});
var shake_fist_animations = permanent("humanoid_shake_fist_animations")({});
var pee_animations = permanent("humanoid_pee_animations")({});
var vomit_animations = permanent("humanoid_vomit_animations")({});
var tap_foot_animations = permanent("humanoid_tap_foot_animations")({});
var yawn_animations = permanent("humanoid_yawn_animations")({});
var check_watch_animations = permanent("humanoid_check_watch_animations")({});

var mood_icons = permanent("humanoid_mood_icons")({});

var function anims(name, walkN, walkE, idleN, idleE, doorL, doorE, knockN, knockE, swingL, swingE) {
  walk_animations[name] = {
    walk_east = walkE,
    walk_north = walkN,
    idle_east = idleE,
    idle_north = idleN,
  };
  door_animations[name] = {
    entering = doorE,
    leaving = doorL,
    entering_swing = swingE,
    leaving_swing = swingL,
    knock_north = knockN,
    knock_east = knockE,
  };
}

//-
// @param name The name of the patient class these death animations are for.
// @param fall The patient's fall animation.
// @param rise The transparent getting up animation for heaven death patients who have been lying dead on the ground.
// @param rise_hell The opaque getting up animation for hell death patients who have been lying dead on the ground.
// @param wings The heaven death animation in which the patient's wings appear.
// @param hands The heaven death animation which occurs after the wings animation when the patient puts their hands together.
// @param fly The heaven death animation which makes patients fly upwards to heaven.
// @param extra Dead untreated patients who don't transform before falling over use this animation afterwards to transform into a standard male/female.
//-
var function die_anims(name, fall, rise, rise_hell, wings, hands, fly, extra) {
  die_animations[name] = {
    fall_east = fall,
    rise_east = rise,
    rise_hell_east = rise_hell,
    wings_east = wings,
    hands_east = hands,
    fly_east = fly,
    extra_east = extra,
  };
}
var function falling_anim(name, fallingAnim) {
  falling_animations[name] = fallingAnim;
}
var function on_ground_anim(name, on_groundAnim) {
  on_ground_animations[name] = on_groundAnim;
}
var function get_up_anim(name, get_upAnim) {
  get_up_animations[name] = get_upAnim;
}
var function shake_fist_anim(name, shake_fistAnim) {
  shake_fist_animations[name] = shake_fistAnim;
}
var function vomit_anim(name, vomitAnim) {
  vomit_animations[name] = vomitAnim;
}
var function yawn_anim(name, yawnAnim) {
  yawn_animations[name] = yawnAnim;
}
var function tap_foot_anim(name, tap_footAnim) {
  tap_foot_animations[name] = tap_footAnim;
}
var function check_watch_anim(name, check_watchAnim) {
  check_watch_animations[name] = check_watchAnim;
}
var function pee_anim(name, peeAnim) {
  pee_animations[name] = peeAnim;
}
var function moods(name, iconNo, prio, alwaysOn) {
  mood_icons[name] = {icon = iconNo, priority = prio, on_hover = alwaysOn};
}

//   | Walk animations           |
//   | Name                      |WalkN|WalkE|IdleN|IdleE|DoorL|DoorE|KnockN|KnockE|SwingL|SwingE| Notes
//---+---------------------------+-----+-----+-----+-----+-----+-----+------+------+-------+---------+
anims("Standard Male Patient",       16,   18,   24,   26,  182,  184,   286,   288,  2040,  2042); // 0-16, ABC
anims("Gowned Male Patient",        406,  408,  414,  416);                           // 0-10
anims("Stripped Male Patient",      818,  820,  826,  828);                           // 0-16
anims("Stripped Male Patient 2",      818,  820,  826,  828);                           // 0-16
anims("Stripped Male Patient 3",      818,  820,  826,  828);
anims("Alternate Male Patient",    2704, 2706, 2712, 2714, 2748, 2750,  2764,  2766); // 0-10, ABC
anims("Slack Male Patient",        1484, 1486, 1492, 1494, 1524, 1526,  2764,  1494); // 0-14, ABC
anims("Slack Female Patient",         0,    2,    8,   10,  258,  260,   294,   296,  2864,  2866); // 0-16, ABC
anims("Transparent Male Patient",  1064, 1066, 1072, 1074, 1104, 1106,  1120,  1074); // 0-16, ABC
anims("Standard Female Patient",      0,    2,    8,   10,  258,  260,   294,   296,  2864,  2866); // 0-16, ABC
anims("Gowned Female Patient",     2876, 2878, 2884, 2886);                           // 0-8
anims("Stripped Female Patient",    834,  836,  842,  844);                           // 0-16
anims("Stripped Female Patient 2",    834,  836,  842,  844);                           // 0-16
anims("Stripped Female Patient 3",    834,  836,  842,  844);
anims("Transparent Female Patient",3012, 3014, 3020, 3022, 3052, 3054,  3068,  3070); // 0-8, ABC
anims("Chewbacca Patient",          858,  860,  866,  868, 3526, 3528,  4150,  4152);
anims("Elvis Patient",              978,  980,  986,  988, 3634, 3636,  4868,  4870);
anims("Invisible Patient",         1642, 1644, 1840, 1842, 1796, 1798,  4192,  4194);
anims("Alien Male Patient",        3598, 3600, 3606, 3608,  182,  184,   286,   288, 3626,  3628); // remember, no "normal"-doors animation
anims("Alien Female Patient",      3598, 3600, 3606, 3608,  258,  260,   294,   296, 3626,  3628); // identical to male; however death animations differ
anims("Doctor",                      32,   34,   40,   42,  670,  672,   null,   null, 4750,  4752);
anims("Surgeon",                   2288, 2290, 2296, 2298);
anims("Nurse",                     1206, 1208, 1650, 1652, 3264, 3266,   null,   null, 3272,  3274);
anims("Handyman",                  1858, 1860, 1866, 1868, 3286, 3288,   null,   null, 3518,  3520);
anims("Receptionist",              3668, 3670, 3676, 3678); // Could do with door animations
anims("VIP",                        266,  268,  274,  276);
anims("Inspector",                  266,  268,  274,  276);
anims("Grim Reaper",                994,  996, 1002, 1004);

//  | Die Animations                 |
//  | Name                           |FallE|RiseE|RiseE Hell|WingsE|HandsE|FlyE|ExtraE| Notes 2248
//--+--------------------------------+-----+-----+----------+-----+------+-----+------
die_anims("Standard Male Patient",     1682, 2434,       384, 2438,  2446, 2450); // Always facing east or south
die_anims("Alternate Male Patient",    1682, 2434,      3404, 2438,  2446, 2450);
die_anims("Slack Male Patient",        1682, 2434,       384, 2438,  2446, 2450);
// TODO: Where is slack male transformation? Uses alternate male for now.
die_anims("Transparent Male Patient",  4412, 2434,       384, 2438,  2446, 2450,  4416); // Extra = Transformation
die_anims("Standard Female Patient",   3116, 3208,       580, 3212,  3216, 3220);
die_anims("Slack Female Patient",      4288, 3208,       580, 3212,  3216, 3220);
die_anims("Transparent Female Patient",4420, 3208,       580, 3212,  3216, 3220,  4428); // Extra = Transformation
die_anims("Chewbacca Patient",         4182, 2434,       384, 2438,  2446, 2450,  1682); // Only males die... (1222 is the Female)
die_anims("Elvis Patient",              974, 2434,       384, 2438,  2446, 2450,  4186); // Extra = Transformation
die_anims("Invisible Patient",         4200, 2434,       384, 2438,  2446, 2450);
die_anims("Alien Male Patient",        4882, 2434,       384, 2438,  2446, 2450);
die_anims("Alien Female Patient",      4886, 3208,       580, 3212,  3216, 3220);

// The next fours sets belong together, but are done like this so we can use them on there own
// I also had difficulty in keeping them together, as the patient needs to on the floor
// for the duration of the earth quake before getting back up
// Shaking of fist could perhaps be used when waiting too long
//  | Falling Animations                   |
//  | Name                                 |Anim| Notes
//--+--------------------------------+-----+-----+-----+-----+------+------+
falling_anim("Standard Male Patient",     1682);
falling_anim("Standard Female Patient",   3116);

//  | On_ground Animations                   |
//  | Name                                 |Anim| Notes
//--+--------------------------------+-----+-----+-----+-----+------+------+
on_ground_anim("Standard Male Patient",     1258);
on_ground_anim("Standard Female Patient",   3116);

//  | Get_up Animations                   |
//  | Name                                 |Anim| Notes
//--+--------------------------------+-----+-----+-----+-----+------+------+
get_up_anim("Standard Male Patient",     384);
get_up_anim("Standard Female Patient",   580);

//  | Shake_fist Animations                   |
//  | Name                                 |Anim| Notes
//--+--------------------------------+-----+-----+-----+-----+------+------+
shake_fist_anim("Standard Male Patient",     392); // bloaty head patients lose head!


//  | Vomit Animations                  |
//  | Name                              |Anim | Notes
//--+-----------------------------------+-----+
vomit_anim("Elvis Patient",              1034);
vomit_anim("Standard Female Patient",    3184);
vomit_anim("Standard Male Patient",      2056);
vomit_anim("Alternate Male Patient",     4476);
vomit_anim("Chewbacca Patient",          4138);
vomit_anim("Invisible Patient",          4204);
vomit_anim("Slack Male Patient",         4324);
vomit_anim("Transparent Female Patient", 4452);
vomit_anim("Transparent Male Patient",   4384);

//  | Yawn Animations                  |
//  | Name                              |Anim | Notes
//--+-----------------------------------+-----+
yawn_anim("Standard Female Patient",    4864);
yawn_anim("Standard Male Patient",      368);
//yawn_anim("Alternate Male Patient",     2968)  is this one the same as standard male?
// whichever one is used for male, if he wears a hat it will lift when he yawns

//  | Foot tapping Animations                  |
//  | Name                              |Anim | Notes
//--+-----------------------------------+-----+
tap_foot_anim("Standard Female Patient",    4464);
tap_foot_anim("Standard Male Patient",      2960);
tap_foot_anim("Alternate Male Patient",     360);

//  | Check watch Animations                  |
//  | Name                              |Anim | Notes
//--+-----------------------------------+-----+
check_watch_anim("Standard Female Patient",    4468);
check_watch_anim("Standard Male Patient",      2964);
check_watch_anim("Alternate Male Patient",     364);
check_watch_anim("Slack Male Patient",         4060);

//  | pee Animations                  |
//  | Name                              |Anim | Notes
//--+-----------------------------------+-----+
pee_anim("Elvis Patient",              970);
pee_anim("Standard Female Patient",    4744);
pee_anim("Slack Female Patient",       4744);
pee_anim("Standard Male Patient",      2244);
pee_anim("Alternate Male Patient",     4472);
pee_anim("Slack Male Patient",         4328);
pee_anim("Chewbacca Patient",          4178);
pee_anim("Invisible Patient",          4208);
pee_anim("Transparent Female Patient", 4852);
pee_anim("Transparent Male Patient",   4848);

//   | Available Moods |
//   | Name            |Icon|Priority|Show Always| Notes
//---+-----------------+----+--------+-----------+
moods("reflexion",      4020,       5);            // Some icons should only appear when the player
moods("cantfind",       4050,       3);            // hover over the humanoid
moods("idea1",          2464,      10);            // Higher priority is more important.
moods("idea2",          2466,      11);
moods("idea3",          4044,      12);
moods("staff_wait",     4054,      20);
moods("tired",          3990,      30);
moods("pay_rise",       4576,      40);
moods("thirsty",        3986,       4);
moods("cold",           3994,       0,       true); // These have no priority since
moods("hot",            3988,       0,       true); // they will be shown when hovering
moods("queue",          4568,      70);             // no matter what other priorities.
moods("poo",            3996,       5);
moods("sad_money",      4018,      50);
moods("patient_wait",   5006,      40);
moods("epidemy1",       4566,      55);
moods("epidemy2",       4570,      55);
moods("epidemy3",       4572,      55);
moods("epidemy4",       4574,      55);
moods("sad1",           3992,      40);
moods("sad2",           4000,      41);
moods("sad3",           4002,      42);
moods("sad4",           4004,      43);
moods("sad5",           4006,      44);
moods("sad6",           4008,      45);
moods("sad7",           4578,      46);
moods("dead",           4046,      60);
moods("cured",          4048,      60);
moods("emergency",      3914,      50);
moods("exit",           4052,      60);

var anim_mgr = TheApp.animation_manager;
for( anim in values(door_animations, "*.entering") ) {
  anim_mgr->setMarker(anim, 0, {-1, 0}, 3, {-1, 0}, 9, {0, 0});
}
for( anim in values(door_animations, "*.leaving") ) {
  anim_mgr->setMarker(anim, 1, {0, 0.4}, 4, {0, 0.4}, 7, {0, 0}, 11, {0, -1});
}
for( anim in values(door_animations, "*.entering_swing") ) {
  anim_mgr->setMarker(anim, 0, {-1, 0}, 8, {0, 0});
}
for( anim in values(door_animations, "*.leaving_swing") ) {
  anim_mgr->setMarker(anim, 0, {0.1, 0}, 9, {0, -1});
}

//!param ... Arguments for base class constructor.
function Humanoid::Humanoid(...) {
  this->Entity(...);
  this.action_queue = {};
  this.last_move_direction = "east";
  this.attributes = {};
  this.attributes["warmth"] = 0.29;
  this.attributes["happiness"] = 1;
  // patients should be not be fully well when they come to your hospital and if it is staff there is no harm done!
  this.attributes["health"] = math.random(80, 100) /100;
  this.active_moods = {};
  this.should_knock_on_doors = false;

  this.speed = "normal";

  this.build_callbacks  = {/*set*/};
  this.remove_callbacks = {/*set*/};
}

// Save game compatibility
function Humanoid::afterLoad(old, new) {
  if( old < 38 ) {
    // should existing patients be updated and be getting really ill?
    // adds the new variables for health icons
    this.attributes["health"] = math.random(60, 100) /100;
  }
  // make sure female slack patients have the correct animation
  if( old < 42 ) {
    if( this.humanoid_class == "Slack Female Patient" ) {
      this.die_anims = die_animations["Slack Female Patient"];
    }
  }
  if( old < 77 ) {
    this.has_vomitted = 0;
  }
  if( old < 49 ) {
    this.has_fallen = 1;
  }
  if( old < 61 ) {
    // callbacks changed
    this.build_callbacks = {};
    this.remove_callbacks = {};
    if( this.build_callback ) {
      this.build_callbacks[this.build_callback] = true;
      this.build_callback = null;
    }
    if( this.toilet_callback ) {
      this.build_callbacks[this.toilet_callback] = true;
      this.toilet_callback = null;
    }
  }
  if( old < 83 && this.humanoid_class == "Chewbacca Patient" ) {
    this.die_anims.extra_east = 1682;
  }

  for( _, action in pairs(this.action_queue) ) {
    // Sometimes actions not actual instances of HumanoidAction
    HumanoidAction.afterLoad(action, old, new);
  }
  Entity.afterLoad(this, old, new);
}

// Function which is called when the user clicks on the `Humanoid`.
//!param ui (GameUI) The UI which the user in question is using.
//!param button (string) One of: "left", "middle", "right".
function Humanoid::onClick(ui, button) {
  if( TheApp.config.debug ) {
    this->dump();
  }
}

function Humanoid::getRoom() {
  return this.in_room || Entity.getRoom(this);
}

function Humanoid::dump() {
  print("-----------------------------------");
  print("Clicked on: ");
  print(this->tostring());
  print("-----------------------------------");
}

// Called when the humanoid is about to be removed from the world.
function Humanoid::onDestroy() {
  var x, y = this.tile_x, this.tile_y;
  if( x && y ) {
    var notify_object = this.world->getObjectToNotifyOfOccupants(x, y);
    if( notify_object ) {
      notify_object->onOccupantChange(-1);
    }
  }
  // Make absolutely sure there are no callbacks left on the humanoid.
  this->unregisterCallbacks();
  return Entity.onDestroy(this);
}

// Set the `Hospital` which is responsible for treating or employing the
// `Humanoid`. In single player games, this has little effect, but it is very
// important in multiplayer games.
//!param hospital (Hospital) The `Hospital` which should be responsible
// for the `Humanoid`.
function Humanoid::setHospital(hospital) {
  this.hospital = hospital;
  if( ! hospital.is_in_world ) {
    this->despawn();
  }
}

//! Despawn the humanoid.
function Humanoid::despawn() {
  var spawn_point = this.world.spawn_points[math.random(1, #this.world.spawn_points)];
  this->setNextAction(SpawnAction("despawn", spawn_point)->setMustHappen(true));
}

// Function to activate/deactivate moods of a humanoid.
// If mood_name is nil it is considered a refresh only.
function Humanoid::setMood(mood_name, activate) {
  if( mood_name ) {
    if( activate && activate != "deactivate" ) {
      if( this.active_moods[mood_name] ) {
        return; // No use doing anything if it already exists.
      }
      this.active_moods[mood_name] = mood_icons[mood_name];
    } else {
      if( ! this.active_moods[mood_name] ) {
        return; // No use doing anything if the mood isn't there anyway.
      }
      this.active_moods[mood_name] = null;
    }
  }
  var new_mood = null;
  // TODO: Make equal priorities cycle, or make all moods unique
  for( _, value in pairs(this.active_moods) ) {
    if( new_mood ) { // There is a mood, check priorities.
      if( new_mood.priority < value.priority ) {
        new_mood = value;
      }
    } else {
      if( ! value.on_hover ) {
        new_mood = value;
      }
    }
  }
  this->setMoodInfo(new_mood);
}

function Humanoid::setCallCompleted() {
  if( this.on_call ) {
    CallsDispatcher.onCheckpointCompleted(this.on_call);
  }
}

// Is the given mood in the list of active moods.
function Humanoid::isMoodActive(mood) {
  for( i, _ in pairs(this.active_moods) ) {
    if( i == mood ) {
      return true;
    }
  }
  return false;
}

function Humanoid.getIdleAnimation(humanoid_class) {
  return assert(walk_animations[humanoid_class], "Invalid humanoid class").idle_east;
}

function Humanoid::getCurrentMood() {
  if( this.mood_info ) {
    return this.mood_info;
  }
}

var function Humanoid_startAction(this) {
  var action = this.action_queue[1];

  // Handle an empty action queue in some way instead of crashing.
  if( ! action ) {
    // if this is a patient that is going home, an empty
    // action queue is not a problem
    if( class.is(this, Patient) && this.going_home ) {
      return;
    }

    //-- Empty action queue! ----
    // First find out if this humanoid is in a room.
    var room = this->getRoom();
    if( room ) {
      room->makeHumanoidLeave(this);
    }
    // Is it a member of staff, grim or a patient?
    if( class.is(this, Staff) ) {
      this->queueAction(MeanderAction());
    } else if( class.is(this,GrimReaper) ) {
      this->queueAction(IdleAction());
    } else {
      this->queueAction(SeekReceptionAction());
    }
    // Open the dialog of the humanoid.
    var ui = this.world.ui;
    if( class.is(this, Patient) ) {
      ui->addWindow(UIPatient(ui, this));
    } else if( class.is(this, Staff) ) {
      ui->addWindow(UIStaff(ui, this));
    }
    // Pause the game.
    this.world->setSpeed("Pause");

    // Tell the player what just happened.
    this.world->gameLog("");
    this.world->gameLog("Empty action queue!");
    this.world->gameLog("Last action: " .. this.previous_action.name);
    this.world->gameLog(debug.traceback());

    ui->addWindow(UIConfirmDialog(ui,
      "Sorry, a humanoid just had an empty action queue,"..
      " which means that he or she didn't know what to do next."..
      " Please consult the command window for more detailed information. "..
      "A dialog with "..
      "the offending humanoid has been opened. "..
      "Would you like him/her to leave the hospital?",
      /*persistable:humanoid_leave_hospital*/ function() {
        this.world->gameLog("The humanoid was told to leave the hospital...");
        if( class.is(this, Staff) ) {
          this->fire();
        } else {
          // Set these variables to increase the likelihood of the humanoid managing to get out of the hospital.
          this.going_home = false;
          this.hospital = this.world->getLocalPlayerHospital();
          this->goHome("kicked");
        }
        if( TheApp.world->isCurrentSpeed("Pause") ) {
          TheApp.world->setSpeed(TheApp.world.prev_speed);
        }
      },
      /*persistable:humanoid_stay_in_hospital*/ function() {
        if( TheApp.world->isCurrentSpeed("Pause") ) {
          TheApp.world->setSpeed(TheApp.world.prev_speed);
        }
      }
    ));
    action = this.action_queue[1];

  }
  //-- There is an action to start ----
  // Call the action start handler
  TheApp.humanoid_actions[action.name](action, this);

  if( action == this.action_queue[1] && action.todo_interrupt ) {
    var high_priority = action.todo_interrupt == "high";
    action.todo_interrupt = null;
    var on_interrupt = action.on_interrupt;
    if( on_interrupt ) {
      action.on_interrupt = null;
      on_interrupt(action, this, high_priority);
    }
  }
}

function Humanoid::setNextAction(action, high_priority) {
  // Aim: Cleanly finish the current action (along with any subsequent actions
  // which must happen), then replace all the remaining actions with the given
  // one.
  var i = 1;
  var queue = this.action_queue;
  var interrupted = false;

  // Skip over any actions which must happen
  while( queue[i] && queue[i].must_happen ) {
    interrupted = true;
    ++i    ;
  }

  // Remove actions which are no longer going to happen
  var done_set = {};
  for( j = #queue, i, -1 ) {
    var removed = queue[j];
    queue[j] = null;
    if( ! removed ) {
      // A bug (rare) that removed could be nil.
      //   but as it's being removed anyway...it could be ignored
      print("Warning: Action to be removed was nil");
    } else {
      if( removed.on_remove ) {
        removed.on_remove(removed, this);
      }
      if( removed.until_leave_queue && ! done_set[removed.until_leave_queue] ) {
        removed.until_leave_queue->removeValue(this);
        done_set[removed.until_leave_queue] = true;
      }
      if( removed.object && removed.object->isReservedFor(this) ) {
        removed.object->removeReservedUser(this);
      }
    }
  }

  // Add the new action to the queue
  queue[i] = action;

  // Interrupt the current action and queue other actions to be interrupted
  // when they start.
  if( interrupted ) {
    interrupted = queue[1];
    for( j = 1, i - 1 ) {
      queue[j].todo_interrupt = high_priority && "high" || true;
    }
    var on_interrupt = interrupted.on_interrupt;
    if( on_interrupt ) {
      interrupted.on_interrupt = null;
      on_interrupt(interrupted, this, high_priority || false);
    }
  } else {
    // Start the action if it has become the current action
    Humanoid_startAction(this);
  }
  return this;
}

function Humanoid::queueAction(action, pos) {
  if( pos ) {
    table.insert(this.action_queue, pos + 1, action);
    if( pos == 0 ) {
      Humanoid_startAction(this);
    }
  } else {
    this.action_queue[#this.action_queue + 1] = action;
  }
  return this;
}


function Humanoid::finishAction(action) {
  if( action != null ) {
    assert(action == this.action_queue[1], "Can only finish current action");
  }
  // Save the previous action just a while longer.
  this.previous_action = this.action_queue[1];
  table.remove(this.action_queue, 1);
  Humanoid_startAction(this);
}

// Check if the humanoid is running actions intended to leave the room, as indicated by the flag
function Humanoid::isLeaving() {
  return this.action_queue[1].is_leaving && true || false;
}

// Check if there is "is_leaving" action in the action queue
function Humanoid::hasLeavingAction() {
  for( _, action in ipairs(this.action_queue) ) {
    if( action.is_leaving ) {
      return true;
    }
  }
  return false;
}

function Humanoid::setType(humanoid_class) {
  assert(walk_animations[humanoid_class], "Invalid humanoid class: " .. tostring(humanoid_class));
  this.walk_anims = walk_animations[humanoid_class];
  this.door_anims = door_animations[humanoid_class];
  this.die_anims  = die_animations[humanoid_class];
  this.falling_anim  = falling_animations[humanoid_class];
  this.on_ground_anim  = on_ground_animations[humanoid_class];
  this.get_up_anim  = get_up_animations[humanoid_class];
  this.shake_fist_anim  = shake_fist_animations[humanoid_class];
  this.vomit_anim = vomit_animations[humanoid_class];
  this.yawn_anim = yawn_animations[humanoid_class];
  this.tap_foot_anim = tap_foot_animations[humanoid_class];
  this.check_watch_anim = check_watch_animations[humanoid_class];
  this.pee_anim = pee_animations[humanoid_class];
  this.humanoid_class = humanoid_class;
  if( #this.action_queue == 0 ) {
    this->setNextAction(IdleAction());
  }

  this.th->setPartialFlag(this.permanent_flags || 0, false);
  if( humanoid_class == "Invisible Patient" ) {
    // Invisible patients do not have very many pixels to hit, box works better
    this.permanent_flags = DrawFlags.BoundBoxHitTest;
  } else {
    this.permanent_flags = null;
  }
  this.th->setPartialFlag(this.permanent_flags || 0);
}

// Helper function for the common case of instructing a `Humanoid` to walk to
// a position on the map. Equivalent to calling `setNextAction` with a walk
// action.
//!param tile_x (integer) The X-component of the Lua tile co-ordinates of the
// tile to walk to.
//!param tile_y (integer) The Y-component of the Lua tile co-ordinates of the
// tile to walk to.
//!param must_happen (boolean, nil) If true, then the walk action will not be
// interrupted.
function Humanoid::walkTo(tile_x, tile_y, must_happen) {
  this->setNextAction(WalkAction(tile_x, tile_y)
      ->setMustHappen(! ! must_happen));
}

// Stub functions for handling fatigue. These are overridden by the staff subclass,
// but also defined here, so we can just call it on any humanoid
function Humanoid::tire(amount) {
}

function Humanoid::wake(amount) {
}

function Humanoid::updateSpeed() {
  this.speed = "normal";
}

function Humanoid::handleRemovedObject(object) {
  var replacement_action;
  if( this.humanoid_class && this.humanoid_class == "Receptionist" ) {
    replacement_action = MeanderAction();
  } else if( object.object_type.id == "bench" || object.object_type.id == "drinks_machine" ) {
    replacement_action = IdleAction()->setMustHappen(true);
  }

  for( i, action in ipairs(this.action_queue) ) {
    if( (action.name == "use_object" || action.name == "staff_reception") && action.object == object ) {
      if( replacement_action ) {
        this->queueAction(replacement_action, i);
      }
      if( i == 1 ) {
        var on_interrupt = action.on_interrupt;
        action.on_interrupt = null;
        if( on_interrupt ) {
          on_interrupt(action, this, true);
        }
      } else {
        table.remove(this.action_queue, i);
        this.associated_desk = null; // NB: for the other case, this is already handled in the on_interrupt function
      }
      // Are we in a queue?
      if( this.action_queue[i + 1] && this.action_queue[i + 1].name == "queue" ) {
        this.action_queue[i + 1]->onChangeQueuePosition(this);
      }
      break;
    }
  }
}

// Adjusts one of the `Humanoid`'s attributes.
//!param attribute (string) One of: "happiness", "thirst", "toilet_need", "warmth".
//!param amount (number) This amount is added to the existing value for the attribute,
//  and is then capped to be between 0 and 1.
function Humanoid::changeAttribute(attribute, amount) {
  // Receptionist is always 100% happy
  if( this.humanoid_class && this.humanoid_class == "Receptionist" && attribute == "happiness" ) {
    this.attributes[attribute] = 1;
    return true;
  }

  if( this.attributes[attribute] ) {
    this.attributes[attribute] = this.attributes[attribute] + amount;
    if( this.attributes[attribute] > 1 ) {
      this.attributes[attribute] = 1;
    } else if( this.attributes[attribute] < 0 ) {
      this.attributes[attribute] = 0;
    }
  }
}

// Check if it is cold or hot around the humanoid and increase/decrease the
// feeling of warmth accordingly. Returns whether the calling function should proceed.
function Humanoid::tickDay() {
  // No use doing anything if we're going home
  if( this.going_home ) {
    return false;
  }

  var temperature = this.world.map.th->getCellTemperature(this.tile_x, this.tile_y);
  this.attributes.warmth = this.attributes.warmth * 0.75 + temperature * 0.25;

  // If it is too hot or too cold, start to decrease happiness and
  // show the corresponding icon. Otherwise we could get happier instead.
  var min_comfort_temp = 0.22; // 11 degrees Celcius.
  var max_comfort_temp = 0.36; // 18 degrees Celcius.
  var decrease_factor = 0.10;
  var increase_happiness = 0.005;

  if( this.attributes["warmth"] && this.hospital ) {
    // Cold: less than comfortable.
    if( this.attributes["warmth"] < min_comfort_temp ) {
      this->changeAttribute("happiness", -decrease_factor * (min_comfort_temp - this.attributes["warmth"]));
      this->setMood("cold", "activate");
    // Hot: More than comfortable.
    } else if( this.attributes["warmth"] > max_comfort_temp ) {
      this->changeAttribute("happiness", -decrease_factor * (this.attributes["warmth"] - max_comfort_temp));
      this->setMood("hot", "activate");
    // Ideal: Not too cold or too warm.
    } else {
      this->changeAttribute("happiness", increase_happiness);
      this->setMood("cold", "deactivate");
      this->setMood("hot", "deactivate");
    }
  }
  return true;
}

// Helper function that finds out if there is an action queued to use the specified object
function Humanoid::goingToUseObject(object_type) {
  for( _, action in ipairs(this.action_queue) ) {
    if( action.object && action.object.object_type.id == object_type ) {
      return true;
    }
  }
  return false;
}

// Registers a new build callback for this humanoid.
//!param callback (function) The callback to call when a room has been built.
function Humanoid::registerRoomBuildCallback(callback) {
  if( ! this.build_callbacks[callback] ) {
    this.build_callbacks[callback] = true;
  } else {
    this.world->gameLog("Warning: Trying to re-add room build callback (" .. tostring(callback) .. ") for humanoid (" .. tostring(this) .. ").");
  }
}

// Unregisters a build callback for this humanoid.
//!param callback (function) The callback to remove.
function Humanoid::unregisterRoomBuildCallback(callback) {
  if( this.build_callbacks[callback] ) {
    this.build_callbacks[callback] = null;
  } else {
    this.world->gameLog("Warning: Trying to remove nonexistant room build callback (" .. tostring(callback) .. ") from humanoid (" .. tostring(this) .. ").");
  }
}

function Humanoid::notifyNewRoom(room) {
  for( callback, _ in pairs(this.build_callbacks) ) {
    callback(room);
  }
}

// Registers a new remove callback for this humanoid.
//!param callback (function) The callback to call when a room has been removed.
function Humanoid::registerRoomRemoveCallback(callback) {
  if( ! this.remove_callbacks[callback] ) {
    this.world->registerRoomRemoveCallback(callback);
    this.remove_callbacks[callback] = true;
  } else {
    this.world->gameLog("Warning: Trying to re-add room remove callback (" .. tostring(callback) .. ") for humanoid (" .. tostring(this) .. ").");
  }
}

// Unregisters a remove callback for this humanoid.
//!param callback (function) The callback to remove.
function Humanoid::unregisterRoomRemoveCallback(callback) {
  if( this.remove_callbacks[callback] ) {
    this.world->unregisterRoomRemoveCallback(callback);
    this.remove_callbacks[callback] = null;
  } else {
    this.world->gameLog("Warning: Trying to remove nonexistant room remove callback (" .. tostring(callback) .. ") from humanoid (" .. tostring(this) .. ").");
  }
}

// Function called when a humanoid is sent away from the hospital to prevent
// further actions taken as a result of a callback
function Humanoid::unregisterCallbacks() {
  // Remove callbacks for new rooms
  for( cb, _ in pairs(this.build_callbacks) ) {
    this->unregisterRoomBuildCallback(cb);
  }
  // Remove callbacks for removed rooms
  for( cb, _ in pairs(this.remove_callbacks) ) {
    this->unregisterRoomRemoveCallback(cb);
  }
  // Remove any message related to the humanoid.
  if( this.message_callback ) {
    this->message_callback(true);
    this.message_callback = null;
  }
}

function Humanoid::getDrawingLayer() {
  return 4;
}

function Humanoid::getCurrentAction() {
  if( next(this.action_queue) == null ) {
    error("Action queue was empty. This should never happen.\n" .. this->tostring());
  }

  return this.action_queue[1];
}

/* Return string representation
! Returns string representation of the humanoid like status and action queue
!return (string)
*/
function Humanoid::tostring() {
  var name = this.profile && this.profile.name || null;
  var class = this.humanoid_class && this.humanoid_class || "N/A";
  var full_name = "humanoid";
  if( (name) ) {
    full_name = full_name .. " (" .. name .. ")";
  }

  var result = string.format("%s - class: %s", full_name, class);

  result = result .. string.format("\nWarmth: %.3f   Happiness: %.3f   Fatigue: %.3f  Thirst: %.3f  Toilet_Need: %.3f   Health: %.3f",
    this.attributes["warmth"] || 0,
    this.attributes["happiness"] || 0,
    this.attributes["fatigue"] || 0,
    this.attributes["thirst"] || 0,
    this.attributes["toilet_need"] || 0,
    this.attributes["health"] || 0);

  result = result .. "\nActions: [";
  for( i = 1, #this.action_queue ) {
    var action = this.action_queue[i];
    var action_string = action.name;
    if( action.room_type ) {
      action_string = action_string .. " - " .. action.room_type;
    } else if( action.object ) {
      action_string = action_string .. " - " .. action.object.object_type.id;
    } else if( action.name == "walk" ) {
      action_string = action_string .. " - going to " .. action.x .. ":" .. action.y;
    } else if( action.name == "queue" ) {
      var distance = action.current_bench_distance;
      if( distance == null ) {
        distance = "null";
      }
      var standing = "false";
      if( action->isStanding() ) {
        standing = "true";
      }
      action_string = action_string .. " - Bench distance: " .. distance .. " Standing: " .. standing;
    }
    var flag = action.must_happen && "  must_happen" || "";
    if( flag != "" ) {
      action_string = action_string .. " " .. flag;
    }

    if( i != 1 ) {
      result = result .. ", ";
    }
    result = result .. action_string;
  }
  result = result .. "]";
  return result;
}
