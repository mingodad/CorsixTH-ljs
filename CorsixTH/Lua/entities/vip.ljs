/* Copyright (c) 2011 John Pirie

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

//! A `Vip` who is in the hospital to evaluate the hospital and produce a report
class ("Vip") (Humanoid);

//-@type Vip
var Vip = _G["Vip"];

function Vip::Vip(...) {
  this->Humanoid(...);
  this.hover_cursor = TheApp.gfx->loadMainCursor("default");
  this.action_string = "";
  this.name="";
  this.announced = false;

  this.vip_rating = 50;

  this.cash_reward = 0;

  this.enter_deaths = 0;
  this.enter_visitors = 0;
  this.enter_explosions = 0;
  this.enter_cures = 0;
  this.num_vomit_noninducing = 0;
  this.num_vomit_inducing = 0;
  this.found_vomit = {};
  this.num_visited_rooms = 0;
  this.room_eval = 0;
  this.waiting = 0;
}

// Check if it is cold or hot around the vip and increase/decrease the
// feeling of warmth accordingly. Returns whether the calling function should proceed.
function Vip::tickDay() {
  // for the vip
  if( this.waiting ) {
    this.waiting = this.waiting - 1;
    if( this.waiting == 0 ) {
      if( #this.world.rooms == 0 ) {
        // No rooms have been built yet
        this->goHome();
      }
      // First let the previous room go.
      // Include this when the VIP is supposed to block doors again.
      /*if self.next_room then
        self.next_room.door.reserved_for = nil
        self.next_room:tryAdvanceQueue()
      end--*/
      // Find out which next room to visit.
      this.next_room_no, this.next_room = next(this.world.rooms, this.next_room_no);
      // Make sure that this room is active
      while( this.next_room && ! this.next_room.is_active ) {
        this.next_room_no, this.next_room = next(this.world.rooms, this.next_room_no);
      }
      this->setNextAction(VipGoToNextRoomAction());
    }
  }

  this.world->findObjectNear(this, "litter", 8, function(x, y) {
    var litter = this.world->getObject(x, y, "litter");
    if( ! litter ) {
      return;
    }

    var alreadyFound = false;
    for( i=1, (this.num_vomit_noninducing + this.num_vomit_inducing) ) {
      if( this.found_vomit[i] == litter ) {
        alreadyFound = true;
        break;
      }
    }

    this.found_vomit[(this.num_vomit_noninducing + this.num_vomit_inducing + 1)] = litter;

    if( ! alreadyFound ) {
      if( litter->anyLitter() ) {
        this.num_vomit_noninducing = this.num_vomit_noninducing + 1;
      } else {
        this.num_vomit_inducing = this.num_vomit_inducing + 1;
      }
    }
  });

  return Humanoid.tickDay(this);
}

// display the VIP name in the info box
function Vip::updateDynamicInfo(action_string) {
  this->setDynamicInfo('text', {this.name});
}

function Vip::goHome() {
  if( this.going_home ) {
    return;
  }

  this->unregisterCallbacks();
  // Set the rating.
  this->setVIPRating();

  this.going_home = true;
  // save self.hospital so we can reference it in self:onDestroy
  this.last_hospital = this.hospital;
  this->despawn();
}

// called when the vip is out of the hospital grounds
function Vip::onDestroy() {
  var message;
  // First of all there's a special message if we're in free build mode.
  if( this.world.free_build_mode ) {
    this.last_hospital.reputation = this.last_hospital.reputation + 20;
    message = {
      {text = _S.fax.vip_visit_result.vip_remarked_name->format(this.name)},
      {text = _S.fax.vip_visit_result.remarks.free_build[math.random(1, 3)]},
      choices = {{text = _S.fax.vip_visit_result.close_text, choice = "close"}}
    };
  } else if( this.vip_rating == 1 ) {
    this.last_hospital.reputation = this.last_hospital.reputation - 10;
    message = {
      {text = _S.fax.vip_visit_result.vip_remarked_name->format(this.name)},
      {text = _S.fax.vip_visit_result.remarks.very_bad[math.random(1, 3)]},
      {text = _S.fax.vip_visit_result.rep_loss},
      choices = {{text = _S.fax.vip_visit_result.close_text, choice = "close"}}
    };
  } else if( this.vip_rating == 2 ) {
    this.last_hospital.reputation = this.last_hospital.reputation - 5;
    message = {
      {text = _S.fax.vip_visit_result.vip_remarked_name->format(this.name)},
      {text = _S.fax.vip_visit_result.remarks.bad[math.random(1, 3)]},
      {text = _S.fax.vip_visit_result.rep_loss},
      choices = {{text = _S.fax.vip_visit_result.close_text, choice = "close"}}
    };
  } else if( this.vip_rating == 3 ) {
    message = {
      {text = _S.fax.vip_visit_result.vip_remarked_name->format(this.name)},
      {text = _S.fax.vip_visit_result.remarks.mediocre[math.random(1, 3)]},
      choices = {{text = _S.fax.vip_visit_result.close_text, choice = "close"}}
    };
  } else if( this.vip_rating == 4 ) {
    this.last_hospital->receiveMoney(this.cash_reward, _S.transactions.vip_award);
    this.last_hospital.reputation = this.last_hospital.reputation + (math.round(this.cash_reward / 100));
    message = {
      {text = _S.fax.vip_visit_result.vip_remarked_name->format(this.name)},
      {text = _S.fax.vip_visit_result.remarks.good[math.random(1, 3)]},
      {text = _S.fax.vip_visit_result.rep_boost},
      {text = _S.fax.vip_visit_result.cash_grant->format(this.cash_reward)},
      choices = {{text = _S.fax.vip_visit_result.close_text, choice = "close"}}
    };
  } else {
    this.last_hospital->receiveMoney(this.cash_reward, _S.transactions.vip_award);
    this.last_hospital.reputation = this.last_hospital.reputation + (math.round(this.cash_reward / 100));
    this.last_hospital.pleased_vips_ty = this.last_hospital.pleased_vips_ty + 1;
    if( this.vip_rating == 5 ) {
      message = {
        {text = _S.fax.vip_visit_result.vip_remarked_name->format(this.name)},
        {text = _S.fax.vip_visit_result.remarks.super[math.random(1, 3)]},
        {text = _S.fax.vip_visit_result.rep_boost},
        {text = _S.fax.vip_visit_result.cash_grant->format(this.cash_reward)},
        choices = {{text = _S.fax.vip_visit_result.close_text, choice = "close"}}
      };
    }
  }
  this.world.ui.bottom_panel->queueMessage("report", message, null, 24 * 20, 1);

  this.world->nextVip();

  return Humanoid.onDestroy(this);
}

function Vip::announce() {
  var announcements = {
    "vip001.wav", "vip002.wav", "vip003.wav", "vip004.wav", "vip005.wav",
  };   // there is also vip008 which announces a man from the ministry
  this.world.ui->playAnnouncement(announcements[math.random(1, #announcements)]);
  if( this.hospital.num_vips < 1 ) {
    this.world.ui.adviser->say(_A.information.initial_general_advice.first_VIP);
  } else {
    this.world.ui.adviser->say(_A.information.vip_arrived->format(this.name));
  }
}

function Vip::evaluateRoom() {
  // Another room visited.
  this.num_visited_rooms = this.num_visited_rooms + 1;
  var room = this.next_room;
  // if the player is about to kill a live patient for research, lower their rating dramatically
  if( room.room_info.id == "research" ) {
    if( room->getPatient() ) {
      this.vip_rating = this.vip_rating - 80;
    }
  }

  if( room.staff_member ) {
    if( room.staff_member.profile.skill > 0.9 ) {
      this.room_eval = this.room_eval + 3;
    }
    if( room.staff_member.attributes["fatigue"] ) {
      if( room.staff_member.attributes["fatigue"] < 0.4 ) {
        this.room_eval = this.room_eval + 2;
      }
    }
  }

  // evaluate the room we're currently looking at
  for( object, _ in pairs(room.objects) ) {
    if( object.object_type.id == "extinguisher" ) {
      this.room_eval = this.room_eval + 1;
      break;
    } else if( object.object_type.id == "plant" ) {
      if( object.days_left >= 10 ) {
        this.room_eval = this.room_eval + 1;
      } else if( object.days_left <= 3 ) {
        this.room_eval = this.room_eval - 1;
      }
      break;
    }

    if( object.strength ) {
      if( object.strength > (object.object_type.default_strength / 2) ) {
        this.room_eval = this.room_eval + 1;
      } else {
        this.room_eval = this.room_eval - 3;
      }
    }
  }
}

function Vip::evaluateEmergency(success) {
  // Make sure that the VIP is still actually in the process of evaluation
  if( ! this.going_home ) {
    if( success ) {
      this.vip_rating = this.vip_rating + 10;
    } else {
      this.vip_rating = this.vip_rating - 15;
    }
  }
}

function Vip::setVIPRating() {
  //check the visitor to patient death ratio
  var death_diff = this.hospital.num_deaths - this.enter_deaths;
  var visitors_diff = this.hospital.num_visitors - this.enter_visitors;
  if( death_diff == 0 ) {
    if( visitors_diff != 0 ) { //if there have been no new patients, no +/- points
      this.vip_rating = this.vip_rating + 20;
    }
  } else {
    var death_ratio = visitors_diff / death_diff;
    var death_ratio_rangemap = {
      {upper = 2, value = -20},
      {upper = 4, value = -10},
      {upper = 8, value = 0},
      {upper = 12, value = 5},
                  {value = 10}
    };
    this.vip_rating = this.vip_rating + rangeMapLookup(death_ratio, death_ratio_rangemap);
  }

  //check the visitor to patient cure ratio
  var cure_diff = this.hospital.num_cured - this.enter_cures;
  if( cure_diff == 0 ) {
    if( visitors_diff != 0 ) { //if there have been no new patients, no +/- points
      this.vip_rating = this.vip_rating - 10;
    }
  } else {
    var cure_ratio = visitors_diff / cure_diff;
    var cure_ratio_rangemap = {
      {upper = 3, value = 20},
      {upper = 6, value = 10},
      {upper = 10, value = 0},
      {upper = 12, value = -5},
                 {value = -10}
    };
    this.vip_rating = this.vip_rating + rangeMapLookup(cure_ratio, cure_ratio_rangemap);
  }

  // check for the average queue length
  var sum_queue = 0;
  var room_count = 0;
  for( _, room in pairs(this.world.rooms) ) {
    if( room.door.queue ) {
      sum_queue = sum_queue + room.door.queue->size();
    }
    if( ! room.crashed ) {
      ++room_count    ;
    }
  }

  if( room_count == 0 ) {
    this.vip_rating = this.vip_rating - 100;
  } else if( sum_queue == 0 ) {
    this.vip_rating = this.vip_rating + 6;
  } else {
    var queue_ratio = sum_queue / room_count;
    var queue_ratio_rangemap = {
      {upper = 2, value = 6},
      {upper = 5, value = 3},
      {upper = 9, value = 0},
      {upper = 11, value = -3},
                  {value = -6}
    };
    this.vip_rating = this.vip_rating + rangeMapLookup(queue_ratio, queue_ratio_rangemap);
  }

  // now we check for toilet presence
  var sum_toilets = 0;
  for( _, room in pairs(this.world.rooms) ) {
    if( room.room_info.id == "toilets" ) {
      for( object, _ in pairs(room.objects) ) {
        if( object.object_type.id == "loo" ) {
          ++sum_toilets    ;
        }
      }
    }
  }
  if( sum_toilets == 0 ) {
    this.vip_rating = this.vip_rating - 6;
  } else {
    var patients_per_toilet = #this.hospital.patients / sum_toilets;
    var toilet_ratio_rangemap = {
      {upper = 10, value = 6},
      {upper = 20, value = 3},
      {upper = 40, value = 0},
                  {value = -3}
    };
    this.vip_rating = this.vip_rating + rangeMapLookup(patients_per_toilet, toilet_ratio_rangemap);
  }

  // check the levels of non-vomit inducing litter in the hospital
  var litter_ratio_rangemap = {
    {upper = 3, value = 4},
    {upper = 5, value = 2},
    {upper = 7, value = 0},
    {upper = 8, value = -2},
               {value = -4}
  };
  this.vip_rating = this.vip_rating + rangeMapLookup(this.num_vomit_noninducing, litter_ratio_rangemap);

  // check the levels of vomit inducing litter in the hospital
  var inducing_ratio_rangemap = {
    {upper = 3, value = 8},
    {upper = 5, value = 4},
    {upper = 6, value = 0},
    {upper = 7, value = -6},
    {upper = 10, value = -12},
    {upper = 12, value = -16},
                {value = -20}
  };
  this.vip_rating = this.vip_rating + rangeMapLookup(this.num_vomit_inducing, inducing_ratio_rangemap);

  // if there were explosions, hit the user hard
  if( this.hospital.num_explosions != this.enter_explosions ) {
    this.vip_rating = this.vip_rating - 70;
  }

  // check the vip heat level
  var heat_ratio_rangemap = {
    {upper = 0.20, value = -5},
    {upper = 0.40, value = -3},
    {upper = 0.60, value = 0},
    {upper = 0.80, value = 3},
                  {value = 5}
  };
  this.vip_rating = this.vip_rating + rangeMapLookup(this.attributes["warmth"], heat_ratio_rangemap);

  // check the seating : standing ratio of waiting patients
  // find all the patients who are currently waiting around
  var sum_sitting, sum_standing = this.hospital->countSittingStanding();
  if( sum_sitting >= sum_standing ) {
    this.vip_rating = this.vip_rating + 4;
  } else {
    this.vip_rating = this.vip_rating - 4;
  }

  // check average patient thirst
  var avg_thirst = this.hospital->getAveragePatientAttribute("thirst", null);
  if( avg_thirst ) {
    var thirst_ratio_rangemap = {
      {upper = 0.20, value = -5},
      {upper = 0.40, value = -1},
      {upper = 0.60, value = 0},
      {upper = 0.80, value = 1},
                    {value = 3}
    };
    this.vip_rating = this.vip_rating + rangeMapLookup(avg_thirst, thirst_ratio_rangemap);
  }

  if( this.num_visited_rooms != 0 ) {
    this.vip_rating = this.vip_rating + this.room_eval / this.num_visited_rooms;
  }

  // check average patient happiness
  var avg_happiness = this.hospital->getAveragePatientAttribute("happiness", null);
  if( avg_happiness ) {
    var patients_happy_ratio_rangemap = {
      {upper = 0.20, value = -10},
      {upper = 0.40, value = -5},
      {upper = 0.60, value = 0},
      {upper = 0.80, value = 5},
                    {value = 10}
    };
    this.vip_rating = this.vip_rating + rangeMapLookup(avg_happiness, patients_happy_ratio_rangemap);
  }

  // check average staff happiness
  avg_happiness = this.hospital->getAverageStaffAttribute("happiness", null);
  if( avg_happiness ) {
    var staff_happy_ratio_rangemap = {
      {upper = 0.20, value = -10},
      {upper = 0.40, value = -5},
      {upper = 0.60, value = 0},
      {upper = 0.80, value = 5},
                    {value = 10}
    };
    this.vip_rating = this.vip_rating + rangeMapLookup(avg_happiness, staff_happy_ratio_rangemap);
  }

  // set the cash reward value
  if( tonumber(this.world.map.level_number) ) {
    this.cash_reward = math.round(this.world.map.level_number * this.vip_rating) * 10;
  } else {
    // custom level, it has no level number. Default back to one.
    this.cash_reward = math.round(1 * this.vip_rating) * 10;
  }
  if( this.cash_reward > 2000 ) {
    this.cash_reward = 2000;
  }

  // give the rating between 1 and 5
  var rating_ratio_rangemap = {
    {upper = 25, value = 1},
    {upper = 45, value = 2},
    {upper = 65, value = 3},
    {upper = 85, value = 4},
                {value = 5}
  };
  this.vip_rating = rangeMapLookup(this.vip_rating, rating_ratio_rangemap);
  this.hospital.num_vips_ty = this.hospital.num_vips_ty + 1;
}

function Vip::afterLoad(old, new) {
  if( old < 50 ) {
    this.num_visited_rooms = 0;
    this->setNextAction(IdleAction());
    this.waiting = 1;
    for( _, room in pairs(this.world.rooms) ) {
      if( room.door.reserved_for == this ) {
        room.door.reserved_for = null;
        room->tryAdvanceQueue();
      }
    }
  }
  if( old < 79 ) {
    this.name = this.hospital.visitingVIP;
  }
  Humanoid.afterLoad(this, old, new);
}


