/* Copyright (c) 2009 Manuel KÃ¶nig

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

var room = {};
room.id = "scanner";
room.level_config_id = 13;
room.class = "ScannerRoom";
room.name = _S.rooms_short.scanner;
room.long_name = _S.rooms_long.scanner;
room.tooltip = _S.tooltip.rooms.scanner;
room.objects_additional = { "extinguisher", "radiator", "plant", "bin" };
room.objects_needed = { scanner = 1, console = 1, screen = 1 };
room.build_preview_animation = 920;
room.categories = {
  diagnosis = 4,
};
room.minimum_size = 5;
room.wall_type = "yellow";
room.floor_tile = 19;
room.required_staff = {
  Doctor = 1,
};
room.maximum_staff = room.required_staff;
room.call_sound = "reqd002.wav";
// Handyman is called to "diagnosis machine", all other diagnosis rooms have
// their own, more specific handyman call though
//room.handyman_call_sound = "maint011.wav"

class ("ScannerRoom") (Room);

//-@type ScannerRoom
var ScannerRoom = _G["ScannerRoom"];

function ScannerRoom::ScannerRoom(...) {
  this->Room(...);
}

function ScannerRoom::commandEnteringPatient(patient) {
  var staff = this.staff_member;
  var console, stf_x, stf_y = this.world->findObjectNear(staff, "console");
  var scanner, pat_x, pat_y = this.world->findObjectNear(patient, "scanner");
  var screen, sx, sy = this.world->findObjectNear(patient, "screen");
  var do_change = (patient.humanoid_class == "Standard Male Patient") ||
    (patient.humanoid_class == "Standard Female Patient");

  var /*persistable:scanner_shared_loop_callback*/ function loop_callback() {
    if( staff->getCurrentAction().scanner_ready && patient->getCurrentAction().scanner_ready ) {
      staff->finishAction();
      patient->finishAction();
    }
  }

  staff->walkTo(stf_x, stf_y);
  var idle_action = IdleAction()->setDirection(console.direction == "north" && "west" || "north")
      ->setLoopCallback(loop_callback);
  idle_action.scanner_ready = true;
  staff->queueAction(idle_action);

  staff->queueAction(UseObjectAction(console));

  if( do_change ) {
    patient->walkTo(sx, sy);
    patient->queueAction(UseScreenAction(screen));
    patient->queueAction(WalkAction(pat_x, pat_y));
  } else {
    patient->walkTo(pat_x, pat_y);
  }

  idle_action = IdleAction()->setDirection(scanner.direction == "north" && "east" || "south")
      ->setLoopCallback(loop_callback);
  idle_action.scanner_ready = true;
  patient->queueAction(idle_action);

  var length = math.random(10, 20) * (2 - staff.profile.skill);
  var loop_callback_scan = /*persistable:scanner_loop_callback*/ function(action) {
    if( length <= 0 ) {
      action.prolonged_usage = false;
    }
    --length    ;
  };

  var after_use_scan = /*persistable:scanner_after_use*/ function() {
    if( ! this.staff_member || patient.going_home ) {
      // If we aborted somehow, don't do anything here.
      // The patient already has orders to change back if necessary and leave.
      // makeHumanoidLeave() will make this function nil when it aborts the scanner's use.
      return;
    }
    this.staff_member->setNextAction(MeanderAction());
    this->dealtWithPatient(patient);
  };

  patient->queueAction(UseObjectAction(scanner)->setLoopCallback(loop_callback_scan)
      ->setAfterUse(after_use_scan));
  return Room.commandEnteringPatient(this, patient);
}

function ScannerRoom::onHumanoidLeave(humanoid) {
  if( this.staff_member == humanoid ) {
    this.staff_member = null;
  }
  Room.onHumanoidLeave(this, humanoid);
}

function ScannerRoom::makeHumanoidLeave(humanoid) {
  if( humanoid->getCurrentAction().name == "use_object" &&
      humanoid->getCurrentAction().object == this.world->findObjectNear(humanoid, "scanner") ) {
    humanoid->getCurrentAction().after_use = null;
  }

  this->makeHumanoidDressIfNecessaryAndThenLeave(humanoid);
}

function ScannerRoom::dealtWithPatient(patient) {
  if( string.find(patient.humanoid_class, "Stripped") ) {
    var screen, sx, sy = this.world->findObjectNear(patient, "screen");
    patient->setNextAction(WalkAction(sx, sy)->setMustHappen(true)->setIsLeaving(true)
        ->disableTruncate());

    var after_use_patient = /*persistable:scanner_exit*/ function() {
      Room.dealtWithPatient(this, patient);
    };

    patient->queueAction(UseScreenAction(screen)->setMustHappen(true)->setIsLeaving(true)
        ->setAfterUse(after_use_patient));
    patient->queueAction(this->createLeaveAction());
  } else {
    Room.dealtWithPatient(this, patient);
  }
}

function ScannerRoom::shouldHavePatientReenter(patient) {
  return ! patient->isLeaving();
}

return room;
