/* Copyright (c) 2009 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

var room = {};
room.id = "gp";
room.level_config_id = 7;
room.class = "GPRoom";
room.name = _S.rooms_short.gps_office;
room.long_name = _S.rooms_long.gps_office;
room.tooltip = _S.tooltip.rooms.gps_office;
room.objects_additional = { "extinguisher", "radiator", "plant", "bin" };
room.objects_needed = { desk = 1, cabinet = 1, chair = 1 };
room.build_preview_animation = 900;
room.categories = {
  diagnosis = 1,
};
room.minimum_size = 4;
room.wall_type = "white";
room.floor_tile = 18;
room.required_staff = {
  Doctor = 1,
};
room.maximum_staff = room.required_staff;
room.call_sound = "reqd008.wav";

class ("GPRoom") (Room);

//-@type GPRoom
var GPRoom = _G["GPRoom"];

function GPRoom::GPRoom(...) {
  this->Room(...);
}

function GPRoom::doStaffUseCycle(humanoid) {
  var obj, ox, oy = this.world->findObjectNear(humanoid, "cabinet");
  humanoid->walkTo(ox, oy);
  humanoid->queueAction(UseObjectAction(obj));

  obj, ox, oy = this.world->findObjectNear(humanoid, "desk");
  humanoid->queueAction(WalkAction(ox, oy));

  // A skilled doctor requires less time at the desk to diagnose the patient
  var inv_skill = 1 - humanoid.profile.skill;
  var desk_use_time = math.random(math.floor(3 +  5 * inv_skill),
                                    math.ceil (8 + 10 * inv_skill));
  var gp_loop_callback = /*persistable:gp_loop_callback*/ function() {
    --desk_use_time    ;
    if( desk_use_time == 0 ) {
      // Consultants who aren't tired might not need to stretch their legs
      // to remain alert, so might just remain at the desk and deal with the
      // next patient quicker.
      if( humanoid.profile.is_consultant &&
          math.random() >= humanoid.attributes.fatigue ) {
        desk_use_time = math.random(7, 14);
      } else {
        this->doStaffUseCycle(humanoid);
      }

      var patient = this->getPatient();
      if( patient ) {
        if( math.random() <= (0.7 + 0.3 * humanoid.profile.skill) || this.max_times <= 0 ) {
          if( patient.user_of && ! class.is(patient.user_of, Door) ) {
            this->dealtWithPatient(patient);
          }
        } else {
          this.max_times = this.max_times - 1;
        }
      }
    }
  };

  humanoid->queueAction(UseObjectAction(obj)->setLoopCallback(gp_loop_callback));
}

function GPRoom::commandEnteringStaff(humanoid) {
  this.staff_member = humanoid;
  this->doStaffUseCycle(humanoid);
  return Room.commandEnteringStaff(this, humanoid, true);
}

function GPRoom::commandEnteringPatient(humanoid) {
  var obj, ox, oy = this.world->findObjectNear(humanoid, "chair");
  humanoid->walkTo(ox, oy);
  humanoid->queueAction(UseObjectAction(obj));
  this.max_times = 3;
  return Room.commandEnteringPatient(this, humanoid);
}

function GPRoom::shouldHavePatientReenter(patient) {
  return ! patient.diagnosed && Room.shouldHavePatientReenter(this, patient);
}

function GPRoom::dealtWithPatient(patient) {
  patient = patient || this->getPatient();

  // If patients are slow to leave the chair, and staff are quick in their
  // usage cycle, then dealtWithPatient() might get called twice for the
  // same patient, in which case the second call must be ignored (otherwise
  // if the first call resulted in the patient being diagnosed, the following
  // logic would cause the patient to leave the room and stand indefinitely).
  if( patient == this.just_dealt_with ) {
    return;
  } else {
    this.just_dealt_with = patient;
  }

  patient->setNextAction(this->createLeaveAction());
  patient->addToTreatmentHistory(this.room_info);

  // If the patient got sent to the wrong room and needs telling where
  // to go next - this happens when a disease changes for an epidemic
  if( patient.needs_redirecting ) {
    this->sendPatientToNextDiagnosisRoom(patient);
    patient.needs_redirecting = false;
  } else if( patient.disease && ! patient.diagnosed ) {
    this.hospital->receiveMoneyForTreatment(patient);
    patient->completeDiagnosticStep(this);
    if( patient.diagnosis_progress >= this.hospital.policies["stop_procedure"] ) {
      patient->setDiagnosed();
      if( patient->agreesToPay(patient.disease.id) ) {
        patient->queueAction(SeekRoomAction(patient.disease.treatment_rooms[1])->enableTreatmentRoom());
      } else {
        patient->goHome("over_priced", patient.disease.id);
      }

      this.staff_member->setMood("idea3", "activate"); // Show the light bulb over the doctor
      // Check if this disease has just been discovered
      if( ! this.hospital.disease_casebook[patient.disease.id].discovered ) {
        this.hospital.research->discoverDisease(patient.disease);
      }
    } else {
      this->sendPatientToNextDiagnosisRoom(patient);
    }
  } else {
    patient->queueAction(MeanderAction()->setCount(2));
    patient->queueAction(IdleAction());
  }

  if( this.dealt_patient_callback ) {
    this.dealt_patient_callback(this.waiting_staff_member);
  }
  if( this.staff_member ) {
    this->setStaffMembersAttribute("dealing_with_patient", false);
  }
  // Maybe the staff member can go somewhere else
  this->findWorkForStaff();
}

function GPRoom::sendPatientToNextDiagnosisRoom(patient) {
  if( #patient.available_diagnosis_rooms == 0 ) {
    // The very rare case where the patient has visited all his/her possible diagnosis rooms
    // There's not much to do then... Send home
    patient->goHome("kicked");
    patient->updateDynamicInfo(_S.dynamic_info.patient.actions.no_diagnoses_available);
  } else {
    this.staff_member->setMood("reflexion", "activate"); // Show the uncertainty mood over the doctor
    var next_room_id = math.random(1, #patient.available_diagnosis_rooms);
    var next_room = patient.available_diagnosis_rooms[next_room_id];
    if( patient->agreesToPay("diag_" .. next_room) ) {
      patient->queueAction(SeekRoomAction(next_room)->setDiagnosisRoom(next_room_id));
    } else {
      patient->goHome("over_priced", "diag_" .. next_room);
    }
  }
}

function GPRoom::onHumanoidLeave(humanoid) {
  // Reset moods when either the patient or the doctor leaves the room.
  if( humanoid.humanoid_class != "Handyman" ) {
    for( staff, _ in pairs(this.humanoids) ) {
      staff->setMood("idea3", "deactivate");
      staff->setMood("reflexion", "deactivate");
    }
  }
  if( this.staff_member == humanoid ) {
    this.staff_member = null;
  }
  if( this.just_dealt_with == humanoid ) {
    this.just_dealt_with = null;
  }
  Room.onHumanoidLeave(this, humanoid);
}

function GPRoom::roomFinished() {
  if( ! this.hospital->hasStaffOfCategory("Doctor") &&
      ! this.world.ui.start_tutorial ) {
    this.world.ui.adviser->say(_A.room_requirements.gps_office_need_doctor);
  }
  return Room.roomFinished(this);
}

return room;
