/* Copyright (c) 2010 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

var room = {};
room.id = "operating_theatre";
room.level_config_id = 10;
room.class = "OperatingTheatreRoom";
room.name = _S.rooms_short.operating_theatre;
room.long_name = _S.rooms_long.operating_theatre;
room.tooltip = _S.tooltip.rooms.operating_theatre;
room.objects_additional = { "extinguisher", "radiator", "plant", "bin" };
room.objects_needed = {
  operating_table = 1,
  surgeon_screen = 1,
  op_sink1 = 1,
  x_ray_viewer = 1
};
room.build_preview_animation = 5080;
room.categories = {
  treatment = 3,
};
room.minimum_size = 6;
room.wall_type = "white";
room.floor_tile = 21;
room.swing_doors = true;
room.required_staff = {
  Surgeon = 2,
};
room.call_sound = "reqd010.wav"; // TODO: There is also an unused sound
// "Another surgeon needed [...]", reqd011.wav
// room.handyman_call_sound = "maint007.wav" TODO: No sound for this room?

class ("OperatingTheatreRoom") (Room);

//-@type OperatingTheatreRoom
var OperatingTheatreRoom = _G["OperatingTheatreRoom"];

function OperatingTheatreRoom::OperatingTheatreRoom(...) {
  this->Room(...);
  this.staff_member_set = {};
}

function OperatingTheatreRoom::roomFinished() {
  // Find the X-ray viewer
  var fx, fy = this->getEntranceXY(true);
  var objects = this.world->findAllObjectsNear(fx, fy);
  for( object in pairs(objects) ) {
    var id = object.object_type.id;
    if( id == "x_ray_viewer" ) {
      this[id] = object;
    }
  }
  // Tell the player what is missing, if anything.
  if( ! this.hospital->hasRoomOfType("ward") ) {
    this.world.ui.adviser->say(_A.room_requirements.op_need_ward);
  }
  if( ! this.hospital->hasStaffOfCategory("Surgeon") ) {
    this.world.ui.adviser->say(_A.room_requirements.op_need_two_surgeons);
  } else if( this.hospital->hasStaffOfCategory("Surgeon") == 1 ) {
    this.world.ui.adviser->say(_A.room_requirements.op_need_another_surgeon);
  }
  return Room.roomFinished(this);
}

var function wait_for_object(humanoid, obj, must_happen) {
  assert(type(must_happen) == "boolean", "must happen must be true or false");

  var loop_callback_wait = /*persistable:operatring_theatre_wait*/ function(action) {
    if( action.todo_interrupt || ! obj.user ) {
      humanoid->finishAction(action);
    } else {
      humanoid->queueAction(IdleAction()->setCount(5)->setMustHappen(true), 0);
    }
  };

  return IdleAction()->setMustHappen(must_happen)->setLoopCallback(loop_callback_wait);
}

//! Returns true if an operation is ongoing
function OperatingTheatreRoom::isOperating() {
  for( k, _ in pairs(this.staff_member_set) ) {
    if( k->getCurrentAction().name == "multi_use_object" ) {
      return true;
    }
  }

  return false;
}

//! Builds the second operation action (i.e. with the surgeon whose we
//! see the back). Called either when the operation starts or when the
//! operation is resumed after interruption caused by the picking up of
//! the second surgeon.
//! Note: Must be part of OperatingTheatreRoom and not a local function
//! because of the use in the persisted callback function operation_standby.
//!param multi_use (action): the first operation action (built with via buildTableAction1()).
//!param operation_table_b (OperatingTable): slave object representing the operation table.
function OperatingTheatreRoom._buildTableAction2(multi_use, operation_table_b) {
  var num_loops = math.random(2, 5);

  var loop_callback_use_object = /*persistable:operatring_theatre_use_callback*/ function(action) {
    --num_loops    ;
    if( num_loops <= 0 ) {
      action.prolonged_usage = false;
    }
  };

  var after_use_use_object = /*persistable:operatring_theatre_after_use*/ function() {
    multi_use.prolonged_usage = false;
  };

  return UseObjectAction(operation_table_b)->setLoopCallback(loop_callback_use_object)
      ->setAfterUse(after_use_use_object)->setMustHappen(true)->disableTruncate();
}

function OperatingTheatreRoom::commandEnteringStaff(staff) {
  // Put surgeon outfit on
  var screen, screen_x, screen_y = this.world->findObjectNear(staff, "surgeon_screen");
  staff->walkTo(screen_x, screen_y);
  staff->queueAction(wait_for_object(staff, screen, false));
  staff->queueAction(UseScreenAction(screen));

  // Resume operation if already ongoing
  if( this->isOperating() ) {
    var surgeon1 = next(this.staff_member_set);
    var ongoing_action = surgeon1->getCurrentAction();
    assert(ongoing_action.name == "multi_use_object");

    var table, table_x, table_y = this.world->findObjectNear(staff, "operating_table_b");
    this->queueWashHands(staff);
    staff->queueAction(WalkAction(table_x, table_y));
    staff->queueAction(this._buildTableAction2(ongoing_action, table));
  }

  this.staff_member_set[staff] = true;

  // Wait around for patients
  var loop_callback_more_patients = /*persistable:operatring_theatre_after_surgeon_clothes_on*/ function() {
    this.staff_member_set[staff] = "ready";
    this->tryAdvanceQueue();
  };
  staff->queueAction(MeanderAction()->setMustHappen(true)->setLoopCallback(loop_callback_more_patients));

  // Ensure that surgeons turn back into doctors when they leave
  staff->queueAction(WalkAction(screen_x, screen_y)->setMustHappen(true)->setIsLeaving(true)
      ->truncateOnHighPriority());
  staff->queueAction(UseScreenAction(screen)->setMustHappen(true)->setIsLeaving(true));

  return Room.commandEnteringStaff(this, staff, true);
}

function OperatingTheatreRoom::setStaffMembersAttribute(attribute, value) {
  for( staff_member, _ in pairs(this.staff_member_set) ) {
    staff_member[attribute] = value;
  }
}

// Returns the current staff member. if there are currently two surgeons it returns
// the one with higher tiredness.
function OperatingTheatreRoom::getStaffMember() {
  var staff;
  for( staff_member, _ in pairs(this.staff_member_set) ) {
    if( staff && ! staff.fired ) {
      if( staff.attributes["fatigue"] < staff_member.attributes["fatigue"] ) {
        staff = staff_member;
      }
    } else {
      staff = staff_member;
    }
  }
  return staff;
}

//! Builds the first operation action (i.e. with the surgeon whose we see the front).
//!param surgeon1 (Staff): the surgeon who does this operation action. He must
//! be the same as the surgeon who gets the action on his queue.
//!param patient (Patient): the patient to be operated.
//!param operation_table (OperatingTable): master object representing
//! the operation table.
function OperatingTheatreRoom::buildTableAction1(surgeon1, patient, operation_table) {
  var loop_callback_multi_use = /*persistable:operatring_theatre_multi_use_callback*/ function(_) {
    // dirty hack to make the truncated animation work
    surgeon1.animation_idx = null;
  };

  var after_use_table = /*persistable:operatring_theatre_table_after_use*/ function() {
    this->dealtWithPatient(patient);
    // Tell the patient that it's time to leave, but only if the first action
    // is really an idle action.
    if( patient->getCurrentAction().name == "idle" ) {
      patient->finishAction();
    }
  };

  return MultiUseObjectAction(operation_table, patient)->setProlongedUsage(true)
      ->setLoopCallback(loop_callback_multi_use)->setAfterUse(after_use_table)
      ->setMustHappen(true)->disableTruncate();
}

//! Sends the surgeon to the nearest operation sink ("op_sink1")
//! and makes him wash his hands
//!param at_front (boolean): If true, add the actions at the front the action queue.
//! Add the actions at the end of the queue otherwise.
//! Default value is true.
function OperatingTheatreRoom::queueWashHands(surgeon, at_front) {
  var sink, sink_x, sink_y = this.world->findObjectNear(surgeon, "op_sink1");
  var walk = WalkAction(sink_x, sink_y)->setMustHappen(true)->disableTruncate();
  var wait = wait_for_object(surgeon, sink, true);
  var wash = UseObjectAction(sink)->setMustHappen(true);

  for( pos, action in pairs({walk, wait, wash}) ) {
    if( (at_front) ) {
      surgeon->queueAction(action, pos);
    } else {
      surgeon->queueAction(action);
    }
  }
}

//! Turn on/off x-ray viewer - if it's been found
//!param turn_on (boolean): true to switch on and false to switch off
function OperatingTheatreRoom::setXRayOn(turn_on) {
  if( this.x_ray_viewer ) {
    this.x_ray_viewer->setLayer(11, (turn_on && 2 || 0));
  }
}

function OperatingTheatreRoom::commandEnteringPatient(patient) {
  // Turn on x-ray viewer
  this->setXRayOn(true);

  // Identify the staff
  var surgeon1 = next(this.staff_member_set);
  var surgeon2 = next(this.staff_member_set, surgeon1);
  assert(surgeon1 && surgeon2, "Not enough staff in operating theatre");

  // Patient changes into surgical gown
  var screen, sx, sy = this.world->findObjectNear(patient, "surgeon_screen");
  patient->walkTo(sx, sy);
  patient->queueAction(UseScreenAction(screen));

  // Meanwhile, surgeons wash their hands
  // TODO: They sometimes overlap each other when doing that. Can we avoid that?
  this->queueWashHands(surgeon1, true);
  this->queueWashHands(surgeon2, true);

  var num_ready = {0};
  //--- BEGIN Save game compatibility -----
  // These function are merely for save game compatibility.
  // And they does not participate in the current game logic.
  // Do not move or edit
  var /*persistable:operatring_theatre_wait_for_ready*/ function wait_for_ready(action) {
    action.on_interrupt = null;
    if( ! action.done_ready ) {
      num_ready[1] = num_ready[1] + 1;
      action.done_ready = true;
    }
    if( num_ready[1] == 3 ) {
      surgeon1->finishAction();
      surgeon2->finishAction();
    }
  }
  var after_use = /*persistable:operatring_theatre_after_multi_use*/ function() {
    this->dealtWithPatient(patient);
    patient->finishAction();
  };
  //--- END Save game compatibility -----

  var /*persistable:operatring_theatre_operation_standby*/ function operation_standby(action, humanoid) {
    action.on_interrupt = null;
    if( ! action.done_ready ) {
      num_ready[1] = num_ready[1] + 1;
      action.done_ready = true;
    }
    if( this.staff_member_set[humanoid] && this.staff_member_set[humanoid] == "abort" ) {
      humanoid->finishAction();
    } else if( num_ready[1] == 3 ) {
      // Only if everyone (2 Surgeons and Patient) ready, we schedule the operation action
      var obj, _, _ = this.world->findObjectNear(surgeon1, "operating_table");

      var table_action1 = this->buildTableAction1(surgeon1, patient, obj);
      surgeon1->queueAction(table_action1, 1);

      obj, _, _ = this.world->findObjectNear(surgeon2, "operating_table_b");
      surgeon2->queueAction(this._buildTableAction2(table_action1, obj), 1);

      // Kick off
      surgeon1->finishAction();
      surgeon2->finishAction();
    }
  }

  //-- Everyone standby...and sync start the operation
  //
  // first surgeon walk over to the operating table
  var obj, ox, oy = this.world->findObjectNear(surgeon1, "operating_table");
  surgeon1->queueAction(WalkAction(ox, oy)->setMustHappen(true)->disableTruncate(), 4);
  surgeon1->queueAction(IdleAction()->setLoopCallback(operation_standby)->setMustHappen(true), 5);

  // Patient walk to the side of the operating table
  ox, oy = obj->getSecondaryUsageTile();
  patient->queueAction(WalkAction(ox, oy)->setMustHappen(true)->disableTruncate());
  patient->queueAction(IdleAction()->setLoopCallback(operation_standby)->setMustHappen(true));

  // Patient changes out of the gown afterwards
  patient->queueAction(WalkAction(sx, sy)->setMustHappen(true)->disableTruncate());
  patient->queueAction(UseScreenAction(screen)->setMustHappen(true));

  // Meanwhile, second surgeon walks over to other side of operating table
  var _;
  _, ox, oy = this.world->findObjectNear(surgeon1, "operating_table_b");
  surgeon2->queueAction(WalkAction(ox, oy)->setMustHappen(true)->disableTruncate(), 4);
  surgeon2->queueAction(IdleAction()->setLoopCallback(operation_standby)->setMustHappen(true), 5);

  return Room.commandEnteringPatient(this, patient);
}

function OperatingTheatreRoom::onHumanoidLeave(humanoid) {
  this.staff_member_set[humanoid] = null;

  if( class.is(humanoid, Patient) ) {
    // Turn off x-ray viewer
    // (FIXME: would be better when patient dress back?)
    this->setXRayOn(false);

    var surgeon1 = next(this.staff_member_set);
    var surgeon2 = next(this.staff_member_set, surgeon1);
    if( surgeon1 ) {
      this.staff_member_set[surgeon1] = "abort";
    }
    if( surgeon2 ) {
      this.staff_member_set[surgeon2] = "abort";
    }
  }
  return Room.onHumanoidLeave(this, humanoid);
}

function OperatingTheatreRoom::canHumanoidEnter(humanoid) {
  var can = Room.canHumanoidEnter(this, humanoid);
  if( can && class.is(humanoid, Patient) ) {
    // Patients can only enter once all doctors are in surgeon clothes
    for( staff, is_ready in pairs(this.staff_member_set) ) {
      if( staff.humanoid_class == "Doctor" || is_ready != "ready" ) {
        return false;
      }
    }
  }
  return can;
}

return room;
