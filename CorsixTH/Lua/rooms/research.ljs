/* Copyright (c) 2009 Manuel KÃ¶nig

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

var room = {};
room.id = "research";
room.level_config_id = 28;
room.class = "ResearchRoom";
room.name = _S.rooms_short.research_room;
room.long_name = _S.rooms_long.research_room;
room.tooltip = _S.tooltip.rooms.research_room;
room.objects_additional = {
  "extinguisher",
  "radiator",
  "plant",
  "bin",
  "computer",
  "desk",
  "cabinet",
  "analyser" };
room.objects_needed = { desk = 1, cabinet = 1, autopsy = 1 };
room.build_preview_animation = 5102;
room.categories = {
  facilities = 2,
};
room.minimum_size = 5;
room.wall_type = "green";
room.floor_tile = 21;
room.required_staff = {
  Researcher = 1,
};
room.call_sound = "reqd023.wav";

class ("ResearchRoom") (Room);

//-@type ResearchRoom
var ResearchRoom = _G["ResearchRoom"];

function ResearchRoom::ResearchRoom(...) {
  this->Room(...);
  this.staff_member_set = {};
}

var staff_usage_objects = {
  desk = true,
  cabinet = true,
  computer = true,
  analyser = true,
  // Not autopsy: it should be free for when a patient arrives
};

function ResearchRoom::doStaffUseCycle(staff, previous_object) {
  var obj, ox, oy = this.world->findFreeObjectNearToUse(staff,
    staff_usage_objects, "near", previous_object);

  if( obj ) {
    obj.reserved_for = staff;
    staff->walkTo(ox, oy);
    if( obj.object_type.id == "desk" ) {
      var desk_use_time = math.random(7, 14);
      var loop_callback_desk = /*persistable:research_desk_loop_callback*/ function(action) {
        --desk_use_time    ;
        if( action.todo_interrupt || desk_use_time == 0 ) {
          action.prolonged_usage = false;
        }
      };

      var after_use_desk = /*persistable:research_desk_after_use*/ function() {
        // TODO: Should interactions give points?
        this.hospital.research->addResearchPoints(100);
      };

      staff->queueAction(UseObjectAction(obj)->setLoopCallback(loop_callback_desk)
          ->setAfterUse(after_use_desk));
    } else {
      var after_use_obj = /*persistable:research_obj_after_use*/ function() {
        if( obj.object_type.id == "computer" ) {
          this.hospital.research->addResearchPoints(500);
        } else if( obj.object_type.id == "analyser" ) {
          this.hospital.research->addResearchPoints(800);
          // TODO: Balance value, find it in level config?
        }
      };

      staff->queueAction(UseObjectAction(obj)->setAfterUse(after_use_obj));
    }
  }

  var num_meanders = math.random(2, 4);
  var loop_callback_meander = /*persistable:research_meander_loop_callback*/ function(action) {
    --num_meanders    ;
    if( num_meanders == 0 ) {
      this->doStaffUseCycle(staff);
    }
  };

  staff->queueAction(MeanderAction()->setLoopCallback(loop_callback_meander));
}

function ResearchRoom::roomFinished() {
  var fx, fy = this->getEntranceXY(true);
  var objects = this.world->findAllObjectsNear(fx, fy);
  var number = 0;
  for( object, _ in pairs(objects) ) {
    // The number of desks in the room determines how many researchers
    // can work there at once.
    if( object.object_type.id == "desk" ) {
      ++number    ;
    }
  }
  this.maximum_staff = {
    Researcher = number,
  };
  // Is this the first research department built?
  if( ! this.hospital.research_dep_built && ! TheApp.using_demo_files ) {
    this.hospital.research_dep_built = true;
    this.world.ui.adviser->say(_A.information.initial_general_advice
    .research_now_available);
  }
  // Also check if it would be good to hire a researcher.
  if( ! this.hospital->hasStaffOfCategory("Researcher") ) {
    this.world.ui.adviser->say(_A.room_requirements.research_room_need_researcher);
  }
  return Room.roomFinished(this);
}

function ResearchRoom::getMaximumStaffCriteria() {
  return this.maximum_staff;
}

function ResearchRoom::commandEnteringStaff(staff) {
  this.staff_member_set[staff] = true;
  this->doStaffUseCycle(staff);
  return Room.commandEnteringStaff(this, staff, true);
}

function ResearchRoom::commandEnteringPatient(patient) {
  var staff = next(this.staff_member_set);
  var autopsy, stf_x, stf_y = this.world->findObjectNear(patient, "autopsy");
  var pat_x, pat_y = autopsy->getSecondaryUsageTile();
  patient->walkTo(pat_x, pat_y);
  patient->queueAction(IdleAction()->setDirection("east"));
  staff->walkTo(stf_x, stf_y);

  var after_use_autopsy = /*persistable:autopsy_after_use*/ function() {
    this->commandEnteringStaff(staff);
    // Patient dies :(
    this->onHumanoidLeave(patient);
    // Some research is done. :) Might trigger a loss of reputation though.
    var hosp = this.hospital;
    var patient_room = patient.disease.treatment_rooms[#patient.disease.treatment_rooms];
    hosp.research->addResearchPoints("dummy", patient_room);
    if( ! hosp.autopsy_discovered && hosp.discover_autopsy_risk > math.random(1, 100) ) {
      // Can only be discovered once.
      hosp.autopsy_discovered = true;
      hosp->changeReputation("autopsy_discovered");
      hosp.world.ui.adviser->say(_A.research.autopsy_discovered_rep_loss);
    } else {
      // The risk increases after each use.
      // TODO: Should it ever become 100%?
      this.hospital.discover_autopsy_risk = this.hospital.discover_autopsy_risk + 10;
    }
    if( patient.hospital ) {
      hosp->removePatient(patient);
    }
    patient.world->destroyEntity(patient);
  };

  staff->queueAction(MultiUseObjectAction(autopsy, patient)->setAfterUse(after_use_autopsy));
  return Room.commandEnteringPatient(this, patient);
}

// Returns the staff member with the minimum amount of skill.
function ResearchRoom::getStaffMember() {
  var staff;
  for( staff_member, _ in pairs(this.staff_member_set) ) {
    if( staff && ! staff.fired ) {
      if( staff.profile.skill > staff_member.profile.skill ) {
        staff = staff_member;
      }
    } else {
      staff = staff_member;
    }
  }
  return staff;
}

function ResearchRoom::setStaffMember(staff) {
  this.staff_member_set[staff] = true;
}

function ResearchRoom::setStaffMembersAttribute(attribute, value) {
  for( staff_member, _ in pairs(this.staff_member_set) ) {
    staff_member[attribute] = value;
  }
}

function ResearchRoom::onHumanoidLeave(humanoid) {
  this.staff_member_set[humanoid] = null;
  Room.onHumanoidLeave(this, humanoid);
}

function ResearchRoom::afterLoad(old, new) {
  if( old < 56 ) {
    this.hospital.research_dep_built = true;
  }
}
return room;
