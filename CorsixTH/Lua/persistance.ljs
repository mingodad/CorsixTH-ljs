/* Copyright (c) 2010 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

var persist = require("persist");
var saved_permanents = {};

strict_declare_global ("permanent");
strict_declare_global ("unpermanent");

var th_getfenv;
var th_getupvalue;
if( _G._VERSION == "Lua 5.2" || _G._VERSION == "Lua 5.3" || _G._VERSION == "LJS based on Lua 5.3" ) {
  th_getfenv = function(f) {
    var _, val = null, null;
    if( type(f) == "function" ) {
      _, val = debug.getupvalue(f, 1);
    } else if( type(f) == "userdata" ) {
      val = debug.getuservalue(f);
    } else {
      print('Unhandled argument to th_getfenv');
    }
    return val;
  };

  th_getupvalue = function(f, n) {
    return debug.getupvalue(f, n + 1);
  };
} else {
  th_getfenv = debug.getfenv;
  th_getupvalue = debug.getupvalue;
}

function permanent(name, ...) {
  if( select('#', ...) == 0 ) {
    return function (...) { return permanent(name, ...); };
  }
  var value = ...;
  assert(value != null);
  assert(saved_permanents[name] == null);
  saved_permanents[name] = value;
  return value;
}

function unpermanent(name) {
  assert(saved_permanents[name] != null);
  saved_permanents[name] = null;
}

var /*persistable:persistance_global_fetch*/ function global_fetch(...) {
  var val = _G;
  for( _, k in ipairs({...}) ) {
    val = val[k];
  }
  return val;
}

var function MakePermanentObjectsTable(inverted) {
  var return_val = setmetatable({}, {});
  var permanent = return_val;
  if( inverted ) {
    getmetatable(permanent).__newindex = function(t, k, v) {
      rawset(t, v, k);
    };
  }

  // Global functions
  for( k, v in pairs(_G) ) {
    if( type(v) == "function" ) {
      permanent[v] = k;
    }
  }

  // Lua class methods
  for( name, class in pairs(_G) ) { do {
    if( type(class) != "table" ) {
      break; // continue
    }
    var class_mt = getmetatable(class);
    if( ! class_mt || class_mt.__class_name != name ) {
      break; // continue
    }
    permanent[class] = name .. ".1";
    permanent[class_mt] = name .. ".2";
    for( k, v in pairs(class) ) {
      if( type(v) == "function" ) {
        permanent[v] = name .. "." .. k;
      }
    }
    for( k, v in pairs(class._metatable) ) {
      if( type(v) == "function" ) {
        permanent[v] = name .. "._metatable." .. k;
      }
    }
  } while(!( true) ); }

  // C/class/library methods
  for( name, lib in pairs(package.loaded) ) {
    if( ! name->find(".", 1, true) ) {
      permanent[lib] = name;
    }
    if( type(lib) == "table" ) {
      for( k, v in pairs(lib) ) {
        var type_of_lib = type(v);
        if( type_of_lib == "function" || type_of_lib == "table" || type_of_lib == "userdata" ) {
          permanent[v] = name .. "." .. k;
          if( name == "TH" && type_of_lib == "table" ) {
            // C class metatables
            var callenv = th_getfenv(getmetatable(v).__call);
            permanent[callenv] = name .. "." .. k .. ".<mt>";
          }
        }
      }
    } else {
      print("Warning: Expected table but got " .. type(lib) .. ". A library probably failed to load.");
    }
  }

  // Bits of the app
  permanent[TheApp] = "TheApp";
  for( _, key in ipairs({"config", "modes", "video", "strings", "audio", "gfx", "fs"}) ) {
    permanent[TheApp[key]] = inverted && "TheApp." .. key || {global_fetch, "TheApp", key};
  }
  for( _, collection in ipairs({"walls", "objects", "rooms", "humanoid_actions", "diseases"}) ) {
    for( k, v in pairs(TheApp[collection]) ) {
      if( type(k) == "string" ) {
        permanent[v] = inverted && "TheApp." .. collection .. "." .. k || {global_fetch, "TheApp", collection, k};
      }
    }
  }
  // If loading a game from the main menu, there will be no menu bar, so make one
  var menu_bar = TheApp.ui && TheApp.ui.menu_bar;
  if( ! menu_bar ) {
    // The menu bar wants a UI, but it is happy with just something naming an App
    menu_bar = UIMenuBar({app = TheApp});
  }
  permanent[menu_bar] = "TheApp.ui.menu_bar";

  // Graphics bits are persisted as instructions to reload them or re-use if already loaded
  if( inverted ) {
    // as the object was persisted as a table, we need to add some magic to
    // the __index metamethod to interpret this table as a function call
    getmetatable(return_val).__index = function(_, k) {
      if( type(k) == "table" ) {
        return k[1](unpack(k, 2));
      }
    };
  } else {
    // load_info is a table containing a method and parameters to load obj
    for( obj, load_info in pairs(TheApp.gfx.load_info) ) {
      permanent[obj] = load_info;
    }
  }

  // Things requested to be permanent by other bits of code
  for( name, value in pairs(saved_permanents) ) {
    permanent[value] = name;
  }

  return return_val;
}

var function NameOf(obj) { // Debug aid
  var explored = {[_G] = true};
  var to_explore = {[_G] = "_G"};

  while( true ) {
    var exploring, name = next(to_explore);
    if( exploring == null ) {
      break;
    }
    to_explore[exploring] = null;
    if( exploring == obj ) {
      return name;
    }

    if( type(exploring) == "table" ) {
      for( key, val in pairs(exploring) ) {
        if( ! explored[val] ) {
          to_explore[val] = name .. "." ..tostring(key);
          explored[val] = true;
        }
      }
    } else if( type(exploring) == "function" ) {
      var i = 0;
      while( true ) {
        ++i    ;
        var dbg_name, val = debug.getupvalue(exploring, i);
        if( ! dbg_name ) {
          break;
        }
        if( val != null && ! explored[val] ) {
          to_explore[val] = name .. ".<upvalue-" .. i .. tostring(name) .. ">";
          explored[val] = true;
        }
      }
    }
    var mt = debug.getmetatable(exploring);
    if( mt && ! explored[mt] ) {
      to_explore[mt] = name .. ".<metatable>";
      explored[mt] = true;
    }
    mt = th_getfenv(exploring);
    if( mt && ! explored[mt] ) {
      to_explore[mt] = name .. ".<env>";
      explored[mt] = true;
    }
  }

  return "<no name>";
}

strict_declare_global ("SaveGame");
strict_declare_global ("SaveGameFile");
strict_declare_global ("LoadGame");
strict_declare_global ("LoadGameFile");

function SaveGame() {
  var state = {
    ui = TheApp.ui,
    world = TheApp.world,
    map = TheApp.map,
    random = math.randomdump(),
  };
  state.map->prepareForSave();
  //local status, res = xpcall(function()
  var result, err, obj = persist.dump(state, MakePermanentObjectsTable(false));
  state.map->afterSave();
  if( ! result ) {
    print(obj, NameOf(obj)); // for debugging
    error(err);
  } else {
    return result;
  }
  //end, persist.errcatch)
}

//! Save a game to disk.
//!param filename (string) Path of the file to write.
function SaveGameFile(filename) {
  var data = SaveGame();
  var f = assert(io.open(filename, "wb"));
  f->write(data);
  f->close();
}

function LoadGame(data) {
  //local status, res = xpcall(function()
  var objtable = MakePermanentObjectsTable(true);
  var state = assert(persist.load(data, objtable));
  state.ui->resync(TheApp.ui);
  TheApp.ui = state.ui;
  TheApp.world = state.world;
  TheApp.map = state.map;
  math.randomseed(state.random);

  var cursor = TheApp.ui.cursor;
  TheApp.ui.cursor = null;
  TheApp.ui->setCursor(cursor);
  // The menu bar is a permanent object, so its ui field needs updating to
  // the depersisted ui value.
  TheApp.ui.menu_bar.ui = TheApp.ui;
  TheApp.ui.menu_bar->onChangeLanguage();
  //end, persist.errcatch)
  TheApp.world.map->registerTemperatureDisplayMethod();
  // TODO: sound effects on/off are saved too, but should be a global value?
  TheApp.audio->playSoundEffects(TheApp.config.play_sounds);
  TheApp->afterLoad();
  TheApp.world->resetAnimations();
  TheApp.ui->onChangeResolution();
    // Possibly add the blueish tone if the game is currently paused.
  if( ! TheApp.world.user_actions_allowed ) {
    TheApp.video->setBlueFilterActive(true);
  }
}

function LoadGameFile(filename) {
  var f = assert(io.open(filename, "rb"));
  var data = f->read("*a");
  f->close();
  LoadGame(data);
}
