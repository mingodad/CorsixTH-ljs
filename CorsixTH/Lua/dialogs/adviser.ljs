/* Copyright (c) 2009 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

var TH = require("TH");

//! The (ideally) helpful advisor who pops up from the bottom dialog during a game.
class ("UIAdviser") (Window);

//-@type UIAdviser
var UIAdviser = _G["UIAdviser"];

function UIAdviser::UIAdviser(ui) {
  this->Window();

  var app = ui.app;

  this.esc_closes = false;
  this.modal_class = "adviser";
  this.tick_rate = app.world.tick_rate;
  this.tick_timer = this.tick_rate; // Initialize tick timer
  this.frame = 1;                   // Current frame
  this.number_frames = 4;           // Used for playing animation only once
  this.speech = null;                // Store what adviser is going to say
  this.queued_messages = {};        // There might be many messages in a row
  this.timer = null;                 // Timer which hides adviser at the end

  // There are 5 phases the adviser might be in on a given time point.
  // Not visible, getting up, talking, idling, getting_down.
  this.phase = 0;

  this.ui = ui;
  this.width = 80;
  this.height = 74;
  this.x = 378;
  this.y = -16;
  this.balloon_width = 0;
  this.panel_sprites = app.gfx->loadSpriteTable("Data", "Panel02V", true);
  this.black_font = app.gfx->loadFont("QData", "Font50V");

  var th = TH.animation();
  this.th = th;
}

// Shows the adviser by running the "popup" animation.
// Then moves on to the next phase automatically.
function UIAdviser::show() {
  this.phase = 1;
  this.th->setAnimation(this.ui.app.world.anims, 438);
  this.frame = 1;
  this.number_frames = 4;
}

// Displays the text bubble along with the next message
// from the queue.
function UIAdviser::talk() {
  this.phase = 2;
  this.th->setAnimation(this.ui.app.world.anims, 460);
  this.frame = 1;
  this.timer = null; // Reset the idle timer
  this.number_frames = 45;
  // Fetch the next message from the queue.
  var best = 1;
  if( this.queued_messages[1].priority ) {
    for( i = 1, #this.queued_messages ) {
      if( best != i && this.queued_messages[best].priority < this.queued_messages[i].priority ) {
        best = i;
      }
    }
  }
  var speech = this.queued_messages[best].speech;
  this.stay_up = this.queued_messages[best].stay_up;
  table.remove(this.queued_messages, best);
  this.speech = speech;
  // Calculate number of lines needed for the text.
  // Each "/" at end of string indicates a blank line
  var number_lines = 3;
  var speech_trimmed = speech->gsub("/*$", "");
  number_lines = number_lines - (#speech - #speech_trimmed);
  speech = speech_trimmed;

  // Calculate balloon width from string length
  this.balloon_width = math.floor(#speech / number_lines) * 7;
  if( this.balloon_width >= 420 ) { // Balloon too large
    this.balloon_width = 420;
  } else if( this.balloon_width <= 40 ) { // Balloon too small
    this.balloon_width = 40;
  }
}

// Makes the adviser idle for a while before disappearing.
// This means that the text bubble is removed.
function UIAdviser::idle() {
  this.phase = 3;
  // Remove the bubble and start a timer for disappearance
  // unless he should stay up until the next message.
  if( ! this.stay_up ) {
    this.speech = null;
    this.timer = 150;
  }
}

// Hides the adviser by running the appropriate animation.
function UIAdviser::hide() {
  this.timer = null;
  this.phase = 4;
  this.th->setAnimation(this.ui.app.world.anims, 440);
  this.frame = 1;
  this.number_frames = 4;
}

// Makes the adviser say something
//!param speech The table containing the text he should say and the priority.
//!param talk_until_next_announce Whether he should stay up
// until the next say() call is made. Useful for the tutorial.
//!param override_current Cancels previous messages (if any) immediately
// and shows this new one instead.
function UIAdviser::say(speech, talk_until_next_announce, override_current) {
  assert(type(speech) == "table");
  if( ! this.ui.app.config.adviser_disabled ) {
    // Queue the new message
    this.queued_messages[#this.queued_messages + 1] = {
      speech = speech.text,
      stay_up = talk_until_next_announce,
      priority = speech.priority
    };
    if( this.phase == 0 ) {
      // The adviser is not active at all at the moment.
      this->show();
    } else if( this.phase == 3 ) {
      // He's not talking, so we can show the new message.
      this->talk();
    } else if( this.phase == 4 ) {
      // He's getting down. Let him do that and then tell him
      // to go up again.
      this.up_again = true;
    } else if( override_current ) {
      // He was saying/was about to say something else. Discard those messages.
      while( #this.queued_messages > 1 ) {
        table.remove(this.queued_messages, 2);
      }
      // Now say the new thing instead.
      this->talk();
    }
    // If none of the above apply the message is now queued and will be shown in
    // due time.
  }
}

function UIAdviser::draw(canvas, x, y) {
  Window.draw(this, canvas, x, y);

  x, y = x + this.x, y + this.y;
  this.th->draw(canvas, x + 200, y);
  if( this.phase == 2 ) {
    // Draw ballon only in the "talk" phase.
    var x_left_sprite;
    for( dx = 0, this.balloon_width, 16 ) {
      x_left_sprite = x + 139 - dx;
      this.panel_sprites->draw(canvas, 38, x_left_sprite, y - 25);
    }
    this.panel_sprites->draw(canvas, 37, x_left_sprite - 16, y - 25);
    this.panel_sprites->draw(canvas, 39, x + 155, y - 40);
    // Draw text
    this.black_font->drawWrapped(canvas, this.speech, x_left_sprite - 8, y - 20, this.balloon_width + 60);
  }
}

function UIAdviser::onMouseDown(button, x, y) {
  // If the adviser is not up, don't do anything.
  if( this.phase == 0 || this.phase == 4 ) {
    return Window.onMouseDown(this, button, x, y);
  }
  // Normal operation outside the adviser bounds
  if( x + this.balloon_width < 128 || x > 200 ||
      y + this.y > 0 || y + this.y + 40 < 0 ) {
    if( x < this.x - 200 || y < this.y - 40 ||
        x > this.x - 200 + this.width || y > this.y + this.height - 40 ) {
      return Window.onMouseDown(this, button, x, y);
    }
  }

  // Dismiss the current message if left click. If right click,
  // dismiss the whole queue.
  if( button == "left" ) {
    if( #this.queued_messages > 0 ) {
      this->talk();
    } else {
      this->hide();
    }
  } else if( button == "right" ) {
    this->hide();
    this.queued_messages = {};
  }
}

function UIAdviser::onTick() {
  if( this.timer == 0 ) {
    this->hide(); // Timer ends, so we hide the adviser
  } else if( this.timer != null ) {
    this.timer = this.timer - 1;
  }
  if( this.frame < this.number_frames ) {
    if( this.tick_timer == 0 ) { // Used for making a smooth animation
      this.tick_timer = this.tick_rate;
      // If no animation set (adviser not being shown already)
      if( this.th->getAnimation() != 0 ) {
        this.th->tick();
        this.frame = this.frame + 1;
      }
    } else {
      this.tick_timer = this.tick_timer - 1;
    }
  } else if( this.frame == this.number_frames ) {
    if( this.phase == 1 ) {
      // Adviser is now up, let him speak.
      this->talk();
    } else if( this.phase == 2 ) {
      // Adviser finished to talk so make him idle unless
      // there's another message waiting.
      if( #this.queued_messages > 0 ) {
        // Show the next queued message
        this->talk();
      } else if( ! this.stay_up ) {
        // Continue to talk if stay_up is set
        this->idle();
      }
    } else if( this.phase == 4 ) {
      // The adviser is getting down so we want to hide him, but we have
      // to wait until the animation ends.
      if( this.up_again ) {
        // Another message arrived while getting down.
        this->show();
        this.up_again = false;
      } else {
        this.phase = 0;
        this.th->makeInvisible();
      }
    }
  }
}

function UIAdviser::afterLoad(old, new) {
  if( old < 47 ) {
    this.enabled = true;
  }
  Window.afterLoad(this, old, new);
}
