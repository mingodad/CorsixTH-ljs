/* Copyright (c) 2009 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

var TH = require("TH");

class ("UIBuildRoom") (Window);

//-@type UIBuildRoom
var UIBuildRoom = _G["UIBuildRoom"];

function UIBuildRoom::UIBuildRoom(ui) {
  this->Window();

  var app = ui.app;
  this.ui = ui;
  this.modal_class = "main";
  this.esc_closes = true;
  this.width = 297;
  this.height = 294;
  this->setDefaultPosition(0.5, 0.5);
  this.panel_sprites = app.gfx->loadSpriteTable("QData", "Req09V", true);
  this.white_font = app.gfx->loadFont("QData", "Font01V");
  this.blue_font = app.gfx->loadFont("QData", "Font02V");
  this.category_index = 0;
  this.list_hover_index = 0;
  this.preview_anim = false;
  this.default_button_sound = "selectx.wav";

  var function cat(n) {
    return /*persistable:build_room_set_category*/ function(window) {
      return window->setCategory(n);
    };
  }
  var room_n = 1;
  var function rm() {
    var n = room_n;
    ++room_n    ;
    return /*persistable:build_room_build_room*/ function(window) {
      return window->buildRoom(n);
    };
  }

  this->addPanel(210,   0,   0)->makeButton(9, 9, 129, 32, 211, cat(1))->setTooltip(_S.tooltip.build_room_window.room_classes.diagnosis);
  this->addPanel(212,   0,  41)->makeButton(9, 0, 129, 31, 213, cat(2))->setTooltip(_S.tooltip.build_room_window.room_classes.treatment);
  // Clinics should really be at y=73, but TH skips a pixel here
  // so that the left and right columns are the same height
  this->addPanel(214,   0,  72)->makeButton(9, 0, 129, 32, 215, cat(3))->setTooltip(_S.tooltip.build_room_window.room_classes.clinic);
  this->addPanel(216,   0, 104)->makeButton(9, 0, 129, 32, 217, cat(4))->setTooltip(_S.tooltip.build_room_window.room_classes.facilities);
  this->addPanel(218,   0, 146); // Grid top
  for( y = 179, 249, 10 ) {
    this->addPanel(219,   0,   y); // Grid body
  }
  this->addPanel(220,   0, 259); // Grid bottom
  this->addPanel(221, 146,   0); // List top
  for( y = 34, 205, 19 ) {
    this->addPanel(222, 146,   y)->makeButton(12, 0, 126, 19, 223, rm()) // List body
      .enabled = false;
  }

  // The close button has no sprite for when pressed, so it has to be custom drawn
  var build_room_dialog_close = TheApp.gfx->loadSpriteTable("Bitmap", "aux_ui", true);
  this->addPanel(224, 146, 224)->makeButton(8, 34, 134, 27, 224, this.close)->setTooltip(_S.tooltip.build_room_window.close)
  .panel_for_sprite.custom_draw = /*persistable:build_room_draw_close_button*/ function(panel, canvas, x, y) {
    x = x + panel.x;
    y = y + panel.y;
    panel.window.panel_sprites->draw(canvas, panel.sprite_index, x, y);
    var btn = panel.window.active_button;
    if( btn && btn.panel_for_sprite == panel && btn.active ) {
      build_room_dialog_close->draw(canvas, 1, x + 8, y + 34);
    }
  };

  this.list_title = _S.build_room_window.pick_department;
  this.cost_box = _S.build_room_window.cost .. "0";
  this.list = {};
  this.category_titles = {
    _S.room_classes.diagnosis,
    _S.room_classes.treatment,
    _S.room_classes.clinics,
    _S.room_classes.facilities
  };
  this.category_rooms = {
  };
  for( i, category in ipairs({"diagnosis", "treatment", "clinics", "facilities"}) ) {
    var rooms = {};
    this.category_rooms[i] = rooms;
    for( _, room in ipairs(app.world.available_rooms) ) {
      // NB: Unimplemented rooms are hidden unless in debug mode
      if( (app.config.debug || room.class) && room.categories[category] &&
          ui.hospital.discovered_rooms[room] ) {
        rooms[#rooms + 1] = room;
      }
    }
    table.sort(rooms, function(r1, r2) { return r1.categories[category] < r2.categories[category]; });
  }

  this->makeTooltip(_S.tooltip.build_room_window.cost, 160, 228, 282, 242);
}

var cat_label_y = {21, 53, 84, 116};

function UIBuildRoom::draw(canvas, x, y) {
  Window.draw(this, canvas, x, y);

  x, y = this.x + x, this.y + y;
  this.white_font->draw(canvas, this.list_title, x + 163, y + 18);
  for( i = 1, 4 ) {
    (i == this.category_index && this.blue_font || this.white_font)
      ->draw(canvas, this.category_titles[i], x + 19, y + cat_label_y[i]);
  }

  for( i, room in ipairs(this.list) ) {
    (i == this.list_hover_index && this.blue_font || this.white_font)
      ->draw(canvas, room.name, x + 163, y + 21 + i * 19);
  }

  this.white_font->draw(canvas, this.cost_box, x + 163, y + 232);

  if( this.preview_anim ) {
    this.preview_anim->draw(canvas, x + 70, y + 200);
  }
}

function UIBuildRoom::setCategory(index) {
  if( index == 1 ) {
    this.ui->tutorialStep(3, 2, 3);
  } else {
    this.ui->tutorialStep(3, 3, 2);
  }
  this.category_index = index;
  this.list_title = _S.build_room_window.pick_room_type;
  this.list = this.category_rooms[index];

  var last = #this.list + 5;
  for( i = 5, 14 ) {
    this.buttons[i].enabled = i < last;
    if( i < last ) {
      this.buttons[i]->setTooltip(this.list[i - 4].tooltip);
    } else {
      this.buttons[i]->setTooltip();
    }
  }
}

function UIBuildRoom::buildRoom(index) {
  var hosp = this.ui.hospital;
  var world = this.ui.app.world;

  if( index == 1 ) { this.ui->tutorialStep(3, 3, 4); }

  var cost = world.free_build_mode && 0 ||
      hosp.research.research_progress[this.list[index]].build_cost;
  if( world.free_build_mode || hosp.balance >= cost ) {
    // Close any full screen window currently open.
    var fullscreen = this.ui->getWindow(UIFullscreen);
    if( fullscreen ) {
      fullscreen->close();
    }
    var edit_dlg = UIEditRoom(this.ui, this.list[index]);
    this.ui->addWindow(edit_dlg);
  } else {
    // give visual warning that player doesn't have enough $ to build
    this.ui.adviser->say(_A.warnings.money_very_low_take_loan, false, true);
    this.ui->playSound("Wrong2.wav");
  }
}

function UIBuildRoom::onMouseMove(x, y, dx, dy) {
  var repaint = Window.onMouseMove(this, x, y, dx, dy);

  var hover_idx = 0;
  if( 156 <= x && x < 287 && 31 <= y && y < 226 ) {
    for( i = 5, 14 ) {
      var btn = this.buttons[i];
      if( btn.enabled && btn.x <= x && x < btn.r && btn.y <= y && y < btn.b ) {
        hover_idx = i - 4;
        break;
      }
    }
  }

  if( hover_idx != this.list_hover_index ) {
    this.ui->playSound("HLightP2.wav");
    if( hover_idx == 0 ) {
      this.cost_box = _S.build_room_window.cost .. "0";
      this.preview_anim = false;
    } else {
      var hosp = this.ui.hospital;
      var world = this.ui.app.world;
      var cost = world.free_build_mode && 0 ||
          hosp.research.research_progress[this.list[hover_idx]].build_cost;
      this.cost_box = _S.build_room_window.cost .. cost;
      this.preview_anim = TH.animation();
      this.preview_anim->setAnimation(this.ui.app.anims, this.list[hover_idx].build_preview_animation);
    }
    this.list_hover_index = hover_idx;
    repaint = true;
  }

  return repaint;
}

function UIBuildRoom::close() {
  this.ui->tutorialStep(3, {2, 3}, 1);
  return Window.close(this);
}
