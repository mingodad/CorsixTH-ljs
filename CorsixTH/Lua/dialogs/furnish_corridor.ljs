/* Copyright (c) 2009 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

var TH = require("TH");
var math_floor
    = math.floor;

//! Dialog for purchasing `Object`s (for the corridor or for rooms).
class ("UIFurnishCorridor") (Window);

//-@type UIFurnishCorridor
var UIFurnishCorridor = _G["UIFurnishCorridor"];

function UIFurnishCorridor::UIFurnishCorridor(ui, objects, edit_dialog) {
  this->Window();

  var app = ui.app;
  if( edit_dialog ) {
    this.modal_class = "furnish";
    this.edit_dialog = edit_dialog;
  } else {
    this.modal_class = "main";
  }
  this.esc_closes = true;
  this.ui = ui;
  this.anims = app.anims;
  this.width = 360;
  this.height = 274;
  this->setDefaultPosition(0.5, 0.4);
  this.panel_sprites = app.gfx->loadSpriteTable("QData", "Req10V", true);
  this.white_font = app.gfx->loadFont("QData", "Font01V");
  this.blue_font = app.gfx->loadFont("QData", "Font02V");
  this.title_text = _S.buy_objects_window.choose_items;
  this.price_text = (_S.buy_objects_window.price .. " ")->gsub("  $", " ");
  this.total_text = (_S.buy_objects_window.total .. " ")->gsub("  $", " ");
  this.item_price = 0;
  this.total_price = 0;

  this.list_hover_index = 0;
  this.preview_anim = TH.animation();

  this.objects = {
  };
  if( objects ) {
    for( _, object in pairs(objects) ) {
      this.objects[#this.objects + 1] = {object = object.object, start_qty = object.qty, qty = object.qty, min_qty = object.min_qty}; // Had to make a copy of objects list. Otherwise, we will modify the original variable (Opening dialog twice keeps memory of previously chosen quantities)
    }
  } else {
    for( _, object in ipairs(app.objects) ) {
      if( object.corridor_object ) {
        this.objects[#this.objects + 1] = {object = object, start_qty = 0, qty = 0, min_qty = 0};
      }
    }
    table.sort(this.objects, function(o1, o2) {
      return o1.object.corridor_object < o2.object.corridor_object;
    });
  }

  this->addPanel(228, 0, 0); // Grid top
  for( y = 33, 103, 10 ) {
    this->addPanel(229, 0, y); // Grid body
  }
  this->addPanel(230, 0, 113); // Grid bottom
  this->addPanel(231, 0, 148); // Cost / total top
  this->addPanel(232, 0, 173); // Cost / total body
  this->addPanel(233, 0, 215); // Cost / total bottom
  this->addPanel(234, 0, 248); // Close button background
  this->addPanel(234, 0, 252); // Close button background extension
  this->addPanel(242, 9, 237)->makeButton(0, 0, 129, 28, 243, this.close)->setTooltip(_S.tooltip.buy_objects_window.cancel);

  this->addPanel(235, 146, 0); // List top
  this->addPanel(236, 146, 223); // List bottom
  this->addPanel(237, 154, 238)->makeButton(0, 0, 197, 28, 238, this.confirm)->setTooltip(_S.tooltip.buy_objects_window.confirm);
  var i = 1;
  var function item_callback(index, qty) {
    var is_negative_quantity = qty < 0;
    return /*persistable:furnish_corridor_item_callback*/ function(window) {
      if( window->purchaseItem(index, qty) == 0 && ! is_negative_quantity ) {
        // give visual warning that player doesn't have enough $ to buy
        window.ui.adviser->say(_A.warnings.cannot_afford_2, false, true);
        window.ui->playSound("wrong2.wav");
      } else if( qty > 0 ) {
        window.ui->playSound("AddItemJ.wav");
      } else {
        window.ui->playSound("DelItemJ.wav");
      }
    };
  }
  for( y = 34, 205, 19 ) {
    var x = 146;
    this->addPanel(239, x, y); // List body
    if( i <= #this.objects ) {
      this->addPanel(240, x + 12, y)->makeButton(0, 0, 125, 19, 241, item_callback(i, 1), null, item_callback(i, -1))->setTooltip(this.objects[i].object.tooltip);
      this->addPanel(244, x + 139, y + 1)->makeRepeatButton(0, 0, 17, 17, 245, item_callback(i, -1))->setTooltip(_S.tooltip.buy_objects_window.decrease);
      this->addPanel(246, x + 183, y + 1)->makeRepeatButton(0, 0, 17, 17, 247, item_callback(i, 1))->setTooltip(_S.tooltip.buy_objects_window.increase);
    }
    ++i    ;
  }

  this->makeTooltip(_S.tooltip.buy_objects_window.price,       20, 168, 127, 187);
  this->makeTooltip(_S.tooltip.buy_objects_window.total_value, 20, 196, 127, 215);

  this->addKeyHandler("return", this.confirm);
  this->addKeyHandler("keypad enter", this.confirm);
}

function UIFurnishCorridor::purchaseItem(index, quantity) {
  var o = this.objects[index];
  var is_negative_quantity = quantity < 0;
  if( this.ui.app.key_modifiers.ctrl ) {
    quantity *=   10;
  } else if( this.ui.app.key_modifiers.shift ) {
    quantity *=   5;
  }
  quantity = quantity + o.qty;
  if( quantity < o.min_qty ) {
    quantity = o.min_qty;
  } else if( quantity > 99 ) {
    quantity = 99;
  }
  quantity = quantity - o.qty;
  var hospital = this.ui.hospital;
  if( hospital.balance >= this.total_price + quantity * hospital->getObjectBuildCost(o.object.id) || is_negative_quantity ) {
    o.qty = o.qty + quantity;
    this.total_price = this.total_price + quantity * hospital->getObjectBuildCost(o.object.id);
    if( o.object.id == "reception_desk" ) {
      if( o.qty > 0 ) {
        this.ui->tutorialStep(1, 2, 3);
      } else {
        this.ui->tutorialStep(1, 3, 2);
      }
    }
  } else {
    quantity = 0;
  }
  return quantity;
}

function UIFurnishCorridor::confirm() {
  this.ui->tutorialStep(1, 3, 4);

  var to_purchase = {};
  var to_sell = {};
  for( _, o in ipairs(this.objects) ) {
    var build_cost = this.ui.hospital->getObjectBuildCost(o.object.id);
    if( o.qty - o.start_qty > 0 ) {
      var diff_qty = o.qty - o.start_qty;
      to_purchase[#to_purchase + 1] = { object = o.object, qty = diff_qty };
      this.ui.hospital->spendMoney(build_cost * diff_qty, _S.transactions.buy_object .. ": " .. o.object.name, build_cost * diff_qty);
    } else if( o.qty - o.start_qty < 0 ) {
      var diff_qty = o.start_qty - o.qty;
      to_sell[#to_sell + 1] = { object = o.object, qty = diff_qty };
      this.ui.hospital->receiveMoney(build_cost * diff_qty, _S.transactions.sell_object .. ": " .. o.object.name, build_cost * diff_qty);
    }
  }

  if( this.edit_dialog ) {
    this.edit_dialog->addObjects(to_purchase, false); // payment already handled here
    this.edit_dialog->removeObjects(to_sell, false); // payment already handled here
    this->close();
  } else {
    if( #to_purchase == 0 ) {
      this->close();
    } else {
      this.ui->addWindow(UIPlaceObjects(this.ui, to_purchase));
    }
  }
}

function UIFurnishCorridor::close() {
  this.ui->tutorialStep(1, {2, 3}, 1);
  if( this.edit_dialog ) {
    this.edit_dialog->addObjects(); // No objects added. Call the function anyway to handle visibility etc.
  }
  Window.close(this);
}

function UIFurnishCorridor::draw(canvas, x, y) {
  Window.draw(this, canvas, x, y);

  x, y = x + this.x, y + this.y;
  this.white_font->draw(canvas, this.title_text, x + 163, y + 18);
  this.white_font->draw(canvas, this.price_text .. this.item_price, x + 24, y + 173);
  this.white_font->draw(canvas, this.total_text .. this.total_price, x + 24, y + 202);

  for( i, o in ipairs(this.objects) ) {
    var font = this.white_font;
    if( i == this.list_hover_index ) {
      font = this.blue_font;
    }
    font->draw(canvas, o.object.name, x + 163, y + 20 + i * 19);
    font->draw(canvas, o.qty, x + 306, y + 20 + i * 19, 19, 0);
  }

  this.preview_anim->draw(canvas, x + 72, y + 57);
}

function UIFurnishCorridor::onMouseMove(x, y, dx, dy) {
  var repaint = Window.onMouseMove(this, x, y, dx, dy);

  var hover_idx = 0;
  if( 158 <= x && x < 346 && 34 <= y && y < 224 ) {
    hover_idx = math_floor((y - 15) / 19);
  }

  if( hover_idx != this.list_hover_index ) {
    if( 1 <= hover_idx && hover_idx <= #this.objects ) {
      var obj = this.objects[hover_idx].object;
      this.item_price = this.ui.hospital->getObjectBuildCost(obj.id);
      this.preview_anim->setAnimation(this.anims, obj.build_preview_animation);
    }
    this.list_hover_index = hover_idx;
    repaint = true;
  }

  return repaint;
}

function UIFurnishCorridor::afterLoad(old, new) {
  if( old < 101 ) {
    this->removeKeyHandler("enter");
    this->addKeyHandler("return", this.confirm);
  }
  if( old < 104 ) {
    this->addKeyHandler("keypad enter", this.confirm);
  }
}
