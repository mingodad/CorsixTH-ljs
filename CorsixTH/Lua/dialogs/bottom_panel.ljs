/* Copyright (c) 2009 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

//! The multi-purpose panel for launching dialogs / screens and dynamic information.
class ("UIBottomPanel") (Window);

//-@type UIBottomPanel
var UIBottomPanel = _G["UIBottomPanel"];

function UIBottomPanel::UIBottomPanel(ui) {
  this->Window();

  var app = ui.app;

  this.ui = ui;
  this.world = app.world;
  this.on_top = false;
  this.width = 640;
  this.height = 48;
  this->setDefaultPosition(0.5, -0.1);
  this.panel_sprites = app.gfx->loadSpriteTable("Data", "Panel02V", true);
  this.money_font = app.gfx->loadFont("QData", "Font05V");
  this.date_font = app.gfx->loadFont("QData", "Font16V");
  this.white_font = app.gfx->loadFont("QData", "Font01V", 0, -2);
  this.pause_font = app.gfx->loadFont("QData", "Font124V");

  // State relating to fax notification messages
  this.show_animation = true;
  this.factory_counter = 22;
  this.factory_direction = 0;
  this.message_windows = {};
  this.message_queue = {};

  this.default_button_sound = "selectx.wav";
  this.countdown = 0;

  this.bank_button = this->addPanel( 1,   0, 0)->makeToggleButton(6, 6, 35, 36, 2, this.dialogBankManager, null, this.dialogBankStats)->setTooltip(_S.tooltip.toolbar.bank_button);
  this->addPanel( 3,  40, 0); // Background for balance, rep and date
  this->addPanel( 4, 206, 0)->makeButton(6, 6, 35, 36, 5, this.dialogBuildRoom)->setTooltip(_S.tooltip.toolbar.rooms);
  this->addPanel( 6, 248, 0)->makeButton(1, 6, 35, 36, 7, this.dialogFurnishCorridor)->setTooltip(_S.tooltip.toolbar.objects);
  this->addPanel( 8, 285, 0)->makeButton(1, 6, 35, 36, 9, this.editRoom)
    ->setSound()->setTooltip(_S.tooltip.toolbar.edit); // Remove default sound for this button
  this->addPanel(10, 322, 0)->makeButton(1, 6, 35, 36, 11, this.dialogHireStaff)->setTooltip(_S.tooltip.toolbar.hire);
  // The dynamic info bar
  this->addPanel(12, 364, 0);
  for( x = 377, 630, 10 ) {
    this->addPanel(13, x, 0);
  }
  this->addPanel(14, 627, 0);

  // Buttons that are shown instead of the dynamic info bar when hovering over it.
  var panels = {};
  var buttons = {};

  panels[1]  = this->addPanel(15, 364, 0); // Staff management button
  buttons[1] = panels[1]->makeToggleButton(6, 6, 35, 36, 16, this.dialogStaffManagement)->setTooltip(_S.tooltip.toolbar.staff_list);
  panels[2]  = this->addPanel(17, 407, 0); // Town map button
  buttons[2] = panels[2]->makeToggleButton(1, 6, 35, 36, 18, this.dialogTownMap)->setTooltip(_S.tooltip.toolbar.town_map);
  panels[3]  = this->addPanel(19, 445, 0); // Casebook button
  buttons[3] = panels[3]->makeToggleButton(1, 6, 35, 36, 20, this.dialogDrugCasebook)->setTooltip(_S.tooltip.toolbar.casebook);
  panels[4]  = this->addPanel(21, 483, 0); // Research button
  buttons[4] = panels[4]->makeToggleButton(1, 6, 35, 36, 22, this.dialogResearch)
    ->setSound()->setTooltip(_S.tooltip.toolbar.research); // Remove default sound for this button
  panels[5]  = this->addPanel(23, 521, 0); // Status button
  buttons[5] = panels[5]->makeToggleButton(1, 6, 35, 36, 24, this.dialogStatus)->setTooltip(_S.tooltip.toolbar.status);
  panels[6]  = this->addPanel(25, 559, 0); // Charts button
  buttons[6] = panels[6]->makeToggleButton(1, 6, 35, 36, 26, this.dialogCharts)->setTooltip(_S.tooltip.toolbar.charts);
  panels[7]  = this->addPanel(27, 597, 0); // Policy button
  buttons[7] = panels[7]->makeToggleButton(1, 6, 35, 36, 28, this.dialogPolicy)->setTooltip(_S.tooltip.toolbar.policy);
  for( _, panel in ipairs(panels) ) {
    panel.visible = false;
    }
  this.additional_panels = panels;
  this.additional_buttons = buttons;

  this->makeTooltip(_S.tooltip.toolbar.balance, 41, 5, 137, 28);
  this->makeTooltip(_S.tooltip.toolbar.date, 140, 5, 200, 42);
  this->makeDynamicTooltip(/*persistable:reputation_tooltip*/ function() {
    return _S.tooltip.toolbar.reputation .. " (" .. this.ui.hospital.reputation .. ")";
  }, 41, 30, 137, 42);

  // original TH F-key shortcuts
  ui->addKeyHandler("F1", this.bank_button, this.bank_button.handleClick, "left");  // bank manager
  ui->addKeyHandler("F2", this.bank_button, this.bank_button.handleClick, "right");  // bank stats
  ui->addKeyHandler("F3", buttons[1], buttons[1].handleClick, "left");    // staff management
  ui->addKeyHandler("F4", buttons[2], buttons[2].handleClick, "left");    // town map
  ui->addKeyHandler("F5", buttons[3], buttons[3].handleClick, "left");    // casebook
  ui->addKeyHandler("F6", buttons[4], buttons[4].handleClick, "left");    // research
  ui->addKeyHandler("F7", buttons[5], buttons[5].handleClick, "left");    // status
  ui->addKeyHandler("F8", buttons[6], buttons[6].handleClick, "left");    // charts
  ui->addKeyHandler("F9", buttons[7], buttons[7].handleClick, "left");    // policy

  // "old" keyboard shortcuts for some of the fullscreen windows
  ui->addKeyHandler("T", buttons[2], buttons[2].handleClick, "left"); // T for town map
  ui->addKeyHandler("R", buttons[4], buttons[4].handleClick, "left"); // R for research
  var config = ui.app.config;
  if( ! config.volume_opens_casebook ) {
    ui->addKeyHandler("C", buttons[3], buttons[3].handleClick, "left"); // C for casebook
  } else {
    ui->addKeyHandler({"shift", "C"}, buttons[3], buttons[3].handleClick, "left"); // Shift + C for casebook
  }
  ui->addKeyHandler({"shift", "L"}, this, this.openLoad);  // Shift + L for Load saved game menu
  ui->addKeyHandler({"shift", "S"}, this, this.openSave);  // Shift + S for Load create save menu
  ui->addKeyHandler({"shift", "R"}, this, this.restart);  // Shift + R for restart the level
  ui->addKeyHandler({"shift", "Q"}, this, this.quit);  // Shift + Q quit the game and return to main menu
  ui->addKeyHandler({"shift", "alt", "S"}, this, this.quickSave);  // Shift+Alt+S quick save
  ui->addKeyHandler({"shift", "alt", "L"}, this, this.quickLoad);  // Shift+Alt+L load last quick save

  // misc. keyhandlers
  ui->addKeyHandler("M", this, this.openFirstMessage);    // M for message
  ui->addKeyHandler("I", this, this.toggleInformation);   // I for Information when you first build
  ui->addKeyHandler("J", this, this.openJukebox);   // open the jukebox
}

function UIBottomPanel::openJukebox() {
  this.ui->addWindow(UIJukebox(this.ui.app));
}

function UIBottomPanel::openSave() {
  this.ui->addWindow(UISaveGame(this.ui));
}

function UIBottomPanel::openLoad() {
  this.ui->addWindow(UILoadGame(this.ui, "game"));
}

function UIBottomPanel::quickSave() {
  this.ui.app->quickSave();
}

function UIBottomPanel::quickLoad() {
  this.ui.app->quickLoad();
}

function UIBottomPanel::restart() {
  this.ui.app->restart();
}

function UIBottomPanel::quit() {
  this.ui->quit();
}

function UIBottomPanel::draw(canvas, x, y) {
  Window.draw(this, canvas, x, y);

  x, y = x + this.x, y + this.y;
  this.money_font->draw(canvas, ("%7i")->format(this.ui.hospital.balance), x + 44, y + 9);
  var month, day = this.world->getDate();
  this.date_font->draw(canvas, _S.date_format.daymonth->format(day, month), x + 140, y + 20, 60, 0);

  // Draw possible information in the dynamic info bar
  if( ! this.additional_panels[1].visible ) {
    this->drawDynamicInfo(canvas, x + 364, y);
  }

  if( this.show_animation ) {
    if( this.factory_counter >= 1 ) {
        this.panel_sprites->draw(canvas, 40, x + 177, y + 1);
    }

    if( this.factory_counter > 1 && this.factory_counter <= 22 ) {
      for( dx = 0, this.factory_counter ) {
        this.panel_sprites->draw(canvas, 41, x + 179 + dx, y + 1);
      }
    }

    if( this.factory_counter == 22 ) {
      this.panel_sprites->draw(canvas, 42, x + 201, y + 1);
    }
  }

  this->drawReputationMeter(canvas, x + 55, y + 35);
}

function UIBottomPanel::setPosition(x, y) {
  // Lock to bottom of screen
  return Window.setPosition(this, x, -0.1);
}

// Draws the hospital reputation meter on canvas.
// x_left is the leftmost x-coordinate of the reputation meter
// y is the y-coordinate of the reputation meter
function UIBottomPanel::drawReputationMeter(canvas, x_left, y) {
  var width = 65; // Reputation meter width
  var step = width / (this.ui.hospital.reputation_max - this.ui.hospital.reputation_min);
  this.panel_sprites->draw(canvas, 36, x_left + math.floor(step * (this.ui.hospital.reputation - this.ui.hospital.reputation_min)), y);
}

function UIBottomPanel::drawDynamicInfo(canvas, x, y) {
  if( this.world->isCurrentSpeed("Pause") && ! this.world.user_actions_allowed ) {
    this.pause_font->drawWrapped(canvas, _S.misc.pause, x + 10, y + 14, 255, "center");
    return;
  }

  if( ! (this.dynamic_info && this.dynamic_info["text"]) ) {
    return;
  }

  var info = this.dynamic_info;
  var font = this.white_font;
  for( i, text in ipairs(info["text"]) ) {
    font->drawWrapped(canvas, text, x + 20, y + 10 * i, 240);
    if( i == #info["text"] && info["progress"] ) {
      var white = canvas->mapRGB(255, 255, 255);
      var black = canvas->mapRGB(0, 0, 0);
      var orange = canvas->mapRGB(221, 83, 0);
      canvas->drawRect(white, x + 165, y + 10 * i, 100, 10);
      canvas->drawRect(black, x + 166, y + 1 + 10 * i, 98, 8);
      canvas->drawRect(orange, x + 166, y + 1 + 10 * i, math.floor(98 * info["progress"]), 8);
      if( info["dividers"] ) {
        for( _, value in ipairs(info["dividers"]) ) {
          canvas->drawRect(white, x + 165 + math.floor(value * 100), y + 10 * i, 1, 10);
        }
      }
    }
  }
}

//! Update the information shown in the information box on the panel.
//!
//! If the info is nil then a cooldown timer is used before removing the
//! information from the display.
//!
//!param info (table) A table containing the information to display. The text
//! key is required and contains an array of lines to show. An optional
//! progress key may be given to draw a progress bar, following the text and
//! and an array of dividers may be provided to draw extra vertical lines in
//! the progress bar.
//!
//! info = {
//!   text: { "He's not the saviour", "He's very naughty boy" },
//!   progress: 50,
//!   dividers: { 25, 50, 75 }
//! }
function UIBottomPanel::setDynamicInfo(info) {
  if( info && ! info["text"] ) {
    this.world->gameLog("");
    this.world->gameLog("Dynamic info is missing text!");
    this.world->gameLog("Please report this issue including the call stack below.");
    this.world->gameLog(debug.traceback());

    return;
  }

  if( ! info ) {
    this.countdown = 25;
  } else {
    this.countdown = null;
    this.dynamic_info = info;
  }
}

function UIBottomPanel::onMouseMove(x, y, dx, dy) {
  var repaint = Window.onMouseMove(this, x, y, dx, dy);
  if( this->showAdditionalButtons(x, y) ) {
    repaint = true;
  }
  return repaint;
}

function UIBottomPanel::showAdditionalButtons(x, y) {
  var panels = this.additional_panels;
  if( this->hitTest(x, y) ) { // Inside the panel
    if( ! panels[1].visible ) { // Are the buttons already shown?
      for( _, panel in ipairs(panels) ) {
        panel.visible = true;
      }
    }
  } else { // Outside the rectangle
    if( panels[1].visible ) { // Are the buttons already invisible?
      for( _, panel in ipairs(panels) ) {
        panel.visible = false;
      }
    }
  }
}

function UIBottomPanel::hitTest(x, y, x_offset) {
  return x >= (x_offset && x_offset || 0) && y >= 0 && x < this.width && y < this.height;
}

//! Queue a fax notification message to appear.
//! The arguments specify a message, which is added to a FIFO queue, and will
// appear on screen once there is space.
//!param type (string) The type of message, can be: "emergency", "epidemy", "personality", "information", "disease", "report" or "strike"
//!param message (table or number) If type == "strike", the amount of pay rise. Else a list of texts to display, including a "choices" table with choices. See below for structure.
//!param owner (humanoid or nil) Some messages are related to one staff or patient. Otherwise this is nil.
//!param timeout (number or nil) If given, the message will expire after that many world ticks and be removed.
//!param default_choice (number or nil) If given, the choice with this number will be executed on expiration of the message.
//!param callback (function or nil) If given, it will be called when the message is closed.
//! Structure of message (except strike):
// message = {
//   { text = "first line of text", offset (integer, optional) }
//   { text = "second line of text", offset (integer, optional) }
//   ...
//   choices = {
//     { text = "first choice", choice = "choice_type", enabled = true or false (optional, defaults to true) }
//     ...
//   }
// }
function UIBottomPanel::queueMessage(type, message, owner, timeout, default_choice, callback) {
  // Show a helpful message if there has been no messages before - only in campaign though
  if( ! this.ui.hospital.message_popup && tonumber(this.world.map.level_number) ) {
    this.world.ui.adviser->say(_A.information.fax_received);
    this.ui.hospital.message_popup = true;
  }
  var fax = {
    type = type,
    message = message,
    owner = owner,
    timeout = timeout,
    default_choice = default_choice,
    callback = callback,
  };

  if( this->canQueueFax(fax) ) {
    this.message_queue[#this.message_queue + 1] = fax;
    // create reference to message in owner
    if( owner ) {
      owner.message = message;
    }
  } else {
    this->cancelFax(fax.type);
  }
}

/* A fax can be queued if the event the fax causes does not affect
an event caused by any other fax that is queued. i.e both emergency
and epidemics use the timer, so both faxes cannot appear at the same time.
@param fax (table) the fax we want to determine if can be queued.
@return true if fax can be queued, false otherwise (boolean) */
function UIBottomPanel::canQueueFax(fax) {
  /* Determine if fax of a particular type is queued either in the
  message queue or the message window (ui)
  @param fax_type (string) the fax type to check if any queued
  @return true if any of fax_type is queued false otherwise (boolean) */
  var function isFaxTypeQueued(fax_type) {
    // Check the queued messages
    for( _, fax_msg in ipairs(this.message_queue) ) {
      if( fax_msg.type == fax_type ) {
        return true;
      }
    }
    // Then the messages displayed on the bottom bar
    for( _, fax_msg in ipairs(this.message_windows) ) {
      if( fax_msg.type == fax_type ) {
        return true;
      }
    }
    return false;
  }

  if( fax.type == "epidemy" ) {
    if( isFaxTypeQueued("emergency") ) {
      return false;
    }
  } else if( fax.type == "emergency" ) {
    if( isFaxTypeQueued("epidemy") ) {
      return false;
    }
  }
  return true;
}

/* Cancels a fax of a particular type currently only "emergency" and "epidemy"
Handles the cancelling of the event which the fax pertains to.
@param fax_type (string) type of fax event to be cancelled*/
function UIBottomPanel::cancelFax(fax_type) {
  var hospital = this.ui.hospital;
  if( fax_type == "epidemy" ) {
    hospital.epidemic->clearAllInfectedPatients();
    hospital.epidemic = null;
  } else if( fax_type == "emergency" ) {
    this.world->nextEmergency();
  }
}

// Opens the last available message. Currently used to open the level completed message.
function UIBottomPanel::openLastMessage() {
  if( #this.message_queue > 0 ) {
    this->createMessageWindow(#this.message_queue);
    table.remove(this.message_queue, #this.message_queue);
  }
  this.message_windows[#this.message_windows]->openMessage();
}

//! Trigger a message to be moved from the queue into a actual window, after
// first performing the necessary animation.
function UIBottomPanel::showMessage() {
  if( this.factory_direction != -1 ) {
    this.factory_direction = -1;
    if( this.factory_counter < 0 ) {
      // Factory is already opened so don't wait to show the message
      this.show_animation = false;
      this.factory_counter = 9;
    } else {
      // Delay the appearance of the message to when the factory is opened
      this.factory_direction = -1;
      this.factory_counter = 22;
      this.show_animation = true;
    }
  }
}

// Opens the first available message in the list of message_windows.
function UIBottomPanel::openFirstMessage() {
  if( #this.message_windows > 0 ) {
    this.message_windows[1]->openMessage();
  }
}

// Removes a message from the message queue (for example if a room is built before the player
// says what to do with the patient.
function UIBottomPanel::removeMessage(owner) {
  for( i, msg_info in ipairs(this.message_queue) ) {
    if( msg_info.owner == owner ) {
      // TODO: restructure message_queue to contain UIMessage objects already, so this special handling isn't required
      owner.message = null;
      table.remove(this.message_queue, i);
      return true;
    }
  }
  for( _, window in ipairs(this.message_windows) ) {
    if( window.owner == owner ) {
      window->removeMessage();
      return true;
    }
  }
  return false;
}

//! Pop the message with the given index from the message queue and turn it into an actual
// message window; if no index is provided the first message in the queue is popped.
function UIBottomPanel::createMessageWindow(index) {
  var /*persistable:bottom_panel_message_window_close*/ function onClose(window, out_of_time) {
    var index_to_remove;
    for( i, win in ipairs(this.message_windows) ) {
      if( index_to_remove != null ) {
        win->setXLimit(1 + (i - 2) * 30);
      } else if( win == window ) {
        index_to_remove = i;
        if( win.callback ) {
          win.callback();
        }
      }
    }
    table.remove(this.message_windows, index_to_remove);
  }

  if( ! index ) {
    index = 1;
  }
  var message_windows = this.message_windows;
  var message_info = this.message_queue[index];
  if( ! message_info ) {
    return;
  }
  var alert_window = UIMessage(this.ui, 175, 1 + #message_windows * 30,
    onClose, message_info.type, message_info.message, message_info.owner, message_info.timeout, message_info.default_choice, message_info.callback);
  message_windows[#message_windows + 1] = alert_window;
  this->addWindow(alert_window);
  this.factory_direction = 1;
  this.show_animation = true;
  this.factory_counter = -50;                // Delay close of message factory
  table.remove(this.message_queue, index);   // Delete the last element of the queue
}

function UIBottomPanel::onTick() {
  // Advance the animation on the message factory
  if( this.factory_direction == 1 ) {
    // Close factory animation
    if( this.factory_counter < 22 ) {
      this.factory_counter = this.factory_counter + 1;
    }
  } else if( this.factory_direction == -1 ) {
    if( #this.message_queue == 0 ) {
      // Message was removed before we could display it. Reset.
      this.factory_direction = 1;
      this.factory_counter = 22;
    }
    // Open factory animation
    if( this.factory_counter >= 0 ) {
      if( this.factory_counter == 0 ) {
        // Animation ends so we can now show the message
        this->createMessageWindow();
      }
      this.factory_counter = this.factory_counter - 1;
    }
  }

  // The dynamic info bar is there a while longer when hovering an entity has stopped
  if( this.countdown ) {
    if( this.countdown < 1 ) {
      this.dynamic_info = null;
      // If there is no info to display, and the app is tracking FPS, show that
      var fps = this.ui.app->getFPS();
      if( fps ) {
        this.dynamic_info = {text = {
          ("FPS: %i")->format(math.floor(fps + 0.5) || 0),
          ("Lua GC: %.1f Kb")->format(collectgarbage("count") || 0),
          ("Entities: %i")->format(#this.ui.app.world.entities || 0),
        }};
        this.countdown = 1;
      }
    } else {
      this.countdown = this.countdown - 1;
    }
  }

  // Move an item out of the message queue if there is room
  if( #this.message_windows < 5 && #this.message_queue > 0 ) {
    this->showMessage();
  }

  Window.onTick(this);
}

function UIBottomPanel::dialogBankManager(enable) {
  this->dialogBankCommon(enable);
}

function UIBottomPanel::dialogBankStats(enable) {
  this->dialogBankCommon(enable, true);
}

function UIBottomPanel::dialogBankCommon(enable, stats) {
  if( ! this.world.user_actions_allowed ) {
    this->updateButtonStates();
    return;
  }

  if( enable ) {
    this->addDialog("UIBankManager", stats && "showStatistics");
  } else {
    var w = this.ui->getWindow(UIBankManager);
    if( w ) {
      if( ! stats && w.showingStatistics ) {
        w->hideStatistics();
      } else if( stats && ! w.showingStatistics ) {
        w->showStatistics();
      } else {
        w->close();
      }
      this->updateButtonStates();
    }
  }
}

function UIBottomPanel::dialogBuildRoom() {
  if( this.world.user_actions_allowed ) {
    var dlg = UIBuildRoom(this.ui);
    this.ui->setEditRoom(false);
    this.ui->addWindow(dlg);
    this.ui->tutorialStep(3, 1, 2);
  }
}

function UIBottomPanel::dialogFurnishCorridor() {
  if( this.world.user_actions_allowed ) {
    // Close any fullscreen window
    var fullscreen = this.ui->getWindow(UIFullscreen);
    if( fullscreen ) {
      fullscreen->close();
    }
    var dlg = UIFurnishCorridor(this.ui);
    this.ui->setEditRoom(false);
    this.ui->addWindow(dlg);
    this.ui->tutorialStep(1, 1, 2);
  }
}

function UIBottomPanel::dialogHireStaff() {
  if( this.world.user_actions_allowed ) {
    var dlg = UIHireStaff(this.ui);
    this.ui->setEditRoom(false);
    this.ui->addWindow(dlg);
    this.ui->tutorialStep(2, 1, 2);
    this.ui->tutorialStep(4, 1, 2);
  }
}

function UIBottomPanel::dialogStaffManagement(enable) {
  if( ! this.world.user_actions_allowed ) {
    this->updateButtonStates();
    return;
  }
  if( enable ) {
    this->addDialog("UIStaffManagement");
  } else {
    var w = this.ui->getWindow(UIStaffManagement);
    if( w ) {
      w->close();
    }
  }
}

function UIBottomPanel::dialogTownMap(enable) {
  if( ! this.world.user_actions_allowed ) {
    this->updateButtonStates();
    return;
  }
    if( enable ) {
    this->addDialog("UITownMap");
    } else {
    var w = this.ui->getWindow(UITownMap);
      if( w ) {
        w->close();
      }
    }
  }

function UIBottomPanel::dialogDrugCasebook(enable) {
  if( ! this.world.user_actions_allowed ) {
    this->updateButtonStates();
    return;
}
  if( enable ) {
    this->addDialog("UICasebook");
  } else {
    var w = this.ui->getWindow(UICasebook);
    if( w ) {
      w->close();
    }
  }
}

function UIBottomPanel::dialogResearch(enable) {
  if( ! this.world.user_actions_allowed ) {
    this->updateButtonStates();
    return;
  }
  if( this.ui.hospital.research_dep_built ) {
    if( enable ) {
      this->addDialog("UIResearch");
    } else {
      var w = this.ui->getWindow(UIResearch);
      if( w ) {
        w->close();
      }
    }
    this.ui->playSound("selectx.wav");
  } else {
    this.ui->playSound("wrong2.wav");
    this->updateButtonStates();
    this->giveResearchAdvice();
  }
}

function UIBottomPanel::giveResearchAdvice() {
  var can_build_research = false;
  for( _, room in ipairs(this.ui.app.world.available_rooms) ) {
    if( room.class == "ResearchRoom" ) {
      can_build_research = true;
      break;
    }
  }
  var msg = can_build_research && _A.warnings.research_screen_open_1 || _A.warnings.research_screen_open_2;
  this.ui.adviser->say(msg);
}

function UIBottomPanel::dialogStatus(enable) {
  if( ! this.world.user_actions_allowed ) {
    this->updateButtonStates();
    return;
  }
  if( enable ) {
    this->addDialog("UIProgressReport");
  } else {
    var w = this.ui->getWindow(UIProgressReport);
    if( w ) {
      w->close();
    }
  }
}

function UIBottomPanel::dialogCharts(enable) {
  if( ! this.world.user_actions_allowed ) {
    this->updateButtonStates();
    return;
  }
  if( enable ) {
    this->addDialog("UIGraphs");
  } else {
    var w = this.ui->getWindow(UIGraphs);
    if( w ) {
      w->close();
    }
  }
}

function UIBottomPanel::dialogPolicy(enable) {
  if( ! this.world.user_actions_allowed ) {
    this->updateButtonStates();
    return;
  }
  if( enable ) {
    this->addDialog("UIPolicy");
  } else {
    var w = this.ui->getWindow(UIPolicy);
    if( w ) {
      w->close();
    }
  }
}

function UIBottomPanel::toggleInformation() {
  this.world->toggleInformation();
}

var fullscreen_dialogs = {
  "UIStaffManagement",
  "UITownMap",
  "UICasebook",
  "UIResearch",
  "UIProgressReport",
  "UIGraphs",
  "UIPolicy",
};

function UIBottomPanel::updateButtonStates() {
  for( i, button in ipairs(this.additional_buttons) ) {
    button->setToggleState(! ! this.ui->getWindow(_G[fullscreen_dialogs[i]]));
  }
  this.bank_button->setToggleState(! ! this.ui->getWindow(UIBankManager));
}

function UIBottomPanel::addDialog(dialog_class, extra_function) {
  var edit_window = this.ui->getWindow(UIEditRoom);
  // If we are currently editing a room, ask for abortion before adding any dialog.
  if( edit_window ) {
    this.ui->addWindow(UIConfirmDialog(this.ui,
      _S.confirmation.abort_edit_room,
      /*persistable:abort_edit_room_confirm_dialog*/function() {
        this.ui->setEditRoom(false);
        var dialog = _G[dialog_class](this.ui);
        if( extra_function ) {
          _G[dialog_class][extra_function](dialog);
        }
        this.ui->addWindow(dialog);
        this->updateButtonStates();
      }
      ));
    this->updateButtonStates();
  } else {
    this.ui->setEditRoom(false);
    var dialog = _G[dialog_class](this.ui);
    this.ui->addWindow(dialog);
    if( extra_function ) {
      _G[dialog_class][extra_function](dialog);
    }
    this->updateButtonStates();
  }
}

// Do not remove, for savegame compatibility < r1878
var /*persistable:abort_edit_room_cancel_dialog*/function stub() {
}

function UIBottomPanel::editRoom() {
  var ui = this.ui;
  if( ui.editing_allowed ) {
    this.ui->playSound("selectx.wav");
    if( ui.edit_room ) {
      ui->setEditRoom(false);
    } else {
      ui->setEditRoom(true);
    }
  } else {
    // no editing is allowed when other dialogs are open
    this.ui->playSound("wrong2.wav");
  }
}

function UIBottomPanel::afterLoad(old, new) {
  if( old < 40 ) {
    // Find the graph dialog and enable it
    for( _, button in ipairs(this.buttons) ) {
      if( ! button.on_click ) {
        button.on_click = this.dialogCharts;
        button.enabled = true;
      }
    }
  }
  if( old < 47 ) {
    this.ui->addKeyHandler("I", this, this.toggleInformation);
    this.ui->addKeyHandler("A", this, this.toggleAdviser);
  }
  if( old < 58 ) {
    this.pause_font = TheApp.gfx->loadFont("QData", "Font124V");
  }
  if( old < 62 ) {
    // renamed additional_buttons to additional_panels
    // additional_buttons are now the actual buttons
    this.additional_panels = this.additional_buttons;
    this.additional_buttons = {};
    for( i = 1, 7 ) {
      this.additional_buttons[i] = this.buttons[5 + i]->makeToggle(); // made them toggle buttons
    }
    this.bank_button = this.buttons[1]->makeToggle();

    // keyboard shortcuts have been added/changed
    this.ui->addKeyHandler("F1", this.bank_button, this.bank_button.handleClick, "left");  // bank manager
    this.ui->addKeyHandler("F2", this.bank_button, this.bank_button.handleClick, "right");  // bank manager
    this.ui->addKeyHandler("F3", this.additional_buttons[1], this.additional_buttons[1].handleClick, "left");    // staff management
    this.ui->addKeyHandler("F4", this.additional_buttons[2], this.additional_buttons[2].handleClick, "left");    // town map
    this.ui->addKeyHandler("F5", this.additional_buttons[3], this.additional_buttons[3].handleClick, "left");    // casebook
    this.ui->addKeyHandler("F6", this.additional_buttons[4], this.additional_buttons[4].handleClick, "left");    // research
    this.ui->addKeyHandler("F7", this.additional_buttons[5], this.additional_buttons[5].handleClick, "left");    // status
    this.ui->addKeyHandler("F8", this.additional_buttons[6], this.additional_buttons[6].handleClick, "left");    // charts
    this.ui->addKeyHandler("F9", this.additional_buttons[7], this.additional_buttons[7].handleClick, "left");    // policy
    this.ui->removeKeyHandler("T", this);
    this.ui->removeKeyHandler("C", this);
    this.ui->removeKeyHandler("R", this);
    this.ui->addKeyHandler("T", this.additional_buttons[2], this.additional_buttons[2].handleClick, "left"); // T for town map
    this.ui->addKeyHandler("C", this.additional_buttons[3], this.additional_buttons[3].handleClick, "left"); // C for casebook
    this.ui->addKeyHandler("R", this.additional_buttons[4], this.additional_buttons[4].handleClick, "left"); // R for research
  }
  if( old <  70 ) {
    this.ui->removeKeyHandler("a", this);
  }
  if( old < 71 ) {
    this.ui->removeKeyHandler("C", this.additional_buttons[3], this.additional_buttons[3].handleClick, "left");  // remove C for opening the Casebook
    // add choice for opening casebook as per chosen option in config
    var config = this.ui.app.config;
    if( ! config.volume_opens_casebook ) {
      this.ui->addKeyHandler("C", this.additional_buttons[3], this.additional_buttons[3].handleClick, "left"); // C for casebook
    } else {
      this.ui->addKeyHandler({"shift", "C"}, this.additional_buttons[3], this.additional_buttons[3].handleClick, "left"); // Shift + C for casebook
    }
    // add new key handlers
    this.ui->addKeyHandler("J", this, this.openJukebox);   // open the jukebox
    this.ui->addKeyHandler({"shift", "L"}, this, this.openLoad);  // Shift + L for Load saved game menu
    this.ui->addKeyHandler({"shift", "S"}, this, this.openSave);  // Shift + S for Load create save menu
    this.ui->addKeyHandler({"shift", "R"}, this, this.restart);  // Shift + R for restart the level
    this.ui->addKeyHandler({"shift", "Q"}, this, this.quit);  // Shift + Q quit the game and return to main menu
  }
  if( old < 82 ) {
    this.ui->addKeyHandler({"shift","alt", "S"}, this, this.quickSave);  // Shift+Alt+S quick save
    this.ui->addKeyHandler({"shift","alt", "L"}, this, this.quickLoad);  // Shift+Alt+L load last quick save
  }
  Window.afterLoad(this, old, new);
}

