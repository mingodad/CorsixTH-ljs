/* Copyright (c) 2009 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

//! Small fax notification window which sits on the bottom bar.
class ("UIMessage") (Window);

//-@type UIMessage
var UIMessage = _G["UIMessage"];

function UIMessage::UIMessage(ui, x, stop_x, onClose, type, message, owner, timeout, default_choice, callback) {
  this->Window();

  var app = ui.app;
  ui->playSound("NewFax.wav");

  this.esc_closes = false;
  this.on_top = false;
  this.onClose = onClose;
  this.timer = timeout;
  this.default_choice = default_choice;
  this.ui = ui;
  this.message = message;
  this.callback = callback;
  if( owner ) {
    this.owner = owner;
    if( owner.message_callback ) {
      owner->message_callback(true); // There can be only one message per owner, just remove any existing one
    }
    assert(owner.message_callback == null);
    owner.message_callback = /*persistable:owner_of_message_callback*/ function(humanoid, do_remove) {
      if( do_remove ) {
        this->removeMessage();
      } else {
        this->openMessage();
      }
    };
  }
  this.width = 30;
  this.height = 28;
  this.stop_x = stop_x;
  this.stop_y = -24;
  this.x = x;
  this.y = 4;
  this.panel_sprites = app.gfx->loadSpriteTable("Data", "Panel02V", true);
  this.type = type;

  var types = { emergency = 43, epidemy = 45, strike = 47, personality = 49, information = 51, disease = 53, report = 55 };
  var kind = types[type];

  this.can_dismiss = this.type != "strike" && #this.message.choices == 1;

  this.button = this->addPanel(kind, 0, 0)
    ->setTooltip(this.can_dismiss && _S.tooltip.message.button_dismiss || _S.tooltip.message.button) // FIXME: tooltip doesn't work very well here
    ->makeToggleButton(0, 0, 30, 28, kind + 1, this.openMessage, null, this.dismissMessage);
  // The emergency has a rotating siren
  if( kind == 43 ) {
    this.rotator = {};
    for( i = 57, 60 ) {
      this.rotator[i] = this->addPanel(i, 10, 8);
      this.rotator[i].visible = false;
    }
    this.active = 57;
  }
}

function UIMessage::draw(canvas, x, y) {
  if( this.on_top ) {
    Window.draw(this, canvas, x, y);
  } else {
    var x_, y_, w, h = canvas->getClip();
    canvas->setClip(x_, y + this.stop_y, w, this.height, true);
    Window.draw(this, canvas, x, y);
    canvas->setClip(x_, y_, w, h);
  }
}

function UIMessage::close(...) {
  assert(this.onClose == null, "UIMessage closed improperly");
  return Window.close(this, ...);
}

// Adjust the toggle state to match if the message is open or not
function UIMessage::adjustToggle() {
  if( (this.button.toggled && ! this.fax) ||
      (! this.button.toggled && this.fax) ) {
    this.button->toggle();
  }
}

function UIMessage::openMessage() {
  if( TheApp.world->isCurrentSpeed("Speed Up") ) {
    TheApp.world->previousSpeed();
  }
  if( ! TheApp.world->isCurrentSpeed("Pause") ) {
    TheApp.world->setSpeed("Pause");
  }
  if( this.type == "strike" ) { // strikes are special cases, as they are not faxes
    this.ui->addWindow(UIStaffRise(this.ui, this.owner, this.message));
    this->removeMessage();
  } else {
    if( this.fax ) {
      this.fax->close();
    } else {
      this.fax = UIFax(this.ui, this);
      this.ui->addWindow(this.fax);
      this.ui->playSound("fax_in.wav");
    }
    // Manual adjustion of toggle state is necessary if owner's message_callback was used
    this->adjustToggle();
  }
  TheApp.video->setBlueFilterActive(false);
}

// Removes the Message, executing a choice if given, else just deletes it
//!param choice_number (number) if given, removes the message by executing this choice.
function UIMessage::removeMessage(choice_number) {
  if( choice_number ) {
    if( ! this.fax ) {
      this.fax = UIFax(this.ui, this); // NB: just create, don't add to ui
    }
    this.fax->choice(choice_number);
  } else {
    if( this.fax ) {
      this.fax->close();
    }
    if( this.owner ) {
      this.owner.message = null;
      this.owner.message_callback = null;
    }
    this->onClose(false);
    this.onClose = null;
    this->close();
  }
}

// Tries to dismiss the message. This is only possible if there is only one choice.
function UIMessage::dismissMessage() {
  if( this.can_dismiss ) {
    this->removeMessage(1);
  } else {
    this.ui->playSound("wrong2.wav");
    this->adjustToggle();
  }
}

function UIMessage::setXLimit(stop_x) {
  assert(stop_x <= this.stop_x, "UIMessage moved in wrong direction");
  this.stop_x = stop_x;
}

function UIMessage::onTick() {
  if( this.on_top == false && this.y == this.stop_y ) {
    this.on_top = true;
  }
  if( this.y > this.stop_y ) {
    var y = this.y - 8;
    if( y > this.stop_y ) {
      this.y = y;
    } else {
      this.y = this.stop_y;
    }
  } else if( this.x > this.stop_x ) {
    var x = this.x - 3;
    if( x > this.stop_x ) {
      this.x = x;
    } else {
      this.x = this.stop_x;
    }
  }
}

function UIMessage::onWorldTick() {
  if( this.timer ) {
    this.timer = this.timer - 1;
    if( this.timer <= 0 ) {
      this.timer = null;
      this->removeMessage(this.default_choice);
    }
  }
  if( this.active ) {
    this.rotator[this.active].visible = false;
    if( this.active == 60 ) {
      this.active = 57;
    } else {
      this.active = this.active + 1;
    }
    this.rotator[this.active].visible = true;
  }
}

function UIMessage::afterLoad(old, new) {
  if( old < 21 ) {
    // self.button added; however check for existence first
    // since the savegame bump was a couple of revisions later
    if( ! this.button ) {
      this.button = this.buttons[1];
    }
  }
  Window.afterLoad(this, old, new);
}
