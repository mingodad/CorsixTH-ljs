/* Copyright (c) 2010 Edvin "Lego3" Linge

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

//! Annual Report fullscreen window shown at the start of each year.
class ("UIAnnualReport") (UIFullscreen);

//-@type UIAnnualReport
var UIAnnualReport = _G["UIAnnualReport"];

//! Helper function that enables and makes visible button or table of buttons/panels.
//!param button The button or table of buttons that should be activated/deactivated. If
// a table is given it needs to have the is_table flag set to true.
//!param active Defines if the new state is active (true) or inactive (false).
var function setActive(button, active) {
  if( button.is_table ) {
    for( _, btn in ipairs(button) ) {
      btn.enabled = active;
      btn.visible = active;
    }
  } else {
    button.enabled = active;
    button.visible = active;
  }
}

function UIAnnualReport::UIAnnualReport(ui, world) {

  this->UIFullscreen(ui);

  this.ui = ui;
  var gfx   = ui.app.gfx;
  this.won_amount = 0;
  this.award_won_amount = 0;
  this.rep_amount = 0;

  if( ! pcall(function() {
    var palette   = gfx->loadPalette("QData", "Award02V.pal");
    palette->setEntry(255, 0xFF, 0x00, 0xFF); // Make index 255 transparent

    // Right now the statistics are first
    //self.background = gfx:loadRaw("Fame01V", 640, 480)
    this.award_background = gfx->loadRaw("Award01V", 640, 480);
    this.stat_background = gfx->loadRaw("Award02V", 640, 480);
    this.background = this.stat_background;

    this.stat_font = gfx->loadFont("QData", "Font45V", false, palette);
    this.write_font = gfx->loadFont("QData", "Font47V", false, palette);
    this.stone_font = gfx->loadFont("QData", "Font46V", false, palette);

    this.panel_sprites = gfx->loadSpriteTable("QData", "Award03V", true, palette);
  }) ) {
    ui->addWindow(UIInformation(ui, {_S.errors.dialog_missing_graphics}));
    this->close();
    return;
  }
  //---------------------- The current state the dialog is in.  ---------------------------
  // Possible values are 1, 2 and 3 = fame, statistics and awards pages respectively
  // TODO: The dialog has some preparations for the fame screen, but as long as there are no
  // competitor scores and the player's own score isn't increased anywhere there's no use in
  // showing it. Only hall of fame is there right now too, and maybe it should be a
  // stand alone dialog since it has (2) sprites in another sprite file?
  this.state = 2;
  this.default_button_sound = "selectx.wav";

  // Close button, in the future different behaviours for different screens though
  //self.first_close = self:addPanel(0, 609, 449):makeButton(0, 0, 26, 26, 1, self.changePage)
  this.second_close = this->addPanel(0, 608, 449)->makeButton(0, 0, 26, 26, 1, this.close);
  setActive(this.second_close, true);

  // Change page buttons for the second and third pages
  var /*persistable:annual_report_change_page*/ function change() { this->changePage(3); }
  this.second_change = this->addPanel(0, 274, 435)->makeButton(0, 0, 91, 42, 3, change);
  setActive(this.second_change, true);

  this.third_change = this->addPanel(0, 272, 367)->makeButton(0, 0, 91, 42, 3, this.changePage);
  setActive(this.third_change, false);

  // The plaque showed after the player has clicked on a trophy
  var plaque = {};
  plaque[1] = this->addPanel(19, 206, 87);
  plaque[2] = this->addPanel(20, 206, 161);
  plaque[3] = this->addPanel(21, 206, 233);
  plaque[4] = this->addPanel(22, 206, 321);
  plaque.is_table = true;
  this.plaque = plaque;
  setActive(this.plaque, false);

  // Close button for the trophy motivations
  this.third_close = this->addPanel(0, 389, 378)->makeButton(0, 0, 26, 26, 2, this.showTrophyMotivation);
  setActive(this.third_close, false);

  // The scroll showed after the player has clicked on an award
  var scroll = {};
  scroll[1] = this->addPanel(16, 206, 87);
  scroll[2] = this->addPanel(17, 206, 200);
  scroll[3] = this->addPanel(18, 206, 304);
  scroll[4] = this->addPanel(15, 300, 341);
  scroll.is_table = true;
  this.scroll = scroll;
  setActive(this.scroll, false);

  // Close button for the award motivations
  this.fourth_close = this->addPanel(0, 369, 358)->makeButton(0, 0, 26, 26, 2, this.showAwardMotivation);
  setActive(this.fourth_close, false);

  // How many awards the player got this year. Will increase after the checkup.
  this.no_awards = 0;
  this.awards = {};

  // Trophies. Currently the soda and the reputation award have been implemented
  this.no_trophies = 0;
  this.trophies = {};

  // Check which awards and trophies the player should get.
  this->checkTrophiesAndAwards(world);

  // Get and sort values used on the statistics screen.
  // The six categories. The extra tables are used to be able to sort the values.
    this.money = {};
    this.money_sort = {};
    this.visitors = {};
    this.visitors_sort = {};
    this.salary = {};
    this.salary_sort = {};
    this.deaths = {};
    this.deaths_sort = {};
    this.cures = {};
    this.cures_sort = {};
    this.value = {};
    this.value_sort = {};

    // TODO: Right now there are no real competitors, they all have initial values.
    for( i, hospital in ipairs(world.hospitals) ) {
      this.money[hospital.name] = hospital.balance - hospital.loan;
      this.money_sort[i] = hospital.balance - hospital.loan;
      this.visitors[hospital.name] = hospital.num_visitors;
      this.visitors_sort[i] = hospital.num_visitors;
      this.deaths[hospital.name] = hospital.num_deaths;
      this.deaths_sort[i] = hospital.num_deaths;
      this.cures[hospital.name] = hospital.num_cured;
      this.cures_sort[i] = hospital.num_cured;
      this.value[hospital.name] = hospital.value;
      this.value_sort[i] = hospital.value;
      this.salary[hospital.name] = hospital.player_salary;
      this.salary_sort[i] = hospital.player_salary;
    }

    var sort_order = function(a,b) { return a>b; };
    table.sort(this.money_sort, sort_order);
    table.sort(this.visitors_sort, sort_order);
    table.sort(this.deaths_sort); // We want this to be in increasing order
    table.sort(this.cures_sort, sort_order);
    table.sort(this.value_sort, sort_order);
    table.sort(this.salary_sort, sort_order);

  // Pause the game to allow the player plenty of time to check all statistics and trophies won
  if( world && ! world->isCurrentSpeed("Pause") ) {
    world->setSpeed("Pause");
  }
  TheApp.video->setBlueFilterActive(false);
}

//! Finds out which awards and/or trophies the player has been awarded this year.
function UIAnnualReport::checkTrophiesAndAwards(world) {

  var hosp = this.ui.hospital;
  var level_config = world.map.level_config;
  var prices = level_config && level_config.awards_trophies || null;

  // Check CuresAward so that we know the new config settings are available
  if( prices && prices.TrophyMayorBonus ) {
    this.won_amount = 0;
    this.rep_amount = 0;
    this.award_won_amount = 0;


    // The trophies and certificated awards/penalties available at this time --


    //------------------------------ Trophies ---------------------------------


    // Coke sales
    if( hosp.sodas_sold > prices.CansofCoke ) {
      this->addTrophy(_S.trophy_room.sold_drinks.trophies[math.random(1, 3)], "money", prices.CansofCokeBonus);
      this.won_amount = this.won_amount + prices.CansofCokeBonus;
    }
    // Impressive VIP visits
    if(  hosp.num_vips_ty > 0 && hosp.pleased_vips_ty == hosp.num_vips_ty ) {
      // added some here so you get odd amounts as in TH!
      var win_value = (prices.TrophyMayorBonus * hosp.pleased_vips_ty) + math.random(1, 5);
      this->addTrophy(_S.trophy_room.happy_vips.trophies[math.random(1, 3)], "reputation", win_value);
      this.rep_amount = this.rep_amount + win_value;
    }
    // Impressive Reputation in the year (above a threshold throughout the year)
    if( hosp.reputation_above_threshold ) {
      this->addTrophy(_S.trophy_room.consistant_rep.trophies[math.random(1, 2)], "money", prices.TrophyReputationBonus);
      this.won_amount = this.won_amount + prices.TrophyReputationBonus;
    }
    // No deaths or around a 100% Cure rate in the year
    if( hosp.num_deaths_this_year == 0 ) {
      this->addTrophy(_S.trophy_room.no_deaths.trophies[math.random(1, 3)], "money", prices.TrophyDeathBonus);
      this.won_amount = this.won_amount + prices.TrophyDeathBonus;
    } else if( hosp.num_cured_ty > (hosp.not_cured_ty * 0.9)  ) {
      this->addTrophy(_S.trophy_room.many_cured.trophies[math.random(1, 3)], "money", prices.TrophyCuresBonus);
      this.won_amount = this.won_amount + prices.TrophyCuresBonus;
    }


    //------------------ Certificate Awards or Penalties ---------------------


    // Reputation
    if( hosp.reputation > prices.ReputationAward ) {
      this->addAward(_S.trophy_room.high_rep.awards[math.random(1, 2)], "money", prices.AwardReputationBonus);
      this.award_won_amount = this.award_won_amount + prices.AwardReputationBonus;
    } else if( hosp.reputation < prices.ReputationPoor ) {
      this->addAward(_S.trophy_room.high_rep.penalty[math.random(1, 2)], "money", prices.AwardReputationPenalty);
      this.award_won_amount = this.award_won_amount + prices.AwardReputationPenalty;
    }

    // Hospital Value
    if( hosp.value > prices.HospValueAward ) {
      // added some here so you get odd amounts as in TH!
      var win_value = prices.HospValueBonus * math.random(1, 15);
      this->addAward(_S.trophy_room.hosp_value.awards[1], "reputation", win_value);
      this.rep_amount = this.rep_amount + win_value;
    } else if( hosp.value < prices.HospValuePoor ) {
      // added some here so you get odd amounts as in TH!
      var lose_value = prices.HospValuePenalty * math.random(1, 15);
      this->addAward(_S.trophy_room.hosp_value.penalty[1], "reputation", lose_value);
      this.rep_amount = this.rep_amount + lose_value;
    }

    // Should these next few be linked so that you can only get one or should you get more than one if you met the targets?

    // Cures
    if( hosp.num_cured_ty > prices.CuresAward ) {
      this->addAward(_S.trophy_room.many_cured.awards[math.random(1, 2)], "money", prices.CuresBonus);
      this.award_won_amount = this.award_won_amount + prices.CuresBonus;
    } else if( hosp.num_cured_ty < prices.CuresPoor ) {
      this->addAward(_S.trophy_room.many_cured.penalty[math.random(1, 2)], "money", prices.CuresPenalty);
      this.award_won_amount = this.award_won_amount + prices.CuresPenalty;
    }

    // Deaths
    if( hosp.num_deaths_this_year < prices.DeathsAward ) {
      this->addAward(_S.trophy_room.no_deaths.awards[math.random(1, 2)], "money", prices.DeathsBonus);
      this.award_won_amount = this.award_won_amount + prices.DeathsBonus;
    } else if( hosp.num_deaths_this_year > prices.DeathsPoor ) {
      this->addAward(_S.trophy_room.no_deaths.penalty[math.random(1, 2)], "money", prices.DeathsPenalty);
      this.award_won_amount = this.award_won_amount + prices.DeathsPenalty;
    }

    // Cures V Deaths
    // This value is not really a ratio since the level files cannot contain decimal values.
    var cure_ratio = 100;
    if( hosp.num_deaths_this_year > 0 ) {
      cure_ratio = hosp.num_cured_ty / hosp.num_deaths_this_year;
    }
    if( cure_ratio > prices.CuresVDeathsAward ) {
      this->addAward(_S.trophy_room.curesvdeaths.awards[1], "money", prices.CuresVDeathsBonus);
      this.award_won_amount = this.award_won_amount + prices.CuresVDeathsBonus;
    } else if( cure_ratio <= prices.CuresVDeathsPoor ) {
      this->addAward(_S.trophy_room.curesvdeaths.penalty[1], "money", prices.CuresVDeathsPenalty);
      this.award_won_amount = this.award_won_amount + prices.CuresVDeathsPenalty;
    }
  }
}

function UIAnnualReport::updateAwards() {
  // Now apply the won/lost values.
  var hosp = this.ui.hospital;
  if( this.won_amount != 0 ) {
    hosp->receiveMoney(this.won_amount, _S.transactions.eoy_trophy_bonus);
  }
  if( this.award_won_amount != 0 ) {
    hosp->receiveMoney(this.award_won_amount, _S.transactions.eoy_bonus_penalty);
  }
  if( this.rep_amount != 0 ) {
    hosp->changeReputation("year_end", null, math.floor(this.rep_amount));
  }
}

// A table defining which type of shadow each award should have.
var award_shadows = {
  { shadow = 4 },
  { shadow = 4 },
  { shadow = 4 },
  { shadow = 7 },
  { shadow = 7 },
  { shadow = 9 },
};

// Another table defining some properties of the three trophies.
var trophy_prop = {
  {
    sprite = 12,
    x = 142,
    y = 324,
    w = 61,
    h = 144,
  },
  {
    sprite = 14,
    x = 466,
    y = 331,
    w = 72,
    h = 145,
  },
  {
    sprite = 13,
    x = 407,
    y = 324,
    w = 60,
    h = 144,
  },
};

//! Adds a trophy figure with some text if the player clicks on it.
//!param text (string) The text to show as motivation.
//!param award_type (string) Should be one of "reputation" or "money"
//!param amount (integer) How much the player got/lost.
function UIAnnualReport::addTrophy(text, award_type, amount) {
  var no = this.no_trophies + 1;
  // Only show up to three trophies visually.
  if( no <= 3 ) {
    var prop = trophy_prop[no];
    // The actual figure and a button on it.
    var trophy_parts = {};
    trophy_parts.is_table = true;
    // Insert the info for later reference
    trophy_parts.info = {
      text = text,
      award_type = award_type,
      amount = amount
    };

    var /*persistable:annual_report_show_trophy_motivation*/ function change() { this->showTrophyMotivation(no); }
    trophy_parts[1] = this->addPanel(prop.sprite, prop.x, prop.y);
    trophy_parts[2] = trophy_parts[1]->makeButton(0, 0, prop.w, prop.h, prop.sprite, change);

    setActive(trophy_parts, false);
    this.trophies[no] = trophy_parts;
  }
  this.no_trophies = no;
}

//! Adds an award frame with some text if the player clicks on it.
//!param text (string) The text to show as motivation.
//!param award_type (string) Should be one of "reputation" or "money"
//!param amount (integer) How much the player got/lost.
function UIAnnualReport::addAward(text, award_type, amount) {
  // How many awards the player has got up to this point.
  var no = this.no_awards + 1;
  if( no <= 6 ) {
    // Only visually show the first six awards.
    // Add them one column at a time from the left.
    var x = no <= 3 && 16 || 525;
    var y = 74;
    if( no % 3 == 2 ) {
      y = 189;
    } else if( no % 3 == 0 ) {
      y = 304;
    }
    var award_parts = {};
    award_parts.is_table = true;
    // Insert the info for later reference
    award_parts.info = {
      text = text,
      award_type = award_type,
      amount = amount
    };

    // The plaque
    if( amount > 0 ) {
      // A positive award
      award_parts[1] = this->addPanel(10, x + 12, y + 11);
    } else {
      // A bad award
      award_parts[1] = this->addPanel(11, x + 12, y + 11);
    }
    // The frame
    award_parts[2] = this->addPanel(23, x, y);
    // The shadow
    award_parts[3] = this->addPanel(award_shadows[no].shadow, x, y);
    // Make a button so that the player can click and see the motivation
    var /*persistable:annual_report_show_award_motivation*/ function change() { this->showAwardMotivation(no); }
    award_parts[4] = award_parts[3]->makeButton(0, 0, 105, 103, award_shadows[no].shadow, change);
    this.awards[no] = award_parts;
    setActive(award_parts, false);
  }

  // The economic part of the award.
  this.no_awards = no;
}

//! Activates the motivation scroll with the given text on it.
//!param text_index_to_show The index of the award to show info from.
function UIAnnualReport::showAwardMotivation(text_index_to_show) {
  if( text_index_to_show ) {
    // Make sure no trophy motivation is shown
    this->showTrophyMotivation();
    setActive(this.scroll, true);
    // Possibly hide the black award symbol
    if( this.awards[text_index_to_show].info.amount > 0 ) {
      setActive(this.scroll[4], false);
    }
    setActive(this.fourth_close, true);
    setActive(this.third_change, false);
    this.award_motivation = text_index_to_show;
  } else {
    setActive(this.scroll, false);
    setActive(this.fourth_close, false);
    setActive(this.third_change, true);
    this.award_motivation = null;
  }
}

//! Activates the motivation plaque with the given text on it.
//!param text_index_to_show The index of the trophy to show info from.
function UIAnnualReport::showTrophyMotivation(text_index_to_show) {
  if( text_index_to_show ) {
    // Make sure no award motivation is shown
    this->showAwardMotivation();
    setActive(this.plaque, true);
    setActive(this.third_close, true);
    setActive(this.third_change, false);
    this.trophy_motivation = text_index_to_show;
  } else {
    setActive(this.plaque, false);
    setActive(this.third_close, false);
    setActive(this.third_change, true);
    this.trophy_motivation = null;
  }
}

//! Overridden close function. The game should be unpaused again when closing the dialog.
function UIAnnualReport::close() {
  if( TheApp.world->getLocalPlayerHospital().game_won ) {
    if( ! TheApp.world->isCurrentSpeed("Pause") ) {
      TheApp.world->setSpeed("Pause");
      TheApp.video->setBlueFilterActive(false);
    }
    TheApp.world.ui.bottom_panel->openLastMessage();
  } else if( TheApp.world->isCurrentSpeed("Pause") ) {
    if( TheApp.ui.speed_up_key_pressed ) {
      TheApp.world->setSpeed("Speed Up");
    } else {
      TheApp.world->setSpeed(TheApp.world.prev_speed);
    }
  }
  this->updateAwards();
  Window.close(this);
  this.ui.app.world->checkIfGameWon();
}

//! Changes the page of the annual report
//!param page_no The page to go to, either page 1, 2 or 3. Default is currently page 2.
function UIAnnualReport::changePage(page_no) {
  // Can only go to page 2 from page 1, and then only between page 2 and 3
  //setActive(self.first_close, false)
  setActive(this.second_close, true);
  this.second_close.visible = true;
  if( page_no == 2 || ! page_no ) { // Statistics page.
    this.background = this.stat_background;
    setActive(this.third_change, false);
    setActive(this.second_change, true);
    for( i, _ in ipairs(this.trophies) ) {
      setActive(this.trophies[i], false);
    }
    for( i, _ in ipairs(this.awards) ) {
      setActive(this.awards[i], false);
    }
    this.state = 2;
  } else { // Awards and trophies
    this.background = this.award_background;
    setActive(this.third_change, true);
    setActive(this.second_change, false);
    // Show awards given.
    for( i, _ in ipairs(this.awards) ) {
      setActive(this.awards[i], true);
    }
    // And trophies given.
    for( i, _ in ipairs(this.trophies) ) {
      setActive(this.trophies[i], true);
    }
    this.state = 3;
  }
}

function UIAnnualReport::draw(canvas, x, y) {
  this.background->draw(canvas, this.x + x, this.y + y);
  UIFullscreen.draw(this, canvas, x, y);

  x, y = this.x + x, this.y + y;
  var font = this.stat_font;
  var world = this.ui.app.world;

  if( this.state == 1 ) { // Fame screen
    // Title and column names
    font->draw(canvas, _S.high_score.best_scores, x + 220, y + 104, 200, 0);
    font->draw(canvas, _S.high_score.pos, x + 218, y + 132);
    font->draw(canvas, _S.high_score.player, x + 260, y + 132);
    font->draw(canvas, _S.high_score.score, x + 360, y + 132);

    // Players and their score
    var i = 1;
    var dy = 0;
    //for i = 1, 10 do
      font->draw(canvas, i .. ".", x + 220, y + 160 + dy);
      font->draw(canvas, world.hospitals[1].name->upper(), x + 260, y + 160 + dy);
      font->draw(canvas, "NA", x + 360, y + 160 + dy);
      // dy = dy + 25
    //end
  } else if( this.state == 2 ) { // Statistics screen
    this->drawStatisticsScreen(canvas, x, y);
  } else { // Award and trophy screen
    // Write out motivation if appropriate
    if( this.trophy_motivation ) {
      // If it is a plaque showing we write in stone text.
      var info = this.trophies[this.trophy_motivation].info;
      this.stone_font->drawWrapped(canvas, info.text, x + 225, y + 105, 185, "center");
      // Type of award
      var award_type = _S.trophy_room.cash;
      if( info.award_type == "reputation" ) {
        award_type = _S.trophy_room.reputation;
      }
      this.stone_font->draw(canvas, award_type, x + 220, y + 330, 200, 0);
      // Amount won/lost
      this.stone_font->draw(canvas, "+" .. info.amount, x + 220, y + 355, 200, 0);
    } else if( this.award_motivation ) {
      var info = this.awards[this.award_motivation].info;
      this.write_font->drawWrapped(canvas, info.text, x + 235, y + 125, 165, "center");
      // Type of award
      var award_type = _S.trophy_room.cash;
      if( info.award_type == "reputation" ) {
        award_type = _S.trophy_room.reputation;
      }
      this.write_font->draw(canvas, award_type, x + 220, y + 290, 200, 0);
      // The amount won/lost
      var text = "";
      if( info.amount > 0 ) {
        text = "+";
      }
      this.write_font->draw(canvas, text .. info.amount, x + 220, y + 315, 200, 0);
    }
  }
}

function UIAnnualReport::drawStatisticsScreen(canvas, x, y) {

  var font = this.stat_font;
  var world = this.ui.app.world;

  // Draw titles
  font->draw(canvas, _S.menu.charts .. " " .. (world->date()->year() + 1999), x + 210, y + 30, 200, 0);
  font->draw(canvas, _S.high_score.categories.money, x + 140, y + 98, 170, 0);
  font->draw(canvas, _S.high_score.categories.salary, x + 328, y + 98, 170, 0);
  font->draw(canvas, _S.high_score.categories.cures, x + 140, y + 205, 170, 0);
  font->draw(canvas, _S.high_score.categories.deaths, x + 328, y + 205, 170, 0);
  font->draw(canvas, _S.high_score.categories.visitors, x + 140, y + 310, 170, 0);
  font->draw(canvas, _S.high_score.categories.total_value, x + 328, y + 310, 170, 0);

  // TODO: Add possibility to right align text.

  // Helper function to find where the person is in the array.
  // TODO: This whole sorting thing, it should be possible to do it in a better way?
  var getindex = function(tablename, val) {
    var i = 0;
    var index;
    for( ind, value in ipairs(tablename) ) {
      if( value == val ) {
        if( ! index ) {
          index = ind;
        }
        ++i    ;
      }
    }
    return index, i;
  };

  var row_y = 128;
  var row_dy = 15;
  var col_x = 190;
  var row_no_y = 106;
  var dup_money = 0;
  var dup_salary = 0;
  var dup_cures = 0;
  var dup_deaths = 0;
  var dup_visitors = 0;
  var dup_value = 0;
  for( _, player in ipairs(world.hospitals) ) {
    var name = player.name;

    // Most Money
    var index_m, dup_m = getindex(this.money_sort, this.money[name]);
    // index_* is the returned value of the sorted place for this player.
    // However there might be many players with the same value, so each iteration a
    // duplicate has been found, one additional row lower is the right place to be.
    font->draw(canvas, name->upper(), x + 140,
        y + row_y + row_dy * (index_m - 1) + row_dy * dup_money);
    font->draw(canvas, this.money[name], x + 240,
        y + row_y + row_dy * (index_m - 1) + row_dy * dup_money, 70, 0, "right");

    // Highest Salary
    var index_s, dup_s = getindex(this.salary_sort, this.salary[name]);
    font->draw(canvas, name->upper(), x + 140 + col_x,
        y + row_y + row_dy * (index_s - 1) + row_dy * dup_salary);
    font->draw(canvas, this.salary[name], x + 240 + col_x,
        y + row_y + row_dy * (index_s - 1) + row_dy * dup_salary, 70, 0, "right");

    // Most Cures
    var index_c, dup_c = getindex(this.cures_sort, this.cures[name]);
    font->draw(canvas, name->upper(), x + 140,
        y + row_y + row_no_y + row_dy * (index_c - 1) + row_dy * dup_cures);
    font->draw(canvas, this.cures[name], x + 240,
        y + row_y + row_no_y + row_dy * (index_c - 1) + row_dy * dup_cures, 70, 0, "right");

    // Most Deaths
    var index_d, dup_d = getindex(this.deaths_sort, this.deaths[name]);
    font->draw(canvas, name->upper(), x + 140 + col_x,
        y + row_y + row_no_y + row_dy * (index_d - 1) + row_dy * dup_deaths);
    font->draw(canvas, this.deaths[name], x + 240 + col_x,
        y + row_y + row_no_y + row_dy * (index_d - 1) + row_dy * dup_deaths, 70, 0, "right");

    // Most Visitors
    var index_v, dup_v = getindex(this.visitors_sort, this.visitors[name]);
    font->draw(canvas, name->upper(), x + 140,
        y + row_y + row_no_y * 2 + row_dy * (index_v - 1) + row_dy * dup_visitors);
    font->draw(canvas, this.visitors[name], x + 240,
        y + row_y + row_no_y * 2 + row_dy * (index_v - 1) + row_dy * dup_visitors, 70, 0, "right");

    // Highest Value
    var index_v2, dup_v2 = getindex(this.value_sort, this.value[name]);
    font->draw(canvas, name->upper(), x + 140 + col_x,
        y + row_y + row_no_y * 2 + row_dy * (index_v2 - 1) + row_dy * dup_value);
    font->draw(canvas, this.value[name], x + 240 + col_x,
        y + row_y + row_no_y * 2 + row_dy * (index_v2 - 1) + row_dy * dup_value, 70, 0, "right");

    if( dup_m > 1 ) { ++dup_money    ; } else { dup_money = 0; }
    if( dup_s > 1 ) { ++dup_salary    ; } else { dup_salary = 0; }
    if( dup_c > 1 ) { ++dup_cures    ; } else { dup_cures = 0; }
    if( dup_d > 1 ) { ++dup_deaths    ; } else { dup_deaths = 0; }
    if( dup_v > 1 ) { ++dup_visitors    ; } else { dup_visitors = 0; }
    if( dup_v2 > 1 ) { ++dup_value    ; } else { dup_value = 0; }
  }
}
