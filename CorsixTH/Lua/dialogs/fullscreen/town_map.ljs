/* Copyright (c) 2010 Sjors Gielen

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

var TH = require("TH");

//! Town map fullscreen window (purchase land, set radiator levels, map overview).
class ("UITownMap") (UIFullscreen);

//-@type UITownMap
var UITownMap = _G["UITownMap"];

function UITownMap::UITownMap(ui) {
  this->UIFullscreen(ui);

  var app = this.ui.app;
  var gfx = app.gfx;
  this.app = app;

  if( ! pcall(function() {
    var palette   = gfx->loadPalette("QData", "Town01V.pal");
    palette->setEntry(255, 0xFF, 0x00, 0xFF); // Make index 255 transparent

    this.background = gfx->loadRaw("Town01V", 640, 480);
    this.info_font  = gfx->loadFont("QData", "Font34V", false, palette);
    this.city_font = gfx->loadFont("QData", "Font31V", false, palette);
    this.money_font = gfx->loadFont("QData", "Font05V");
    this.panel_sprites = gfx->loadSpriteTable("QData", "Town02V", true, palette);
  }) ) {
    ui->addWindow(UIInformation(ui, {_S.errors.dialog_missing_graphics}));
    this->close();
    return;
  }

  this.default_button_sound = "selectx.wav";
  this.default_buy_sound    = "buy.wav";

  var config = this->initRuntimeConfig();

  // A list of areas in the town, including the owner.
  // In single player there are only bought and available areas, in multiplayer
  // areas are owned by players and when a player wants to buy a piece of
  // terrain, an auction is started.
  // TODO display the areas, in the right color
  // TODO display everything in the areas
  // TODO multiplayer mode

  // NB: original TH closed the town map on right click of balance button.
  // This is likely a bug and we do not copy this behavior.
  this->addPanel(0, 30,  420)->makeButton(0, 0, 200, 50, 0, this.bankManager, null, this.bankStats)->setTooltip(_S.tooltip.town_map.balance);
  this->addPanel(0, 594, 437)->makeButton(0, 0, 26, 26, 8, this.close)->setTooltip(_S.tooltip.town_map.close);
  this->addPanel(0, 171, 315)->makeButton(0, 0, 20, 20, 6, this.increaseHeat)->setTooltip(_S.tooltip.town_map.heat_inc);
  this->addPanel(0, 70,  314)->makeButton(0, 0, 20, 20, 7, this.decreaseHeat)->setTooltip(_S.tooltip.town_map.heat_dec);

  // add the toggle buttons
  var function toggle_button(sprite, x, y, option, str) {
    var panel = this->addPanel(sprite, x, y);
    var btn = panel->makeToggleButton(0, 0, 46, 46, 0, /*persistable:town_map_config_button*/ function(_, state) {
      app.runtime_config.town_dialog[option] = state;
    })->setTooltip(str);
    btn->setToggleState(config[option]);
  }
  toggle_button(1, 140,  37, "people_enabled", _S.tooltip.town_map.people);
  toggle_button(2, 140,  89, "plants_enabled", _S.tooltip.town_map.plants);
  toggle_button(3, 140, 141, "fire_ext_enabled", _S.tooltip.town_map.fire_extinguishers);
  toggle_button(4, 140, 193, "objects_enabled", _S.tooltip.town_map.objects);
  toggle_button(5, 140, 246, "radiators_enabled", _S.tooltip.town_map.radiators);

  this->makeTooltip(_S.tooltip.town_map.heat_level, 94, 318, 167, 331);
  this->makeTooltip(_S.tooltip.town_map.heating_bill, 72, 351, 167, 374);
}

function UITownMap::initRuntimeConfig() {
  // config is a *runtime* configuration list; re-instantiations of the dialog
  // share the same values, but it's not saved across saves or sessions
  var config = this.app.runtime_config.town_dialog;
  if( config == null ) {
    config = {};
    this.app.runtime_config.town_dialog = config;
    config.people_enabled = true;
    config.plants_enabled = true;
    config.fire_ext_enabled = true;
    config.objects_enabled = true;
    config.radiators_enabled = true;
  }
  return config;
}

function UITownMap::close() {
  UIFullscreen.close(this);
  this.ui->getWindow(UIBottomPanel)->updateButtonStates();
}

var flag_cache = {};
function UITownMap::onMouseMove(x, y) {
  var tx = math.floor((x - 227) / 3);
  var ty = math.floor((y - 25) / 3);
  this.hover_plot = null;
  if( 0 <= tx && tx < 128 && 0 <= ty && ty < 128 ) {
    var map = this.ui.hospital.world.map.th;
    this.hover_plot = map->getCellFlags(tx + 1, ty + 1, flag_cache).parcelId;
  }
  return UIFullscreen.onMouseMove(this, x, y);
}

function UITownMap::onMouseUp(button, x, y) {
  var redraw = false;
  if( button == "left" ) {
    var tx = math.floor((x - 227) / 3);
    var ty = math.floor((y - 25) / 3);
    if( 0 <= tx && tx < 128 && 0 <= ty && ty < 128 ) {
      var map = this.ui.hospital.world.map.th;
      var plot = map->getCellFlags(tx + 1, ty + 1, flag_cache).parcelId;
      if( plot != 0 ) {
        if( this.ui.hospital->purchasePlot(plot) ) {
          this.ui->playSound("cashreg.wav");
          redraw = true;
        } else {
          this.ui->playSound("Wrong2.wav");
        }
      }
    }
  } else if( button == "right" ) {
    var tx = math.floor((x - 227) / 3);
    var ty = math.floor((y - 25) / 3);
    var map = this.ui.hospital.world.map.th;
    if( 0 <= tx && tx < 128 && 0 <= ty && ty < 128 ) {
      var plot = map->getCellFlags(tx + 1, ty + 1, flag_cache).parcelId;
      if( plot != 0 ) {
        var sx, sy = this.ui.app.map->WorldToScreen(tx, ty);
        this.ui->scrollMapTo(sx, sy);
        this->close();
      }
    }
  }

  return UIFullscreen.onMouseUp(this, button, x, y) || redraw;
}

function UITownMap::draw(canvas, x, y) {
  this.background->draw(canvas, this.x + x, this.y + y);
  UIFullscreen.draw(this, canvas, x, y);

  x, y = this.x + x, this.y + y;
  var app      = this.ui.app;
  var hospital = this.ui.hospital;
  var world    = hospital.world;
  var map      = world.map;
  // config is a *runtime* configuration list; re-instantiations of the dialog
  // share the same values, but it's not saved across saves or sessions
  var config   = app.runtime_config.town_dialog;
  if( ! config ) {
    config = this->initRuntimeConfig();
  }

  // We need to draw number of people, plants, fire extinguisers, other objects
  // and radiators.
  // NB: original TH's patient count was always 1 too big (started counting at 1)
  // This is likely a bug and we do not copy this behavior.
  var patientcount = hospital.patientcount;
  var plants = world.object_counts.plant;
  var fireext = world.object_counts.extinguisher;
  var objs = world.object_counts.general;
  var radiators = world.object_counts.radiator;

  this.info_font->draw(canvas, patientcount, x +  95, y +  57);
  this.info_font->draw(canvas, plants,       x +  95, y + 110);
  this.info_font->draw(canvas, fireext,      x +  95, y + 157);
  this.info_font->draw(canvas, objs,         x +  95, y + 211);
  this.info_font->draw(canvas, radiators,    x +  95, y + 265);

  // Heating costs
  var heating_costs = math.floor(((hospital.radiator_heat *10)* radiators)* 7.5);
  this.info_font->draw(canvas, ("%8i")->format(heating_costs),  x + 100, y + 355);

  // draw money balance
  this.money_font->draw(canvas, ("%7i")->format(hospital.balance), x + 49, y + 431);

  // radiator heat
  var rad_max_width = 60; // Radiator indicator width
  var rad_width = rad_max_width * hospital.radiator_heat;
  for( dx = 0, rad_width ) {
    this.panel_sprites->draw(canvas, 9, x + 101 + dx, y + 319);
  }

  // city name
  this.city_font->draw(canvas, map.level_name, x + 300, y + 43, 260, 15);

  var town_map_offset_x = x + 227;
  var town_map_offset_y = y + 25;
  TH.windowHelpers.townMapDraw(this, map.th, canvas, town_map_offset_x, town_map_offset_y,
    config.radiators_enabled);

  // Draw entities
  var function draw_entities(list, color, size) {
    for( _, ent in ipairs(list) ) {
      // 3 is the number of pixel that are used to represent one world tile in the map
      canvas->drawRect(color, town_map_offset_x + ent.tile_x * 3 - 2,
        town_map_offset_y + ent.tile_y * 3 + 1, size, size);
    }
  }

  var function draw_entities_in_hospital(list, color, size) {
    for( _, ent in ipairs(list) ) {
      var tile_x, tile_y = ent.tile_x, ent.tile_y;
      if( tile_x && hospital->isInHospital(tile_x, tile_y) ) {
        // 3 is the number of pixel that are used to represent one world tile in the map
        canvas->drawRect(color, town_map_offset_x + tile_x * 3 - 2,
          town_map_offset_y + tile_y * 3 + 1, size, size);
      }
    }
  }

  //! Select entities of the world by their id.
  //!param id Id of the objects to select.
  //!return (list) The selected entities.
  var function get_objects_by_id(id) {
    var ret = {};
    for( _, obj_list in pairs(world.objects) ) {
      for( _, obj in ipairs(obj_list) ) {
        if( obj.object_type.id == id ) {
          table.insert(ret, obj);
        }
      }
    }
    return ret;
  }

  if( config.people_enabled ) {
    var staff_color = canvas->mapRGB(97, 109, 235);
    var patient_color = canvas->mapRGB(255, 255, 255);
    draw_entities_in_hospital(this.ui.hospital.staff, staff_color, 2);
    draw_entities_in_hospital(this.ui.hospital.patients, patient_color, 2);
  }

  if( config.radiators_enabled ) {
    var radiator_color = canvas->mapRGB(255, 0, 70);
    draw_entities(get_objects_by_id("radiator"), radiator_color, 1);
  }

  if( config.fire_ext_enabled ) {
    var fire_ext_color = canvas->mapRGB(216, 0, 0);
    draw_entities(get_objects_by_id("extinguisher"), fire_ext_color, 2);
  }

  if( config.plants_enabled ) {
    var plant_color = canvas->mapRGB(127, 180, 73);
    draw_entities(get_objects_by_id("plant"), plant_color, 2);
  }

  if( config.objects_enabled ) {
    var machine_list = {};
    for( _, obj_list in pairs(world.objects) ) {
      for( _, obj in ipairs(obj_list) ) {
        if( obj.object_type.show_in_town_map ) {
          table.insert(machine_list, obj);
        }
      }
    }

    var machine_color = canvas->mapRGB(142, 182, 182);
    draw_entities(machine_list, machine_color, 3);
  }

  // plot number, owner, area and price
  var plot_num = "-";
  var tile_count = "-";
  var price = "-";
  var owner = "-";
  if( this.hover_plot ) {
    if( this.hover_plot == 0 ) {
      price = _S.town_map.not_for_sale;
    } else {
      tile_count = map->getParcelTileCount(this.hover_plot);
      var owner_num = map.th->getPlotOwner(this.hover_plot);
      if( owner_num == 0 ) {
        owner = _S.town_map.for_sale;
        price = "$" .. map->getParcelPrice(this.hover_plot);
      } else {
        owner = world.hospitals[owner_num].name;
      }
      plot_num = this.hover_plot;
    }
  }
  this.city_font->draw(canvas, _S.town_map.number, x + 227, y + 435);
  this.city_font->draw(canvas, ":",                x + 300, y + 435);
  this.city_font->draw(canvas, plot_num,           x + 315, y + 435);
  this.city_font->draw(canvas, _S.town_map.owner,  x + 227, y + 450);
  this.city_font->draw(canvas, ":",                x + 300, y + 450);
  this.city_font->draw(canvas, owner,              x + 315, y + 450);
  this.city_font->draw(canvas, _S.town_map.area,   x + 432, y + 435);
  this.city_font->draw(canvas, ":",                x + 495, y + 435);
  this.city_font->draw(canvas, tile_count,         x + 515, y + 435);
  this.city_font->draw(canvas, _S.town_map.price,  x + 432, y + 450);
  this.city_font->draw(canvas, ":",                x + 495, y + 450);
  this.city_font->draw(canvas, price,              x + 515, y + 450);
}

function UITownMap::decreaseHeat() {
  var h = this.ui.hospital;
  var heat = math.floor(h.radiator_heat * 10 + 0.5);
  if( ! h.heating_broke ) {
    --heat    ;
    if( heat < 1 ) {
      heat = 1;
    }
    h.radiator_heat = heat / 10;
  }
}

function UITownMap::increaseHeat() {
  var h = this.ui.hospital;
  var heat = math.floor(h.radiator_heat * 10 + 0.5);
  if( ! h.heating_broke ) {
    ++heat    ;
    if( heat > 10 ) {
      heat = 10;
    }
    h.radiator_heat = heat / 10;
  }
}

function UITownMap::bankManager() {
  var dlg = UIBankManager(this.ui);
  this.ui->addWindow(dlg);
  this.ui->getWindow(UIBottomPanel)->updateButtonStates();
}

function UITownMap::bankStats() {
  var dlg = UIBankManager(this.ui);
  dlg->showStatistics();
  this.ui->addWindow(dlg);
  this.ui->getWindow(UIBottomPanel)->updateButtonStates();
}
