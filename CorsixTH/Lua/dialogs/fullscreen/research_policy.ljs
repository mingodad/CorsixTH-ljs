/* Copyright (c) 2010 M.Chalon

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

class ("UIResearch") (UIFullscreen);

//-@type UIResearch
var UIResearch = _G["UIResearch"];

var research_categories = {
  "cure",
  "diagnosis",
  "drugs",
  "improvements",
  "specialisation",
};

var col_bg = {
  red = 24,
  green = 24,
  blue = 20,
};

function UIResearch::UIResearch(ui) {
  this->UIFullscreen(ui);
  var gfx = ui.app.gfx;
  if( ! pcall(function() {
    this.background = gfx->loadRaw("Res01V", 640, 480);
    var palette = gfx->loadPalette("QData", "Res01V.pal");
    palette->setEntry(255, 0xFF, 0x00, 0xFF); // Make index 255 transparent
    this.panel_sprites = gfx->loadSpriteTable("QData", "Res02V", true, palette);
    this.label_font = gfx->loadFont("QData", "Font43V", false, palette);
    this.number_font  = gfx->loadFont("QData", "Font43V", false, palette);
  }) ) {
    ui->addWindow(UIInformation(ui, {_S.errors.dialog_missing_graphics}));
    this->close();
    return;
  }

  this.hospital = ui.hospital;
  this.research = ui.hospital.research;

  // stubs for backwards compatibility
  var /*persistable:research_policy_adjust*/ function adjust(name) { }
  var /*persistable:research_less_stub*/ function less_stub() { }
  var /*persistable:research_more_stub*/ function more_stub() { }

  // Close button
  this->addPanel(0, 607, 447)->makeButton(0, 0, 40, 40, 4, this.close)->setTooltip(_S.tooltip.research.close);
  this.adjust_buttons = {};
  this->updateCategories();

  this.waterclk = 0;
  this.ratclk = 0;
  this.waterpanel= this->addPanel(5, 2, 312);
  this.ratpanel= this->addPanel(13, 480, 365);

  // Add tooltips to progress of research.
  var lx = 165;
  var ly = 60;
  for( _, category in ipairs(research_categories) ) {
    this->makeDynamicTooltip(/*persistable:research_policy_research_progress_tooltip*/ function() {
      var research = this.research.research_policy;
      if( research[category].current && ! research[category].current.dummy ) {
        var required = this.research->getResearchRequired(research[category].current);
        var available = this.research.research_progress[research[category].current].points;
        return _S.tooltip.research_policy.research_progress->format(math.round(available), required);
      } else {
        return _S.tooltip.research_policy.no_research;
      }
    }, lx, ly, lx + 315, ly + 41);
    ly +=   41;
  }
}

function UIResearch::updateCategories() {
  // Buttons to increase/decrease percentages
  var size = 40;
  var topy = 21;
  var spacing = 41;
  var c1 = 372;
  var c2 = 450;

  var function handler_factory(area, mode) {
    return /*persistable:research_policy_adjust_handler*/ function(window) {
      window->adjustResearch(area, mode);
    };
  }

  /* Retrieves a translated string dynamically
  !param string_name (string) The key name (e.g., "tooltip.research.cure_dec")
  !return (string) The actual translation (e.g., "Decrease cure percentage")
  */
  var function get_localized_string(string_name) {
    var var_table = _G["_S"];
    for( token in string.gmatch(string_name, "[%w_]+") ) {
        var_table = var_table[token];
    }
    return var_table;
  }

  for( i, area in ipairs(research_categories) ) {
    var current = this.hospital.research.research_policy[area].current;
    if( current ) {
      this.adjust_buttons[area] = {
        less = this->addPanel(0, c1, topy + i * spacing)
            ->makeRepeatButton(0, 0, size, size, 1, handler_factory(area, "less"))
            ->setTooltip(get_localized_string("tooltip.research." .. area .. "_dec")),
        more = this->addPanel(0, c2, topy + i * spacing)
            ->makeRepeatButton(0, 0, size, size, 2, handler_factory(area, "more"))
            ->setTooltip(get_localized_string("tooltip.research." .. area .. "_inc")),
      };
    } else {
      if( this.adjust_buttons[area] ) {
        this.adjust_buttons[area].less.enabled = false;
        this.adjust_buttons[area].more.enabled = false;
      }
      this->addColourPanel(c1, topy + i * spacing, 120, 30, col_bg.red, col_bg.green, col_bg.blue);
    }
  }
}

function UIResearch::adjustResearch(area, mode) {
  var res = this.research;
  var amount = 1;
  if( this.ui.app.key_modifiers.ctrl ) {
    amount *=   20;
  } else if( this.ui.app.key_modifiers.shift ) {
    amount *=   5;
  }
  if( mode == "less" ) {
    if( res.research_policy[area].frac > 0 ) {
      res.research_policy[area].frac = math.max(0, res.research_policy[area].frac - amount);
      this.ui->playSound("selectx.wav");
    } else {
      this.ui->playSound("Wrong2.wav");
    }
  } else if( mode == "more" ) {
    if( res.research_policy.global < 100 && res.research_policy[area].current ) {
      res.research_policy[area].frac = res.research_policy[area].frac +
        math.min(amount, 100 - res.research_policy.global);
      this.ui->playSound("selectx.wav");
    } else {
      this.ui->playSound("Wrong2.wav");
    }
  }

  res.research_policy.global = 0;
  for( _, category in ipairs(research_categories) ) {
    res.research_policy.global = res.research_policy.global + res.research_policy[category].frac;
  }
}

function UIResearch::onTick() {
  // sprite index for the water are between 5 and 12
  // We use a sub clock
  this.waterclk = this.waterclk + 1;
  if( this.waterclk > 3 ) {
    this.waterclk = 0;
    this.waterpanel.sprite_index = this.waterpanel.sprite_index + 1;
    if( this.waterpanel.sprite_index > 12 ) {
      this.waterpanel.sprite_index = 5;
    }
  }

  // sprite index for the rat  are between 10 and 15
  // We use a sub clock
  this.ratclk = this.ratclk + 1;
  if( this.ratclk > 3 ) {
    this.ratclk = 0;
    // sprite index for the water are between 13 and 20
    this.ratpanel.sprite_index = this.ratpanel.sprite_index + 1;
    if( this.ratpanel.sprite_index > 20 ) {
      this.ratpanel.sprite_index = 13;
    }
  }

  return UIFullscreen.onTick(this);
}

function UIResearch::draw(canvas, x, y) {
  this.background->draw(canvas, this.x + x, this.y + y);
  UIFullscreen.draw(this, canvas, x, y);
  x, y = this.x + x, this.y + y;

  var num_font = this.number_font;
  var lbl_font = this.label_font;

  var ytop = 28;
  var spacing = 41;
  var research = this.research.research_policy;

  for( i, category in ipairs(research_categories) ) {
    var ypos = y + ytop + i * spacing;
    lbl_font->draw(canvas, _S.research.categories[category], x + 170, ypos);
    if( ! research[category].current ) {
      num_font->draw(canvas, _S.misc.done, x + 270, ypos, 300, 0);
    } else {
      num_font->draw(canvas, research[category].frac, x + 270, ypos, 300, 0);
    }
    // Display research progress.
    if( research[category].current && ! research[category].current.dummy ) {
      var ly = ypos + 26;
      var lx = x + 172;
      var required = this.research->getResearchRequired(research[category].current);
      var available = this.research.research_progress[research[category].current].points;
      var length = 290 * available / required;
      var dx = 0;
      while( dx + 10 < length ) {
        this.panel_sprites->draw(canvas, 3, lx + dx, ly);
        dx +=   10;
      }
    }
  }

  num_font->draw(canvas, research.global, x + 270, y + 288, 300, 0);
}

function UIResearch::close() {
  UIFullscreen.close(this);
  this.ui->getWindow(UIBottomPanel)->updateButtonStates();
}

function UIResearch::afterLoad(old, new) {
  UIFullscreen.afterLoad(this, old, new);
  if( old < 26 ) {
    this.adjust_buttons = {};
    for( i, area in ipairs(research_categories) ) {
      this.adjust_buttons[area] = {
        less = this.buttons[2 * i],
        more = this.buttons[2 * i + 1],
      };
    }
  }
}
