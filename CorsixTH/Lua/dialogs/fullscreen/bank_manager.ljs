/* Copyright (c) 2009 Edvin "Lego3" Linge

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

//! Bank manager (for loans / insurance companies) and bank statement fullscreen windows.
class ("UIBankManager") (UIFullscreen);

//-@type UIBankManager
var UIBankManager = _G["UIBankManager"];

function UIBankManager::UIBankManager(ui) {
  this->UIFullscreen(ui);
  var gfx = ui.app.gfx;
  this.world = ui.app.world;
  if( ! pcall(function() {
    this.background = gfx->loadRaw("Bank01V", 640, 480);
    this.stat_background = gfx->loadRaw("Stat01V", 640, 480);
    var palette = gfx->loadPalette("QData", "Bank01V.pal");
    palette->setEntry(255, 0xFF, 0x00, 0xFF); // Make index 255 transparent
    this.panel_sprites = gfx->loadSpriteTable("QData", "Bank02V", true, palette);
    this.font = gfx->loadFont("QData", "Font36V", false, palette);

    // The statistics font
    palette = gfx->loadPalette("QData", "Stat01V.pal");
    palette->setEntry(255, 0xFF, 0x00, 0xFF); // Make index 255 transparent
    this.stat_font = gfx->loadFont("QData", "Font37V", false, palette);
  }) ) {
    ui->addWindow(UIInformation(ui, {_S.errors.dialog_missing_graphics}));
    this->close();
    return;
  }
  // counters for the animations of the bank manager
  this.counter = 0;
  this.browsclk = 0;
  this.smilesclk = 0;
  this.eyesclk = 0;

   // sprites for the animation
  this.smiles = this->addPanel(12, 303, 199);
  this.eyesblink = this->addPanel(7, 298, 173);
  this.browslift = this->addPanel(9, 296, 165);

  // Button so that the user can click in the middle and get the statistics page and
  // vice versa
  this.stat_button = this->addPanel(0, 230, 100)
    ->makeButton(0, 0, 160, 300, 0, this.showStatistics);
  this.return_from_stat_button = this->addPanel(0, 0, 0)
    ->makeButton(0, 0, 640, 440, 0, this.hideStatistics);
  this.return_from_stat_button.enabled = false;

  // Buttons
  // The close button needs to be movable
  this.close_panel = this->addPanel(0, 607, 448);
  this.close_button = this.close_panel->makeButton(0, 0, 26, 26, 4, this.close)->setTooltip(_S.tooltip.bank_manager.close);

  this->addPanel(0, 250, 390)->makeButton(0, 0, 200, 50, 0, this.openTownMap)->setTooltip(_S.tooltip.toolbar.town_map);
  this->addPanel(0, 192, 265)->makeButton(0, 0, 21, 21, 6, this.increaseLoan)->setTooltip(_S.tooltip.bank_manager.borrow_5000);
  this->addPanel(0, 50, 265)->makeButton(0, 0, 21, 21, 5, this.decreaseLoan)->setTooltip(_S.tooltip.bank_manager.repay_5000);

  this.graph_buttons = {
    this->addPanel(0, 547, 157)->makeButton(0, 0, 42, 23, 3, this.showGraph1)->setTooltip(_S.tooltip.bank_manager.show_graph->format(this.ui.hospital.insurance[1])),
    this->addPanel(0, 547, 217)->makeButton(0, 0, 42, 23, 3, this.showGraph2)->setTooltip(_S.tooltip.bank_manager.show_graph->format(this.ui.hospital.insurance[2])),
    this->addPanel(0, 547, 277)->makeButton(0, 0, 42, 23, 3, this.showGraph3)->setTooltip(_S.tooltip.bank_manager.show_graph->format(this.ui.hospital.insurance[3]))
  };

  this.graph = this->addPanel(1, 417, 150);

  this.graph.visible = false;
  this.graph.enabled = false;
  this.return_from_graph_button = this->addPanel(0, 547, 277);
  this.return_from_graph_button->makeButton(0, 0, 42, 23, 2, this.returnFromGraph)->setTooltip(_S.tooltip.bank_manager.graph_return);
  this.return_from_graph_button.visible = false;
  this.return_from_graph_button.enabled = false;

  this->makeTooltip(_S.tooltip.bank_manager.hospital_value,   60, 105, 203, 157);
  this->makeTooltip(_S.tooltip.bank_manager.balance,          60, 170, 203, 222);
  this->makeTooltip(_S.tooltip.bank_manager.current_loan,     60, 235, 203, 287);
  this->makeTooltip(_S.tooltip.bank_manager.interest_payment, 60, 300, 203, 352);

  var /*persistable:insurance_tooltip_template*/ function insurance_tooltip(i) {
    return /*persistable:insurance_tooltip*/ function() {
      if( ! this.graph.visible ) {
        return _S.tooltip.bank_manager.insurance_owed->format(this.ui.hospital.insurance[i]);
      }
    };
  }

  this->makeDynamicTooltip(insurance_tooltip(1), 430, 128, 589, 180);
  this->makeDynamicTooltip(insurance_tooltip(2), 430, 188, 589, 240);
  this->makeDynamicTooltip(insurance_tooltip(3), 430, 248, 589, 300);

  this->makeTooltip(_S.tooltip.bank_manager.inflation_rate, 430, 308, 589, 331);
  this->makeTooltip(_S.tooltip.bank_manager.interest_rate, 430, 337, 589, 360);
  // TODO: Add the graphs
}

function UIBankManager::afterLoad(old, new) {
  if( old < 36 ) {
    // adds the new variables for bank manager animation
    this.browsclk = 0;
    this.smilesclk = 0;
    this.eyesclk = 0;
    this.counter = 0;
    this.smiles = this->addPanel(12, 303, 199);
    this.eyesblink = this->addPanel(7, 298, 173);
    this.browslift = this->addPanel(9, 296, 165);
  }
  UIFullscreen.afterLoad(this, old, new);
}

//! Sum the values in the provided array.
//!param t Array to sum.
//!return (int) The sum of all values from the t array.
var function sum(t) {
  var total = 0;
  for( _, entry in ipairs(t) ) {
    total +=   entry;
  }
  return total;
}

//! Animation function.
function UIBankManager::onTick() {
  this.counter = this.counter + 1;
  // animate the eyes to blink
  var function animateEyes() {
    this.eyesclk = this.eyesclk + 1;
    if( this.eyesclk > 2 ) {
      this.eyesclk = 0;
      this.eyesblink.sprite_index = this.eyesblink.sprite_index + 1;
      if( this.eyesblink.sprite_index > 8 ) {
        this.eyesblink.sprite_index = 7;
      }
    }
  }
  // animate the eyebrows to raise and lower
  var function animateBrows() {
    this.browsclk = this.browsclk + 1;
    if( this.browsclk > 3 ) {
      this.browsclk = 0;
      this.browslift.sprite_index = this.browslift.sprite_index + 1;
      if( this.browslift.sprite_index > 11 ) {
        this.browslift.sprite_index = 9;
      }
    }
  }
  // animate the smile to frown and back again
  var function animateSmile() {
    this.smilesclk = this.smilesclk + 1;
    if( this.smilesclk > 3 ) {
      this.smilesclk = 0;
      this.smiles.sprite_index = this.smiles.sprite_index + 1;
      if( this.smiles.sprite_index > 15 ) {
        this.smiles.sprite_index = 12;
      }
    }
  }
  // counters to determine when to start and stop the animations
  // two blinks
  if( this.counter  >= 24 && this.counter < 36 ) {
    animateEyes();
  // one blink
  } else if( this.counter  >= 49 && this.counter < 55 ) {
    animateEyes();
  // one blink
  } else if( this.counter  >= 70 && this.counter < 76 ) {
    animateEyes();
  // up and down once
  } else if( this.counter  >= 88 && this.counter < 100 ) {
    animateBrows();
  // smile
  } else if( this.counter  >= 132 &&  this.counter < 140 ) {
    animateSmile();
  // two blinks
  } else if( this.counter  >= 164 && this.counter < 176 ) {
    animateEyes();
  // one blink
  } else if( this.counter  >= 189 && this.counter < 195 ) {
    animateEyes();
  // one blink
  } else if( this.counter  >= 219 && this.counter < 225 ) {
    animateEyes();
  // brows  up and down once
  } else if( this.counter  >= 248 && this.counter < 260 ) {
    animateBrows();
  //smiles
  } else if( this.counter  >= 272 && this.counter < 280 ) {
    animateSmile();
  // brows up and down twice
  } else if( this.counter  >= 298 && this.counter < 322 ) {
    animateBrows();
  // two blinks
  } else if( this.counter  >= 340 && this.counter < 352 ) {
    animateEyes();
  }
  // reset the animation counter
  if( this.counter > 420 ) {
    this.counter = 0;
  }
}

function UIBankManager::draw(canvas, x, y) {
  var hospital = this.ui.hospital;

  // Either draw the statistics page or the normal bank page
  if( this.showingStatistics ) {
    var font = this.stat_font;
    this.stat_background->draw(canvas, this.x + x, this.y + y);
    UIFullscreen.draw(this, canvas, x, y);
    x, y = this.x + x, this.y + y;

    // Titles
    font->draw(canvas, _S.bank_manager.statistics_page.date, x + 44, y + 37, 65, 0);
    font->draw(canvas, _S.bank_manager.statistics_page.details, x + 125, y + 40, 230, 0);
    font->draw(canvas, _S.bank_manager.statistics_page.money_out, x + 373, y + 42, 70, 0);
    font->draw(canvas, _S.bank_manager.statistics_page.money_in, x + 449, y + 41, 70, 0);
    font->draw(canvas, _S.bank_manager.statistics_page.balance, x + 525, y + 40, 70, 0);

    // Lua < 5.3 stored integer money amount in floating point values.
    // Lua 5.3 introduced an integer representation, and started printing
    // integer floating point numbers with a trailing .0 .
    //
    // As a result, CorsixTH games converted from earlier Lua versions print a
    // trailing .0 in the bank manager window. The "math.floor" around all
    // numbers printed below avoids that problem by converting to integer
    // representation for Lua 5.3, and doing nothing in Lua < 5.3.

    // Each transaction
    // A for loop going backwards
    for( no = 1, #hospital.transactions ) {
      var values = hospital.transactions[#hospital.transactions - no + 1];
      var current_y = no * 15 + y + 60;
      font->draw(canvas, _S.date_format.daymonth->format(values.day, values.month), x + 48, current_y);
      font->draw(canvas, values.desc, x + 129, current_y);
      if( values.spend ) {
        font->draw(canvas, "$ " .. math.floor(values.spend), x + 377, current_y);
      } else {
        font->draw(canvas, "$ " .. math.floor(values.receive), x + 453, current_y);
      }
      font->draw(canvas, "$ " .. math.floor(values.balance), x + 529, current_y);
    }

    // Summary
    font->draw(canvas, _S.bank_manager.statistics_page.current_balance, x + 373, y + 420, 140, 0);
    font->draw(canvas, "$ " .. hospital.balance, x + 526, y + 421, 70, 0);
  } else {
    var font = this.font;
    this.background->draw(canvas, this.x + x, this.y + y);
    UIFullscreen.draw(this, canvas, x, y);
    x, y = this.x + x, this.y + y;

    // The left side
    font->draw(canvas, _S.bank_manager.hospital_value, x + 60, y + 109, 143, 0);
    font->draw(canvas, "$ " .. math.floor(hospital.value), x + 60, y + 139, 143, 0);
    font->draw(canvas, _S.bank_manager.balance, x + 60, y + 174, 143, 0);
    font->draw(canvas, "$ " .. math.floor(hospital.balance), x + 60, y + 204, 143, 0);
    font->draw(canvas, _S.bank_manager.current_loan, x + 60, y + 239, 143, 0);
    font->draw(canvas, "$ " .. math.floor(hospital.loan), x + 60, y + 269, 143, 0);
    font->draw(canvas, _S.bank_manager.interest_payment, x + 60, y + 305, 143, 0);
    var interest = math.floor(hospital.loan * hospital.interest_rate / 12);
    font->draw(canvas, "$ " .. interest, x + 60, y + 334, 143, 0);

    // The right side
    font->draw(canvas, _S.bank_manager.insurance_owed, x + 430, y + 102, 158, 0);
    if( this.graph.visible ) {
      font->draw(canvas, hospital.insurance[this.chosen_insurance], x + 430, y + 132, 158, 0);
    } else {
      font->draw(canvas, hospital.insurance[1], x + 430, y + 132, 158, 0);
      font->draw(canvas, "$ ".. math.floor(sum(hospital.insurance_balance[1])), x + 430, y + 162, 100, 0);
      font->draw(canvas, hospital.insurance[2], x + 430, y + 192, 158, 0);
      font->draw(canvas, "$ ".. math.floor(sum(hospital.insurance_balance[2])), x + 430, y + 222, 100, 0);
      font->draw(canvas, hospital.insurance[3], x + 430, y + 252, 158, 0);
      font->draw(canvas, "$ ".. math.floor(sum(hospital.insurance_balance[3])), x + 430, y + 282, 100, 0);
    }
    font->draw(canvas, _S.bank_manager.inflation_rate, x + 430, y + 312, 100, 0);
    font->draw(canvas, hospital.inflation_rate*100 .. " %", x + 550, y + 313, 38, 0);
    font->draw(canvas, _S.bank_manager.interest_rate, x + 430, y + 342, 100, 0);
    font->draw(canvas, hospital.interest_rate*100 .. " %", x + 550, y + 342, 38, 0);
  }
}

function UIBankManager::onMouseMove(x, y, ...) {
    var ui = this.ui;
    if( x > 0 && x < 640 && y > 0 && y < 480 ) {
      if( this.showingStatistics ) {
        ui->setCursor(ui.app.gfx->loadMainCursor("banksummary")); // Set pie chart cursor
      } else {
        ui->setCursor(ui.app.gfx->loadMainCursor("bank")); // Set dollar cursor
      }
    } else {
      ui->setCursor(ui.default_cursor); // Return to default cursor
    }
}

function UIBankManager::close() {
  var ui = this.ui;
  ui->setCursor(ui.default_cursor); // Return to default cursor
  UIFullscreen.close(this);
  this.ui->getWindow(UIBottomPanel)->updateButtonStates();
}

function UIBankManager::showStatistics(keep_cursor) {
  if( this.closed ) {
    return;
  }
  this.ui->playSound("selectx.wav");
  // close any open graphs
  if( this.graph.visible ) {
    this->returnFromGraph();
  }
  this.showingStatistics = true;
  this.return_from_stat_button.enabled = true;
  this.stat_button.enabled = false;
  // hides the animated parts of the bank manager when viewing the statement
  this.smiles.visible = false;
  this.eyesblink.visible = false;
  this.browslift.visible = false;
  // The close button has been slightly moved.
  var panel = this.close_panel;
  panel.x = panel.x - 6;
  panel.y = panel.y - 6;
  var btn = this.close_button;
  btn.x = btn.x - 6;
  btn.y = btn.y - 6;
  // Change tooltip to say that the statement screen is closed.
  btn->setTooltip(_S.tooltip.statement.close);
  // Set pie chart cursor, unless coming here from right click on the dollar sign.
  if( ! keep_cursor ) {
    this.ui->setCursor(this.ui.app.gfx->loadMainCursor("banksummary"));
  }
}

function UIBankManager::hideStatistics() {
  this.ui->playSound("selectx.wav");
  this.showingStatistics = false;
  this.return_from_stat_button.enabled = false;
  this.stat_button.enabled = true;
  // shows the animated parts of the bank manager when viewing the main screen
  this.smiles.visible = true;
  this.eyesblink.visible = true;
  this.browslift.visible = true;
  // resets the animation counter if the screen is switched to the statement and back
  this.counter = -1;
  // return the close button again
  var panel = this.close_panel;
  panel.x = panel.x + 6;
  panel.y = panel.y + 6;
  var btn = this.close_button;
  btn.x = btn.x + 6;
  btn.y = btn.y + 6;
  // Change the tooltip back
  btn->setTooltip(_S.tooltip.bank_manager.close);
  // Set dollar cursor
  this.ui->setCursor(this.ui.app.gfx->loadMainCursor("bank"));
}

function UIBankManager::showGraph() {
  this.ui->playSound("selectx.wav");
  this.graph->setTooltip(_S.tooltip.bank_manager.graph->format(this.ui.hospital.insurance[this.chosen_insurance]));
  this.graph.visible = true;
  this.return_from_graph_button.visible = true;
  this.return_from_graph_button.enabled = true;

  for( i = 1, 3 ) {
    this.graph_buttons[i].visible = false;
    this.graph_buttons[i].enabled = false;
  }
}

function UIBankManager::showGraph1() {
  this.chosen_insurance = 1;
  this->showGraph();
}

function UIBankManager::showGraph2() {
  this.chosen_insurance = 2;
  this->showGraph();
}

function UIBankManager::showGraph3() {
  this.chosen_insurance = 3;
  this->showGraph();
}

function UIBankManager::returnFromGraph() {
  this.ui->playSound("selectx.wav");
  this.graph.visible = false;
  this.return_from_graph_button.visible = false;
  this.return_from_graph_button.enabled = false;
  for( i = 1, 3 ) {
    this.graph_buttons[i].enabled = true;
    this.graph_buttons[i].visible = true;
  }
}

function UIBankManager::increaseLoan() {
  var hospital = this.ui.hospital;
  var max_loan = ! this.world.free_build_mode && (math.floor((hospital.value * 0.33) / 5000) * 5000) + 10000 || 0;
  if( hospital.loan + 5000 <= max_loan  ) {
    var amount = this.ui.app.key_modifiers.ctrl && max_loan - hospital.loan || 5000;
    hospital.loan = hospital.loan + amount;
    hospital->receiveMoney(amount, _S.transactions.bank_loan);
    this.ui->playSound("selectx.wav");
  } else {
    this.ui->playSound("Wrong2.wav");
  }
}

function UIBankManager::decreaseLoan() {
  var hospital = this.ui.hospital;
  var amount = 5000;
  if( this.ui.app.key_modifiers.ctrl ) {
    // Repay as much as possible in increments of 5000
    if( hospital.balance > 5000 ) {
      amount = math.min(hospital.loan, math.floor(hospital.balance / 5000) * 5000);
    }
  }
  if( hospital.loan > 0 && hospital.balance >= amount ) {
    hospital.loan = hospital.loan - amount;
    hospital->spendMoney(amount, _S.transactions.loan_repayment);
    this.ui->playSound("selectx.wav");
  } else {
    this.ui->playSound("Wrong2.wav");
  }
}

function UIBankManager::openTownMap() {
  var dlg = UITownMap(this.ui);
  this.ui->addWindow(dlg);
}
