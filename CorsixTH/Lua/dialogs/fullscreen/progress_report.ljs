/* Copyright (c) 2010 Edvin "Lego3" Linge

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

//! Progress Report fullscreen window (check level goals, competitors and alerts).
class ("UIProgressReport") (UIFullscreen);

//-@type UIProgressReport
var UIProgressReport = _G["UIProgressReport"];

function UIProgressReport::UIProgressReport(ui) {
  // TODO: Refactor this file!
  this->UIFullscreen(ui);

  var world = this.ui.app.world;
  var hospital = ui.hospital;
  var gfx   = ui.app.gfx;

  if( ! pcall(function() {
    var palette   = gfx->loadPalette("QData", "Rep01V.pal");
    palette->setEntry(255, 0xFF, 0x00, 0xFF); // Make index 255 transparent

    this.background = gfx->loadRaw("Rep01V", 640, 480);
    this.red_font  = gfx->loadFont("QData", "Font101V", false, palette);
    this.normal_font = gfx->loadFont("QData", "Font100V", false, palette);
    this.small_font = gfx->loadFont("QData", "Font106V");
    this.panel_sprites = gfx->loadSpriteTable("QData", "Rep02V", true, palette);
  }) ) {
    ui->addWindow(UIInformation(ui, {_S.errors.dialog_missing_graphics}));
    this->close();
    return;
  }

  this.default_button_sound = "selectx.wav";

  // Selected hospital number
  this.selected = 1;

  // Add the icons for the criteria
  var x = 263;
  var world_goals = world.goals;
  for( _, tab in ipairs(world_goals) ) {
    var crit_name = world.level_criteria[tab.criterion].name;
    var res_value = world_goals[crit_name].win_value;
    world_goals[crit_name].visible = true;
    // Special case for money, subtract loans
    var cur_value = hospital[crit_name];
    if( crit_name == "balance" ) {
      cur_value = cur_value - hospital.loan;
    }
    if( world_goals[crit_name].lose_value ) {
      world_goals[crit_name].red = false;

      if( cur_value < world_goals[crit_name].boundary ) {
        world_goals[crit_name].red = true;
        res_value = world_goals[crit_name].lose_value;
        // TODO: Make the ugly workaround for the special case "percentage_killed" better
        if( crit_name->find("killed") ) {
          res_value = null;
          world_goals[crit_name].visible = false;
        }
      } else if( ! world_goals[crit_name].win_value ) {
        world_goals[crit_name].visible = false;
      }
    }
    // Only five criteria can be there at once.
    if( crit_name->find("killed") && world.winning_goal_count > 5 ) {
      res_value = null;
      world_goals[crit_name].visible = false;
    }
    if( res_value ) {
      var tooltip;
      if( world.level_criteria[tab.criterion].formats == 2 ) {
        tooltip = _S.tooltip.status[crit_name]->format(math.floor(res_value), math.floor(cur_value));
      } else {
        tooltip = _S.tooltip.status[crit_name]->format(math.floor(res_value));
      }
      this->addPanel(world.level_criteria[tab.criterion].icon, x, 240);
      this->makeTooltip(tooltip, x, 180, x + 30, 180 + 90);
      x +=   30;
    }
  }

  this->addPanel(0, 606, 447)->makeButton(0, 0, 26, 26, 8, this.close)->setTooltip(_S.tooltip.status.close);

  // Own and competitor hospital buttons
  var function btn_handler(num) {
    return /*persistable:progress_report_hospital_button*/ function() {
      this.selected = num;
    };
  }
  var function tooltip(num) {
    return (num == 1) && _S.tooltip.status.win_progress_own ||
      _S.tooltip.status.win_progress_other->format(world.hospitals[num].name) .. " " .. _S.misc.not_yet_implemented;
  }
  var function make_hosp_button(num) {
    this->addPanel(0, 265, 71 + (num - 1) * 25)
      ->makeButton(0, 0, 147, 20, 9, btn_handler(num))
      ->setTooltip(tooltip(num))
      ->enable(num == 1);
  }

  for( i = 1, math.min(#world.hospitals, 4) ) {
    make_hosp_button(i);
  }

  this->makeTooltip(_S.tooltip.status.population_chart .. " " .. _S.misc.not_yet_implemented, 433, 64, 578, 179);
  this->makeTooltip(_S.tooltip.status.happiness, 433, 179, 578, 209);
  this->makeTooltip(_S.tooltip.status.thirst, 433, 209, 578, 239);
  this->makeTooltip(_S.tooltip.status.warmth, 433, 239, 578, 270);

  this.warning = this->addPanel(7, 252, 295);
  this.warning.visible = false;
  // TODO: 6 gray
}

function UIProgressReport::close() {
  UIFullscreen.close(this);
  this.ui->getWindow(UIBottomPanel)->updateButtonStates();
}

function UIProgressReport::drawMarkers(canvas, x, y) {
  var x_min = 455;
  var x_max = 551;
  var width = x_max - x_min;
  var happiness = this.ui.hospital->getAveragePatientAttribute("happiness", 0.5);
  var thirst = 1 - this.ui.hospital->getAveragePatientAttribute("thirst", 0.5);
  var warmth = this.ui.hospital->getAveragePatientAttribute("warmth", null);
  warmth = UIPatient.normaliseWarmth(warmth);

  this.panel_sprites->draw(canvas, 5, math.floor(x + x_min + width * happiness), y + 193);
  this.panel_sprites->draw(canvas, 5, math.floor(x + x_min + width * thirst), y + 223);
  this.panel_sprites->draw(canvas, 5, math.floor(x + x_min + width * warmth), y + 254);

  var world = this.ui.app.world;
  if( world.free_build_mode ) {
    this.normal_font->drawWrapped(canvas, _S.progress_report.free_build, x + 265, y + 194, 150, "center");
  }

  // Possibly show warning that it's too cold, too hot, patients not happy
  // or if theres need to build drink machines as folks are thirsty.  Only show one at a time though!
  // TODO the levels may need adjustment
  var msg = this.ui.hospital.show_progress_screen_warnings;
  if( warmth < 0.3 && msg == 1 ) {
    this.warning.visible = true;
    this.normal_font->drawWrapped(canvas, _S.progress_report.too_cold, x + 285, y + 285, 285);
  } else if( warmth > 0.7 && msg == 1 ) {
    this.warning.visible = true;
    this.normal_font->drawWrapped(canvas, _S.progress_report.too_hot, x + 285, y + 285, 285);
  } else if( thirst > 0.7 && msg == 2 ) {
    this.warning.visible = true;
    this.normal_font->drawWrapped(canvas, _S.progress_report.more_drinks_machines, x + 285, y + 285, 285);
  } else if( happiness < 0.8 && happiness >= 0.6 && msg == 3 ) {
    this.warning.visible = true;
    this.normal_font->drawWrapped(canvas, _S.progress_report.quite_unhappy, x + 285, y + 285, 285);
  } else if( happiness < 0.6 && msg == 3 ) {
    this.warning.visible = true;
    this.normal_font->drawWrapped(canvas, _S.progress_report.very_unhappy, x + 285, y + 285, 285);
  } else {
    this.warning.visible = false;
  }
}

function UIProgressReport::draw(canvas, x, y) {
  this.background->draw(canvas, this.x + x, this.y + y);
  UIFullscreen.draw(this, canvas, x, y);

  x, y = this.x + x, this.y + y;
  var hospital = this.ui.hospital;
  var world    = hospital.world;
  var world_goals = world.goals;

  // Names of the players playing
  var ly = 73;
  for( pnum, player in ipairs(world.hospitals) ) {
    var font = (pnum == this.selected) && this.red_font || this.normal_font;
    font->draw(canvas, player.name->upper(), x + 272, y + ly);
    ly +=   25;
  }

  // Draw the vertical bars for the winning conditions
  var lx = 270;
  for( _, tab in ipairs(world_goals) ) {
    var crit_name = world.level_criteria[tab.criterion].name;
    if( world_goals[crit_name].visible ) {
      var sprite_offset = world_goals[crit_name].red && 2 || 0;
      var cur_value = hospital[crit_name];
      // Balance is special
      if( crit_name == "balance" ) {
        cur_value = cur_value - hospital.loan;
      }
      var height;
      if( world_goals[crit_name].red ) {
        var lose = world_goals[crit_name].lose_value;
        height = 1 + 49 * (1 - ((cur_value - lose)/(world_goals[crit_name].boundary - lose)));
      } else {
        height = 1 + 49 * (cur_value/world_goals[crit_name].win_value);
      }
      if( height > 50 ) { height = 50; }
      var result_y = 0;
      for( dy = 0, height - 1 ) {
        this.panel_sprites->draw(canvas, 1 + sprite_offset, x + lx, y + 237 - dy);
        ++result_y    ;
      }
      this.panel_sprites->draw(canvas, 2 + sprite_offset, x + lx, y + 237 - result_y);
      lx +=   30;
    }
  }

  this->drawMarkers(canvas, x, y);

  this.normal_font->draw(canvas, _S.progress_report.header .. " " ..
      (world->date()->year() + 1999), x + 227, y + 40, 400, 0);
  this.small_font->draw(canvas, _S.progress_report.win_criteria->upper(), x + 263, y + 172);
  this.small_font->draw(canvas, _S.progress_report.percentage_pop->upper() .. " " ..
      (hospital.population * 100) .. "%", x + 450, y + 65);
}
