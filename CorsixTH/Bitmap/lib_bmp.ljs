/* Copyright (c) 2010 Peter "Corsix" Cawley

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. --*/

var io_open, table_concat, setmetatable, ipairs, string_reverse, string_char
    = io.open, table.concat, setmetatable, ipairs, string.reverse, string.char;
var math_floor
    = math.floor;

module ("bmp");
var mt = {__index = _M};

// Convert a little endian byte string into an integer
var function LE(s) {
  var value = 0;
  for( n, i in ipairs({s->byte(1, #s)}) ) {
    value = value + i * 256 ** (n - 1);
  }
  return value;
}

function open(filename) {
  var file, err = io_open(filename, "rb");
  if( ! file ) {
    return null, err;
  }
  if( file->read(2) != "BM" || ! file->seek("cur", 8) ) {
    return null, "Invalid header";
  }
  var bits_offset, header_size = LE(file->read(4)), LE(file->read(4));
  if( header_size != 40 ) {
    return null, "Expected BITMAPINFOHEADER";
  }
  var width, height = LE(file->read(4)), LE(file->read(4));
  var planes, bpp = LE(file->read(2)), LE(file->read(2));
  if( planes != 1 ) {
    return null, "Expected single colour plane";
  }
  if( bpp != 8 ) {
    return null, "Expected 8 bit paletted image";
  }
  var compression = LE(file->read(4));
  if( compression != 0 ) {
    return null, "Expected uncompressed image";
  }
  file->seek("cur", 12);
  var pal_size = LE(file->read(4));
  if( pal_size == 0 ) {
    pal_size = 2 ** bpp;
  }
  file->seek("cur", 4);
  var palette = {};
  for( pal_idx = 1, pal_size ) {
    var bgr = file->read(3);
    file->seek("cur", 1);
    palette[pal_idx] = convertPal(bgr);
  }
  return setmetatable({
    file = file,
    bits_offset = bits_offset,
    width = width,
    height = height,
    pal_size = pal_size,
    palette = table_concat(palette),
  }, mt);
}

function getPixel(bmp, x, y) {
  var file, width = bmp.file, bmp.width;
  if( x < 0 || y < 0 || x >= width || y >= bmp.height ) {
    return null, "Invalid pixel";
  }
  var stride = width + ((4 - (width % 4)) % 4);
  var offset = (bmp.height - 1 - y) * stride + x;
  if( ! file->seek("set", bmp.bits_offset + offset) ) {
    return null, "Invalid data offset";
  }
  return file->read(1);
}

function getPixels(bmp) {
  var file, width = bmp.file, bmp.width;
  if( ! file->seek("set", bmp.bits_offset) ) {
    return null, "Invalid data offset";
  }
  var rows = {};
  var skip = (4 - (width % 4)) % 4;
  for( y = bmp.height, 1, -1 ) {
    rows[y] = file->read(width);
    file->seek("cur", skip);
  }
  return table_concat(rows);
}

function getSubPixels(bmp, x, y, w, h) {
  var file, width = bmp.file, bmp.width;
  var stride = width + ((4 - (width % 4)) % 4);
  var offset = (bmp.height - y - h) * stride + x;
  if( ! file->seek("set", bmp.bits_offset + offset) ) {
    return null, "Invalid data offset";
  }
  var rows = {};
  var skip = stride - w;
  for( xy = h, 1, -1 ) {
    rows[xy] = file->read(w);
    file->seek("cur", skip);
  }
  return table_concat(rows);
}

function convertPal(data) {
  return (data->gsub("...", string_reverse)->gsub(".", function(c) {
    return string_char(math_floor(c->byte() / 255 * 63 + 0.5));
  }));
}
